version = '2.1.4'

def mainclass = 'org.qcmg.snp.Main'
def scriptname = 'qsnp'
def isExecutable = true

repositories {
	flatDir(dirs:"$buildDir/deps/ini4j-0.5.2-SNAPSHOT")
}

dependencies {
    configurations.compile.transitive = true

    compile project(':qcommon')
    compile project(':qio')
    compile project(':qbamfilter')
    compile project(':qpicard')
    
	copy { from zipTree("../lib/ini4j-0.5.2-SNAPSHOT-all.zip") into 'build/deps' } 
    compile name: 'ini4j', version: '0.5.2-SNAPSHOT'

    compile name: 'trove', version: '3.1a1'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'	
	compile group: 'com.github.samtools', name: 'htsjdk', version: '2.14.1'
	compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '4.6'
	testCompile group: 'junit', name: 'junit', version: '4.10'

}

jar.doFirst {
  def classpath = configurations.runtime.collect { it.name }.join(' ')
  jar {
     manifest {
        attributes 'Implementation-Title': project.name,
                   'Implementation-Version': "$version ($revision)",
                   'SVN-Version': revision,
                   'Built-By': System.properties['user.name'],
                   'Date': new java.util.Date().toString(),
                   'Main-Class' : mainclass,
                   'Class-Path' : classpath
     }
  }
}


build.doLast {
    def jarname = project.name
    ant {
       echo(file: "build/flat/${scriptname}", message: "#!/bin/bash\njava -jar ${jarname}-${version}.jar \$@")
       chmod(file: "build/flat/${scriptname}", perm: "u+rwx")
    }
    copy {
       from configurations.compile
       from 'build/lib'
       into file('build/flat')
    }
}

task findbugs(dependsOn: build) << {
        def outputFileName = project.name
    ant {
        taskdef(name:'findbugs', classname:'edu.umd.cs.findbugs.anttask.FindBugsTask', classpath: 'build/deps/findbugs-1.3.9/lib/findbugs.jar')

        findbugs(home: 'build/deps/findbugs-1.3.9/lib', output:'xml', outputFile:'findbugs_' + "${outputFileName}-${version}" + '.xml') {
                sourcePath(path: 'src')
                "class"(location: 'build/lib/qbammerge-' + "$version" + '.jar')
        }
    }
}

task tar(type: Tar) {
	from ('build/flat') {
		include '**/*.jar'
	}
}
