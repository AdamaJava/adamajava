package QCMG::Visualise::TimelordReport;

##############################################################################
#
#  Module:   QCMG::Visualise:TimelordReport.pm
#  Author:   John V Pearson
#  Created:  2012-08-29
#
#  Read a timelord.pl XML file and create a HTML file that uses the
#  Google chart API to display appropriate graphs and summary tables.
#
#  $Id$
#
##############################################################################

use strict;
use warnings;

use Carp qw( carp croak confess );
use Data::Dumper;
use XML::LibXML;

use QCMG::Google::Charts;
use QCMG::HTML::TabbedPage;
use QCMG::HTML::Tab;
use QCMG::Lifescope::Cht;
use QCMG::Util::QLog;
use QCMG::Util::XML qw( get_attr_by_name get_node_by_name );
#use QCMG::Visualise::ReportCheckBam;
#use QCMG::Visualise::ReportInspectBam;
#use QCMG::Visualise::ReportMissingBam;

use vars qw( $SVNID $REVISION );

( $REVISION ) = '$Revision$ ' =~ /\$Revision:\s+([^\s]+)/;
( $SVNID ) = '$Id$'
    =~ /\$Id:\s+(.*)\s+/;


sub new {
    my $class  = shift;
    my %params = @_;

    croak "You must supply one of file/xmltext/xmlnode to new()"
        unless (exists $params{file} or
                exists $params{xmltext} or
                exists $params{xmlnode});

    my $self = { file    => '',
                 xmltext => '',
                 xmlnode => undef,
                 charts  => QCMG::Google::ChartCollection->new(),
                 page    => QCMG::HTML::TabbedPage->new(
                                title => 'Timelord BAM Report' ),
                 verbose => $params{verbose} || 0 };
    bless $self, $class;

    # Enable Google charts API
    $self->page->use_google_charts(1);

    # Ultimately we need a XML::LibXML::Element but we could have been
    # passed an Element object, a filename or a text blob.  In the latter
    # two cases, we need to create an XML node from the file or text.

    if (exists $params{xmlnode}) {
        my $type = ref($params{xmlnode});
        croak 'xmlnode parameter must refer to a XML::LibXML::Element '.
              "object not [$type]" unless ($type eq 'XML::LibXML::Element');
        my $name = $params{xmlnode}->nodeName;
        croak "xmlnode parameter must be a TimelordReport Element not [$name]\n"
            unless ($name eq 'TimelordReport');
        $self->{xmlnode} = $params{xmlnode};
    }
    elsif (exists $params{xmltext}) {
        my $xmlnode = undef;
        eval{ $xmlnode = XML::LibXML->load_xml( string => $params{xmltext} ); };
        croak $@ if $@;
        $self->{xmlnode} = $xmlnode;
    }
    elsif (exists $params{file}) {
        my $xmlnode = undef;
        eval{ $xmlnode = XML::LibXML->load_xml( location => $params{file} ); };
        croak $@ if $@;
        $self->{xmlnode} = $xmlnode;
    }
    else {
        confess "Uh oh - should not be able to get here!"
    }

    return $self;
}


sub file {
    my $self = shift;
    return $self->{file};
}


sub charts {
    my $self = shift;
    return $self->{charts};
}


sub page {
    my $self = shift;
    return $self->{page};
}


sub xmlnode {
    my $self = shift;
    return $self->{xmlnode};
}


sub verbose {
    my $self = shift;
    return $self->{verbose};
}


sub html {
    my $self = shift;
    return $self->page->as_html;
}   
 
 
sub process {
    my $self = shift;

    my $file   = $self->file;
    my $charts = $self->charts;  # QCMG::Google::ChartCollection object
    my $page   = $self->page;    # QCMG::HTML::TabbedPage object
    my $root   = $self->xmlnode;

    # Pull out info for header
    my $creation_date = get_attr_by_name( $root, 'creation_date' );
    my $created_by = get_attr_by_name( $root, 'created_by' );
    my $code_version = get_attr_by_name( $root, 'code_version' );
    $page->add_content( 
                 '<p class="header">' .
                 "<i>Generated on: </i><b>$creation_date</b>" .
                 ' &nbsp;&nbsp;&nbsp; '.
                 "<i>Generated by: </i><b>$created_by</b>" .
                 ' &nbsp;&nbsp;&nbsp; '.
                 "<i>Generated using software: </i><b>v$code_version</b>");

    $page->add_headers( '<style>
.invalid_bam {
    -moz-border-radius: 5px;
    -webkit-border-radius: 5px;
    -khtml-border-radius: 5px;
    border-radius: 5px;
    background-color:#ddaa53;
}
.not_grch37 {
    -moz-border-radius: 5px;
    -webkit-border-radius: 5px;
    -khtml-border-radius: 5px;
    border-radius: 5px;
    background-color:#aadd53;
}
.no_md {
    -moz-border-radius: 5px;
    -webkit-border-radius: 5px;
    -khtml-border-radius: 5px;
    border-radius: 5px;
    background-color:#aa53dd;
}
.no_hd {
    -moz-border-radius: 5px;
    -webkit-border-radius: 5px;
    -khtml-border-radius: 5px;
    border-radius: 5px;
    background-color:#dd53aa;
}
.no_rg {
    -moz-border-radius: 5px;
    -webkit-border-radius: 5px;
    -khtml-border-radius: 5px;
    border-radius: 5px;
    background-color:#53aadd;
}
.no_lims {
    -moz-border-radius: 5px;
    -webkit-border-radius: 5px;
    -khtml-border-radius: 5px;
    border-radius: 5px;
    background-color:#53ddaa;
}
.rg_probs {
    -moz-border-radius: 5px;
    -webkit-border-radius: 5px;
    -khtml-border-radius: 5px;
    border-radius: 5px;
    background-color:#aadddd;
}
.failed_qc {
    -moz-border-radius: 5px;
    -webkit-border-radius: 5px;
    -khtml-border-radius: 5px;
    border-radius: 5px;
    background-color:#ddaadd;
}
</style>' );


    # Start parsing all of the reports into Google::Charts
    $self->summary;
    $self->process_report_check_bams;
    $self->process_report_inspect_bams;
    $self->process_report_missing_bams;

    # If we've parsed all of the reports then all our charts should be
    # ready so we can add the javascript
    $page->add_content( $charts->javascript );
}

 
sub summary {
    my $self = shift;

    qlogprint( "Processing Summary\n" ) if $self->verbose;

    my @invalidnames   = $self->xmlnode->findnodes( "ReportCheckBam/InvalidlyNamedBams" );
    my @nothg19aligned = $self->xmlnode->findnodes( "ReportInspectBam/BamsNotAlignedAgainstGRCh37_ICGC_standard_v2.fa" );
    my @nomdtags       = $self->xmlnode->findnodes( "ReportInspectBam/BamsWithoutMdTag" );
    my @nohdline       = $self->xmlnode->findnodes( "ReportInspectBam/BamsWithoutHdHeader" );
    my @norgline       = $self->xmlnode->findnodes( "ReportInspectBam/BamsWithoutRgHeader" );
    my @onlyondisk     = $self->xmlnode->findnodes( "ReportMissingBam/BamsOnlyOnDisk" );
    my @rgprobs        = $self->xmlnode->findnodes( "ReportMissingBam/BamsWithRgMismatches" );
    my @failedqc       = $self->xmlnode->findnodes( "ReportMissingBam/MapsetsMarkedInLimsAsFailedQc" );

    # N.B. There is no purpose in processing "OnlyInLims" because they
    # are not on disk and the rest of the tabs relate to problems with
    # BAMs that are on disk.
    #my @onlyinlims     = $self->xmlnode->findnodes( "ReportMissingBam/BamsOnlyInLims" );

    # We assume that there is only one collection of each problem type
    my %bams = ();
    my $xmlnode = undef;
    my @nodes = ();
    my %counts = ( invalid_name =>
                      { count => 0,
                        desc  => 'BAM name does not match expected pattern',
                        html  => '<td class="invalid_bam">Name</td>' },
                   not_grch37 =>
                      { count => 0,
                        desc  => 'BAM not aligned to GRCh37_ICGC_standard_v2.fa',
                        html  => '<td class="not_grch37">NoRef</td>' },
                   no_md =>
                      { count => 0,
                        desc  => 'Records do not have MD tags',
                        html  => '<td class="no_md">NoMD</td>' },
                   no_hd =>
                      { count => 0,
                        desc  => 'BAM header does not have @HD line',
                        html  => '<td class="no_hd">NoHD</td>' },
                   no_rg =>
                      { count => 0,
                        desc  => 'BAM header does not have @RG line',
                        html  => '<td class="no_rg">NoRG</td>' },
                   no_lims =>
                      { count => 0,
                        desc  => 'BAM is on disk but not in LIMS',
                        html  => '<td class="no_lims">NoLIMS</td>' },
                   rg_probs =>
                      { count => 0,
                        desc  => 'Mapsets with @RG line SM/LB values that don\'t agree with LIMS',
                        html  => '<td class="rg_probs">ProbRG</td>' },
                   failed_qc =>
                      { count => 0,
                        desc  => 'Mapset is on disk but marked in LIMS as failing QC',
                        html  => '<td class="failed_qc">FailQC</td>' },
                 );
    if (scalar(@invalidnames)) {
        $xmlnode = $invalidnames[0];
        @nodes = $xmlnode->findnodes( "InvalidlyNamedBam" );
        foreach my $node (@nodes) {
            $bams{ $node->textContent }->{'invalid_name'} = 1;
            $counts{invalid_name}->{count}++;
        }
    }
    if (scalar(@nothg19aligned)) {
        $xmlnode = $nothg19aligned[0];
        @nodes = $xmlnode->findnodes( "BamNotAlignedAgainstGRCh37_ICGC_standard_v2.fa" );
        foreach my $node (@nodes) {
            $bams{ $node->textContent }->{'not_aligned_against_grch37'} = 1;
            $counts{not_grch37}->{count}++;
        }
    }
    if (scalar(@nomdtags)) {
        $xmlnode = $nomdtags[0];
        @nodes = $xmlnode->findnodes( "BamWithoutMdTag" );
        foreach my $node (@nodes) {
            $bams{ $node->textContent }->{'no_md_tag'} = 1;
            $counts{no_md}->{count}++;
        }
    }
    if (scalar(@nohdline)) {
        $xmlnode = $nohdline[0];
        @nodes = $xmlnode->findnodes( "BamWithoutHdHeader" );
        foreach my $node (@nodes) {
            $bams{ $node->textContent }->{'no_hd_header'} = 1;
            $counts{no_hd}->{count}++;
        }
    }
    if (scalar(@norgline)) {
        $xmlnode = $norgline[0];
        @nodes = $xmlnode->findnodes( "BamWithoutRgHeader" );
        foreach my $node (@nodes) {
            $bams{ $node->textContent }->{'no_rg_header'} = 1;
            $counts{no_rg}->{count}++;
        }
    }
    if (scalar(@onlyondisk)) {
        $xmlnode = $onlyondisk[0];
        @nodes = $xmlnode->findnodes( "BamOnlyOnDisk" );
        foreach my $node (@nodes) {
            $bams{ $node->textContent }->{'only_on_disk'} = 1;
            $counts{no_lims}->{count}++;
        }
    }
    if (scalar(@rgprobs)) {
        $xmlnode = $rgprobs[0];
        @nodes = $xmlnode->findnodes( "BamWithRgMismatches" );
        foreach my $node (@nodes) {
            $bams{ get_attr_by_name( $node, 'mapset' ) }->{'rg_probs'} = 1;
            $counts{rg_probs}->{count}++;
        }
    }
    if (scalar(@failedqc)) {
        $xmlnode = $failedqc[0];
        @nodes = $xmlnode->findnodes( "MapsetMarkedInLimsAsFailedQc" );
        foreach my $node (@nodes) {
            $bams{ $node->textContent }->{'failed_qc'} = 1;
            $counts{failed_qc}->{count}++;
        }
    }

    # Create tab
    my $tab = QCMG::HTML::Tab->new( id => 'Summary' );

    # Add legend table
    $tab->add_content( "<br><table class=\"qcmgtable\" cellpadding=\"2\" cellspacing=\"4\">\n" );
    $tab->add_content( "<tr><th>Symbol</th><th>Description</th><th>BAM count</th></tr>\n" );
    foreach my $key (qw/invalid_name not_grch37 no_md no_hd no_rg
                        no_lims rg_probs failed_qc/) {
        $tab->add_content( '<tr>'. $counts{$key}->{html}  . 
                           '<td>'. $counts{$key}->{desc}  . '</td>'.
                           '<td>'. $counts{$key}->{count} . "</td></tr>\n" );
    }
    $tab->add_content( "</table>\n<br>\n" );

    $tab->add_content( "<table cellpadding=\"2\" cellspacing=\"4\">\n" );
    foreach my $key (sort keys %bams) {
        $tab->add_content( "<tr>" );
        if ($bams{$key}->{'invalid_name'}) {
            $tab->add_content( "<td class=\"invalid_bam\">Name</td>" );
        }
        else {
            $tab->add_content( "<td></td>" );
        }
        if ($bams{$key}->{'not_aligned_against_grch37'}) {
            $tab->add_content( "<td class=\"not_grch37\">NoRef</td>" );
        }
        else {
            $tab->add_content( "<td></td>" );
        }
        if ($bams{$key}->{'no_md_tag'}) {
            $tab->add_content( "<td class=\"no_md\">NoMD</td>" );
        }
        else {
            $tab->add_content( "<td></td>" );
        }
        if ($bams{$key}->{'no_hd_header'}) {
            $tab->add_content( "<td class=\"no_hd\">NoHD</td>" );
        }
        else {
            $tab->add_content( "<td></td>" );
        }
        if ($bams{$key}->{'no_rg_header'}) {
            $tab->add_content( "<td class=\"no_rg\">NoRG</td>" );
        }
        else {
            $tab->add_content( "<td></td>" );
        }
        if ($bams{$key}->{'only_on_disk'}) {
            $tab->add_content( "<td class=\"no_lims\">NoLIMS</td>" );
        }
        else {
            $tab->add_content( "<td></td>" );
        }
        if ($bams{$key}->{'rg_probs'}) {
            $tab->add_content( "<td class=\"rg_probs\">ProbRG</td>" );
        }
        else {
            $tab->add_content( "<td></td>" );
        }
        if ($bams{$key}->{'failed_qc'}) {
            $tab->add_content( "<td class=\"failed_qc\">FailQC</td>" );
        }
        else {
            $tab->add_content( "<td></td>" );
        }
        $tab->add_content( "<td>$key</td>\n" );
        $tab->add_content( "</tr>\n" );
    }
    $tab->add_content( "</table>\n" );
    $self->page->add_subtab( $tab );
}


sub process_report_check_bams {
    my $self = shift;

    # We assume only one ReportCheckBam element so we check for
    # multiples but ONLY process the first one

    my @checkbams = $self->xmlnode->findnodes( "ReportCheckBam" );
    my $xmlnode = $checkbams[0];
    qlogprint( "Processing ReportCheckBam\n" ) if $self->verbose;

    my @nodes = $xmlnode->findnodes( 'InvalidlyNamedBams/InvalidlyNamedBam' );
    $self->tab_with_table_from_array( 'Invalid Names', \@nodes );
}



sub process_report_inspect_bams {
    my $self = shift;

    # We assume only one ReportInspectBams element so we check for
    # multiples but ONLY process the first one

    my @inspectbams = $self->xmlnode->findnodes( "ReportInspectBam" );
    my $xmlnode = $inspectbams[0];
    qlogprint( "Processing ReportInspectBam\n" ) if $self->verbose;

    my @nodes = $xmlnode->findnodes( 'BamsNotAlignedAgainstGRCh37_ICGC_standard_v2.fa/BamNotAlignedAgainstGRCh37_ICGC_standard_v2.fa' );
    $self->tab_with_table_from_array( 'Not Aligned to GRCh37', \@nodes );
    @nodes = $xmlnode->findnodes( 'BamsWithoutMdTag/BamWithoutMdTag' );
    $self->tab_with_table_from_array( 'No MD Tags', \@nodes );
    @nodes = $xmlnode->findnodes( 'BamsWithoutHdHeader/BamWithoutHdHeader' );
    $self->tab_with_table_from_array( 'No @HD', \@nodes );
    @nodes = $xmlnode->findnodes( 'BamsWithoutRgHeader/BamWithoutRgHeader' );
    $self->tab_with_table_from_array( 'No @RG', \@nodes );
}


sub process_report_missing_bams {
    my $self = shift;

    # We assume only one ReportCheckBam element so we check for
    # multiples but ONLY process the first one

    my @checkbams = $self->xmlnode->findnodes( "ReportMissingBam" );
    my $xmlnode = $checkbams[0];
    qlogprint( "Processing ReportMissingBam\n" ) if $self->verbose;

    my @nodes = $xmlnode->findnodes( "BamsOnlyOnDisk/BamOnlyOnDisk" );
    $self->tab_with_table_from_array( 'Not In LIMS', \@nodes );
    @nodes = $xmlnode->findnodes( "MapsetsMarkedInLimsAsFailedQc/MapsetMarkedInLimsAsFailedQc" );
    $self->tab_with_table_from_array( 'Failed QC', \@nodes );

    # @RG Problems is a special case because we need a 2-column table
    # so we can show the mapset and the problem values.
    @nodes = $xmlnode->findnodes( "BamsWithRgMismatches/BamWithRgMismatches" );
    # Pre-process nodes so we can sort them
    my %probs = ();
    foreach my $node (@nodes) {
        $probs{ get_attr_by_name( $node, 'mapset' ) } =
                           get_attr_by_name( $node, 'problems' );
    }

    my $tab = QCMG::HTML::Tab->new( id => '@RG Problems' );
    my $ctr = 1;
    $tab->add_content( "<br>\n<table class=\"qcmgtable\">\n" .
                       "<tr><th>Count</th><th>Mapset</th><th>Problem(s)</th></tr>\n" );
    foreach my $mapset (sort keys %probs) {
        $tab->add_content( "<tr><td>". $ctr++ . "</td><td>" .
                                       $mapset . "</td><td>" .
                                       $probs{ $mapset } . "</td></tr>\n" );
    }
    $tab->add_content( "</table>\n" );
    $self->page->add_subtab( $tab );
}


sub tab_with_table_from_array {
    my $self     = shift;
    my $title    = shift;
    my $ra_nodes = shift;

    my @mapsets = ();
    push @mapsets, $_->textContent foreach @{ $ra_nodes };

    my $tab = QCMG::HTML::Tab->new( id => $title );
    $tab->add_content( "<br>\n<table class=\"qcmgtable\">\n" .
                       "<tr><th>Count</th><th>Mapset</th></tr>\n" );
    my $ctr = 1;
    foreach my $mapset (sort @mapsets) {
        $tab->add_content( "<tr><td>". $ctr++ .'</td><td>'.
                                       $mapset ."</td></tr>\n" );
    }
    $tab->add_content( "</table>\n" );
    $self->page->add_subtab( $tab );
}



1;

__END__


=head1 NAME

QCMG::Visualise::TimelordReport - Perl module for creating HTML pages
from timelord.pl XML reports


=head1 SYNOPSIS

 use QCMG::Visualise::TimelordReport;

 my $report = QCMG::Visualise::TimelordReport->new( file => 'report.xml' );
 print $report->as_html( 'report.html' );


=head1 DESCRIPTION


=head1 PUBLIC METHODS

=over

=item B<new()>

=item B<file()>

=item B<as_html()>

=item B<verbose()>

=back 


=head1 AUTHOR

=over 2

=item John Pearson, L<mailto:j.pearson@uq.edu.au>

=back


=head1 VERSION

$Id$


=head1 COPYRIGHT

Copyright (c) The University of Queensland 2012

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
