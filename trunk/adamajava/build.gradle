defaultTasks "build"
allprojects {
   apply plugin: 'java'
   repositories { flatDir(dirs:"$projectDir/../lib"); mavenCentral() }
}
ext {
def proc = "svn info .".execute()
if (proc.waitFor() != 0) {
	throw new RuntimeException('svn version info gathering failed')
}

timestamp = new java.text.SimpleDateFormat('yyyyMMddHHmmss').format(new
java.util.Date()) 
   
params = proc.in.text.split(System.getProperty("line.separator"))
params.each {param ->
        if (param.startsWith("Revision")) {
                rev = param.split()[1]
        }
}

if (null == rev) rev = "???"
revision = rev  
}
version = 1.0

subprojects {
   apply plugin: 'eclipse'

   sourceCompatibility = 1.8

   defaultTasks "build"
   libsDirName = "lib"

   test.workingDir = getProperty('buildDir').getAbsolutePath() + '/classes/test'

   sourceSets {
      main {
            java {
                srcDir 'src'
            }
            resources {
                srcDir 'src'
            }
      }

      test {
            java {
                srcDir 'test'
            }
            resources {
                srcDir 'test'
            }
        }
    }

    // copies project jar files into adama/build/lib
    build.doLast {
      println "copying ${project} libs to adama"
      copy {
         from project.configurations.compile
         into file('adama/build/lib')
      }
      project.tasks.withType(Jar).each {archiveTask ->
          copy {
             from archiveTask.archivePath
             into file('adama/build/lib')
          }
      }

    }

}

// copies thirdpary libs (from ./lib) into adama/build/lib
build.doLast {
  delete('adama/build/lib')
  mkdir ('adama/build/lib')
	copy {
	   from 'lib'
           into 'adama/build/lib'
           include '**/*.so'
	}
	println "should have copied from ${libsDirName} to adama/build/lib"

    subprojects.each {project ->
         println "copying ${project} libs to adama"
         copy {
              from project.configurations.compile
              into file('adama/build/lib')
        }
         project.tasks.withType(Jar).each {archiveTask ->
         copy {
            from archiveTask.archivePath
           into file('adama/build/lib')
         }
     }
   }
}


task dist(type: Zip) {

  def zippedDir = "${project.name}-${version}"
  into(zippedDir){
    into ('lib') {
      from 'adama/build/lib'
    }
    into ('licenses') {
      from 'adama/licenses'
    }
    into ('bin') {
      from 'adama/bin'
      fileMode = 0755
    }
  }
  destinationDir = 'adama/build/distributions' as File
}

task timestamped_dist(type: Zip) {
     def zippedDir = "${project.name}-${timestamp}"
     destinationDir = new java.io.File("adama/build/timestamped_distributions")
     version = "${timestamp}"
     into(zippedDir) {
       into('lib') {
        from 'adama/build/lib'
       }
       into('bin') {
           from 'adama/bin'
           fileMode = 0755
       }
       into('licenses') {
           from 'adama/licenses'
       }
     }
 }
 
  task latest_dist(type: Zip, dependsOn: timestamped_dist) {
     def zippedDir = "${project.name}-${timestamp}"
     destinationDir = new java.io.File("adama/build/timestamped_distributions")
     version = "LATEST"
     into(zippedDir) {
       into('lib') {
        from 'adama/build/lib'
       }
       into('bin') {
           from 'adama/bin'
           fileMode = 0755
       }
       into('licenses') {
           from 'adama/licenses'
       }
     }
  }

clean << {
    ant {
       delete(dir: "adama/build")
    }
}

