package au.edu.qimr.tiledaligner.util;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;

import org.apache.commons.lang3.Range;
import org.junit.BeforeClass;
import org.junit.Test;
import org.qcmg.common.model.ChrPosition;
import org.qcmg.common.model.ChrPositionName;
import org.qcmg.common.string.StringUtils;
import org.qcmg.common.util.ListUtils;
import org.qcmg.common.util.NumberUtils;

import au.edu.qimr.tiledaligner.PositionChrPositionMap;
import au.edu.qimr.tiledaligner.PositionChrPositionMap.LongRange;
import au.edu.qimr.tiledaligner.model.TARecord;
import gnu.trove.list.TLongList;
import gnu.trove.list.array.TLongArrayList;
import gnu.trove.map.TLongIntMap;
import htsjdk.samtools.util.SequenceUtil;

public class TiledAlignerUtilTest {
	
	public static Map<ChrPosition, LongRange> pcpm;
	
	@BeforeClass
	public static void setup() {
		/*
		 * setup cache
		 */
		pcpm = PositionChrPositionMap.loadGRCh37Map();
	}
	
	
	@Test
	public void getAlternatives() {
		String s = "AAAANCCCC";
		List<String> alternativeSequences = TiledAlignerUtil.getAlternativeSequences(s);
		assertEquals(4, alternativeSequences.size());
		assertEquals(true, alternativeSequences.contains("AAAAACCCC"));
		assertEquals(true, alternativeSequences.contains("AAAACCCCC"));
		assertEquals(true, alternativeSequences.contains("AAAAGCCCC"));
		assertEquals(true, alternativeSequences.contains("AAAATCCCC"));
		
		/*
		 * start of seq
		 */
		s = "NAAAACCCC";
		alternativeSequences = TiledAlignerUtil.getAlternativeSequences(s);
		assertEquals(4, alternativeSequences.size());
		assertEquals(true, alternativeSequences.contains("AAAAACCCC"));
		assertEquals(true, alternativeSequences.contains("CAAAACCCC"));
		assertEquals(true, alternativeSequences.contains("GAAAACCCC"));
		assertEquals(true, alternativeSequences.contains("TAAAACCCC"));
		
		/*
		 * end of seq
		 */
		s = "AAAACCCCN";
		alternativeSequences = TiledAlignerUtil.getAlternativeSequences(s);
		assertEquals(4, alternativeSequences.size());
		assertEquals(true, alternativeSequences.contains("AAAACCCCA"));
		assertEquals(true, alternativeSequences.contains("AAAACCCCC"));
		assertEquals(true, alternativeSequences.contains("AAAACCCCG"));
		assertEquals(true, alternativeSequences.contains("AAAACCCCT"));
	}
	
	@Test
	public void getBlocks() {
		String [] swDiffs = new String[] {"","||||||||||",""};
		List<Range<Integer>> ranges = TiledAlignerUtil.getBlockStartPositions(swDiffs);
		assertEquals(1, ranges.size());
		assertEquals(0, ranges.get(0).getMinimum().intValue());
		assertEquals(9, ranges.get(0).getMaximum().intValue());
	}
	
	@Test
	public void binarySearch() {
		long [] array = new long[] {25517072l, 67321052l, 75742258l, 81710821l, 96407916l, 99585905l, 104099171l, 110675025l, 161045997l, 197264177l, 203573790l, 206602316l, 215747464l, 225779709l, 283752392l, 296402237l, 300944545l, 320571603l, 334049968l, 392648939l, 399391802l, 406170692l, 408413952l, 410879729l, 415454714l, 441495178l, 442280221l, 443418870l, 456436703l, 480836415l, 484289883l, 489506404l, 490191380l, 507341039l, 511783582l, 517243575l, 548371216l, 557465340l, 559611567l, 569303840l, 576938379l, 594241670l, 602122487l, 610466931l, 625783806l, 628337581l, 646108376l, 650108447l, 683867059l, 705334166l, 714094830l, 722926115l, 735699982l, 769311324l, 798347594l, 800834172l, 803997882l, 833532105l, 842298066l, 855524135l, 855904340l, 871439382l, 877476180l, 893807139l, 923226795l, 931146805l, 931208768l, 936740865l, 953656258l, 985537401l, 987360609l, 992957601l, 1000346542l, 1001717577l, 1003493451l, 1064326337l, 1070889959l, 1100702783l, 1113074245l, 1119094242l, 1144573280l, 1161513148l, 1167370572l, 1191867500l, 1195946702l, 1204901356l, 1206007529l, 1218903238l, 1242723572l, 1245483401l, 1255035830l, 1265940390l, 1275222702l, 1302787761l, 1314806097l, 1369248937l, 1409342492l, 1429428778l, 1450965035l, 1465608437l, 1502454298l, 1505495618l, 1506728304l, 1515565140l, 1561103325l, 1564267876l, 1568469234l, 1576700774l, 1619598046l, 1643753871l, 1646537651l, 1648753666l, 1653266237l, 1657692897l, 1741570573l, 1758950453l, 1759460831l, 1778901541l, 1791131887l, 1861753837l, 1865634082l, 1896858276l, 1917579089l, 1929304177l, 1929304215l, 1929304252l, 1945355640l, 1968682676l, 1969643859l, 1970834124l, 1972908636l, 1995852892l, 2021906721l, 2024453931l, 2025281126l, 2037329914l, 2037782695l, 2041856421l, 2057603016l, 2068607305l, 2133320063l, 2138907227l, 2144832107l, 2146806472l, 2156951050l, 2160101247l, 2227863991l, 2229657520l, 2247942829l, 2260684751l, 2270733126l, 2286127914l, 2291661818l, 2363083825l, 2377621064l, 2401329400l, 2401330643l, 2417096045l, 2420045586l, 2466524417l, 2469680241l, 2477168677l, 2551701535l, 2556193833l, 2557318565l, 2561132082l, 2567916187l, 2645544844l, 2646859934l, 2647798153l, 2655722969l, 2726087574l, 2727430177l, 2728081266l, 2731580592l, 2738604838l, 2757797090l, 2758934046l, 2774027846l, 2804065615l, 2807605723l, 2822692027l, 2856895106l, 2877627542l, 2914356962l, 2928036608l, 2947561445l, 2952089221l, 2968794681l, 2970748296l, 2981649716l, 2997272048l, 3006982822l, 3009742985l, 3013774084l, 3019492535l, 3030490435l, 3040209631l, 3059293169l, 3063963095l};
		Arrays.sort(array);
		int position = Arrays.binarySearch(array, 2774027845l);
		assertEquals(true, position < 0);
		assertEquals(2774027846l, array[Math.abs(position) - 1]);
		
		array = new long[] {119, 67321052l, 75742258l, 81710821l, 96407916l, 99585905l, 104099171l, 110675025l, 161045997l, 197264177l, 2774027846l};
		Arrays.sort(array);
		position = Arrays.binarySearch(array, 2774027845l);
		assertEquals(true, position < 0);
		assertEquals(2774027846l, array[Math.abs(position) - 1]);
	}
	
	@Test
	public void getBestStartPositionInsertion() {
		/*
		 * CATGTATCCAAGAACTTAAGAGTATAATAATAATAATA
		 *                   |
		 *               insertion 
		 */
		Map<String, TLongList> map = new HashMap<>();
		map.put("CATGTATCCAAGA", new TLongArrayList(new long[] {100, 114656855l, 181950606l, 196080513l, 2774027828l}));
		map.put("ATGTATCCAAGAA" , new TLongArrayList(new long[] {101, 80247690l, 181950607l, 185553130l, 2774027829l}));
		map.put("TGTATCCAAGAAC" , new TLongArrayList(new long[] {102, 238834251l, 279169995l, 282711716l, 2774027830l}));
		map.put("GTATCCAAGAACT", new TLongArrayList(new long[] {103, 238834252l, 279169996l, 282711717l, 299667250l, 2774027831l}));
		map.put("TATCCAAGAACTT", new TLongArrayList(new long[] {104, 181950610l, 204821238l, 222907003l, 238834253l, 246623495l, 2774027832l}));
		map.put("ATCCAAGAACTTA", new TLongArrayList(new long[] {105, 164272699l, 181950611l, 203930611l, 222907004l, 237552832l, 2774027833l}));
		map.put("TCCAAGAACTTAA", new TLongArrayList(new long[] {1000, 88407160l, 99460658l, 158795514l, 170756687l, 181950612l, 279169999l}));
		map.put("CCAAGAACTTAAG", new TLongArrayList(new long[] {1001, 61608511l, 71349155l, 231400300l, 280669706l, 398256597l, 421249998l}));
		map.put("CAAGAACTTAAGA", new TLongArrayList(new long[] {1002, 61608512l, 280669707l, 348473245l, 355394324l, 441803741l, 449436395l}));
		map.put("AAGAACTTAAGAG", new TLongArrayList(new long[] {1003, 19081828l, 39044042l, 61608513l, 79036778l, 90584581l, 167079856l, 176026406l}));
		map.put("AGAACTTAAGAGT", new TLongArrayList(new long[] {1004, 18246342l, 23314256l, 32545968l, 69919991l, 79036779l, 103325700l, 176026407l,}));
		map.put("GAACTTAAGAGTA", new TLongArrayList(new long[] {1005, 4424875l, 69919992l, 88876767l, 103325701l, 118373358l, 169517582l, 254945076l, 323106078l}));
		map.put("AACTTAAGAGTAT", new TLongArrayList(new long[] {1006, 4424876l, 68273695l, 77064653l, 97968633l, 103325702l, 114330607l, 142664087l, 142886981l}));
		map.put("ACTTAAGAGTATA", new TLongArrayList(new long[] {1007, 54281547l, 66100746l, 73307108l, 97968634l, 103325703l, 114330608l, 170070537l, 193470526l}));
		map.put("CTTAAGAGTATAA", new TLongArrayList(new long[] {1008, 29509758l, 66100747l, 78637871l, 103325704l, 114330609l, 170070538l, 220174021l, 262032278l}));
		map.put("TTAAGAGTATAAT", new TLongArrayList(new long[] {1009, 31751995l, 57409485l, 74230190l, 78637872l, 92657418l, 93524067l, 99386567l, 109184501l, 159364553l}));
		map.put("TAAGAGTATAATA", new TLongArrayList(new long[] {1010, 14330001l, 87721104l, 92657419l, 112260154l, 119980130l, 159364554l, 178226658l, 187884060l, 195686065l}));
		map.put("AAGAGTATAATAA", new TLongArrayList(new long[] {1011, 25517070l, 92657420l, 119980131l, 121271910l, 158198921l, 159364555l, 178226659l, 187884061l, 197251084l}));
		map.put("AGAGTATAATAAT", new TLongArrayList(new long[] {1012, 25517071l, 81710820l, 96407915l, 96530666l, 104099170l, 110675024l, 116533032l, 159364556l, 195615394l}));
		map.put("GAGTATAATAATA", new TLongArrayList(new long[] {119, 67321052l, 75742258l, 81710821l, 96407916l, 99585905l, 104099171l, 110675025l, 161045997l, 197264177l, 2774027846l}));
		map.put("AGTATAATAATAA", new TLongArrayList(new long[] {-9223372036854767985l}));
		map.put("GTATAATAATAAT", new TLongArrayList(new long[] {-9223372036854770339l}));
		map.put("TATAATAATAATA", new TLongArrayList(new long[] {-9223372036854769130l}));
		map.put("ATAATAATAATAA", new TLongArrayList(new long[] {-9223372036854725005l}));
		map.put("TAATAATAATAAT", new TLongArrayList(new long[] {-9223372036854735632l}));
		map.put("AATAATAATAATA", new TLongArrayList(new long[] {-9223372036854727213l}));
		
		Map<Integer, TLongList> map2 = TiledAlignerUtil.getTiles(map, "CATGTATCCAAGAACTTAAGAGTATAATAATAATAATA", 13, false);
		assertEquals(false, map2.isEmpty());
		
		for (Entry<Integer, TLongList> entry : map2.entrySet()) {
			System.out.println("key: " + Arrays.toString(NumberUtils.splitIntInto2(entry.getKey())) + ", values : " + entry.getValue().get(0));
		}
		
		/*
		 * need 1000 plus 6 << 40
		 */
		assertArrayEquals(new long[] {NumberUtils.addShortToLong(1000l, (short)6, 40)}, map2.get(NumberUtils.getTileCount(13, 0)).toArray());
		assertArrayEquals(new long[] {2774027828l}, map2.get(NumberUtils.getTileCount(6, 0)).toArray());
		assertArrayEquals(new long[] {100}, map2.get(NumberUtils.getTileCount(26, 1)).toArray());	//hmmm
	}
	
	@Test
	public void getBEstStartPosition4() {
		
		Map<String, TLongList> map = new HashMap<>();
		map.put("CTCCCTCCCCCTT", new TLongArrayList(new long[] {28243215l, 29254156l, 30162757l, 38596251l, 41564418l, 44911182l, 55301918l, 76500408l, 85049615l, 151674811l, 157106709l, 158684652l, 165408586l, 168230579l, 187601278l, 198416753l, 206861903l, 207269239l, 230461527l, 233152101l, 245505214l, 255000936l, 259756366l, 265331196l, 267518578l, 272783448l, 275351641l, 281313215l, 282391773l, 282391840l, 288412213l, 288412278l, 288412297l, 288965701l, 304422980l, 304423010l, 309750206l, 315848255l, 323737499l, 346603482l, 374917904l, 383596499l, 395677111l, 408868975l, 410697724l, 411460690l, 422901143l, 425524617l, 436986460l, 447720516l, 455934648l, 469721791l, 470562099l, 483949620l, 483949805l, 486687273l, 487315425l, 487898614l, 497345587l, 498459249l, 525468144l, 538378347l, 542278373l, 547741946l, 550845781l, 553100158l, 554856892l, 556331859l, 563563336l, 566124456l, 574364216l, 580980086l, 608956093l, 612994856l, 618428951l, 636044587l, 638732655l, 647876723l, 651940301l, 661032091l, 670459526l, 679329464l, 691959820l, 697586849l, 744382935l, 745789080l, 747187814l, 766282058l, 768445695l, 777703691l, 780408910l, 817310066l, 821770918l, 825106104l, 831529482l, 844822946l, 845016820l, 849399747l, 859933540l, 862659755l, 862930394l, 878120288l, 913344347l, 919215319l, 939666078l, 957288819l, 963862413l, 976297620l, 976871201l, 1006192911l, 1021612362l, 1031936399l, 1039363787l, 1055374404l, 1055374534l, 1059461021l, 1060949644l, 1067773100l, 1072347420l, 1083823931l, 1094732693l, 1095525534l, 1095936332l, 1105816084l, 1107233157l, 1108434072l, 1109641446l, 1115606787l, 1119512351l, 1126920198l, 1153827012l, 1156194285l, 1162861632l, 1164926389l, 1171547958l, 1187340806l, 1199953393l, 1208210460l, 1209910785l, 1230031630l, 1232233006l, 1233734109l, 1244801407l, 1252844355l, 1259898382l, 1289783633l, 1290238625l, 1296665020l, 1300758829l, 1306945472l, 1311054135l, 1326302382l, 1334541861l, 1350231883l, 1350383119l, 1376842253l, 1388028925l, 1388028955l, 1401690151l, 1406908297l, 1408527065l, 1410004200l, 1412924916l, 1414442092l, 1425582639l, 1491802785l, 1510380237l, 1516786112l, 1524662833l, 1546363294l, 1548300922l, 1560252446l, 1562539236l, 1563768664l, 1566910342l, 1568116290l, 1568116334l, 1571622001l, 1574557039l, 1576446551l, 1578369359l, 1579712719l, 1619494168l, 1621062733l, 1634423851l, 1636425681l, 1669120266l, 1669642860l, 1671324732l, 1679844684l, 1680990572l, 1683812541l, 1700363847l, 1704420730l, 1714271783l, 1749065008l, 1755789055l, 1761261042l, 1769099968l, 1777210700l, 1781509889l, 1782786899l, 1784776746l, 1811305642l, 1817616141l, 1821236766l, 1823350719l, 1830655015l, 1831872541l, 1859510239l, 1874061289l, 1874848340l, 1876600550l, 1876744364l, 1881707111l, 1885876621l, 1902108742l, 1916937984l, 1920168407l, 1927272494l, 1934895471l, 1938339462l, 1953011451l, 1961214724l, 1963212868l, 1972929720l, 1978529661l, 1984331808l, 1996968883l, 2034617197l, 2064719014l, 2064829119l, 2073371922l, 2077380727l, 2103923284l, 2134283185l, 2168720992l, 2168721046l, 2180569043l, 2196939945l, 2221434853l, 2248069804l, 2254892369l, 2276429835l, 2276501229l, 2276941619l, 2277325304l, 2280142670l, 2286867300l, 2292959541l, 2296330251l, 2297556836l, 2300689917l, 2335409865l, 2345829897l, 2351774703l, 2353929972l, 2359389310l, 2381746430l, 2388115088l, 2391472372l, 2396056704l, 2419855386l, 2420429938l, 2426982874l, 2441141802l, 2456470368l, 2458553723l, 2458564994l, 2460070694l, 2469291801l, 2479675536l, 2481024676l, 2484584445l, 2484850581l, 2487295251l, 2489155268l, 2496722564l, 2502780789l, 2507962582l, 2513718358l, 2531197182l, 2531734125l, 2537954810l, 2546874483l, 2558865042l, 2570878974l, 2576535269l, 2577032313l, 2577938891l, 2578210871l, 2581269227l, 2590471778l, 2590473257l, 2616525460l, 2619018161l, 2628063616l, 2629402468l, 2634419328l, 2637901613l, 2643061598l, 2646372396l, 2660655815l, 2660934400l, 2661114332l, 2674035947l, 2675350342l, 2690350477l, 2690744812l, 2701362550l, 2710910718l, 2712904334l, 2728068679l, 2729012463l, 2734044145l, 2748676824l, 2750027861l, 2750829863l, 2757768765l, 2767227572l, 2770933976l, 2776564595l, 2780416687l, 2780871193l, 2796182266l, 2819037442l, 2847343287l, 2858936959l, 2864822622l, 2871995787l, 2873219285l, 2874961439l}));
		map.put("TCCCTCCCCCTTC", new TLongArrayList(new long[] {-9223372036854775130l}));
		map.put("CCCTCCCCCTTCT", new TLongArrayList(new long[] {2956006l, 10962749l, 17785216l, 19680922l, 19998768l, 23051516l, 25955240l, 29254158l, 44371063l, 44911184l, 88115284l, 108593696l, 112604919l, 117739934l, 151806922l, 152541097l, 155857748l, 156041861l, 156400746l, 171454803l, 174529856l, 218496945l, 219300424l, 222077231l, 230461529l, 233152103l, 253589800l, 280660789l, 280992652l, 288412196l, 288412261l, 288412280l, 296453417l, 304422952l, 304422982l, 304423012l, 327116087l, 352655819l, 363699691l, 373149232l, 376860645l, 386827627l, 410697648l, 417911599l, 420461746l, 429527675l, 458478510l, 466759352l, 466996163l, 469116048l, 489119077l, 490826834l, 515695156l, 521333180l, 550553006l, 553100160l, 595168835l, 608956095l, 612808046l, 622805885l, 637025462l, 670459528l, 677321481l, 689546743l, 691579421l, 692231933l, 697217666l, 701642360l, 706931781l, 717525020l, 765192106l, 766282060l, 768445697l, 819181994l, 829684768l, 829853586l, 829872609l, 831529484l, 835245642l, 848392771l, 859933542l, 864916402l, 889559932l, 937366899l, 954096987l, 959074544l, 963862415l, 970551394l, 974309252l, 976694549l, 1003887658l, 1006192913l, 1012993978l, 1018407550l, 1023270347l, 1036292428l, 1050900559l, 1054824883l, 1072347422l, 1074080912l, 1083602108l, 1101013045l, 1124871127l, 1131713543l, 1135121145l, 1162808352l, 1168577833l, 1171423952l, 1180284537l, 1186850885l, 1199953395l, 1219319418l, 1221926421l, 1225563744l, 1232088837l, 1238271113l, 1255100340l, 1279046539l, 1311054124l, 1331567289l, 1376514474l, 1400182448l, 1404158766l, 1414442094l, 1414728511l, 1415653529l, 1419192199l, 1421543704l, 1441033254l, 1444014301l, 1454354827l, 1461288109l, 1473218086l, 1510380239l, 1517992721l, 1523288196l, 1530839592l, 1548300924l, 1558398188l, 1563768666l, 1566910344l, 1571883583l, 1574091328l, 1606829239l, 1617062124l, 1637192951l, 1639906786l, 1647139070l, 1662562850l, 1664284811l, 1679844686l, 1681980733l, 1691782301l, 1709824133l, 1716364296l, 1718391372l, 1725754993l, 1745248876l, 1755789057l, 1765824756l, 1773461201l, 1775477305l, 1781509891l, 1783264288l, 1785804471l, 1795329159l, 1811305644l, 1818349239l, 1834722438l, 1853390677l, 1859510241l, 1881076999l, 1882279640l, 1885876623l, 1895957305l, 1910411654l, 1927076145l, 1961214726l, 1961282598l, 1963212870l, 2003637612l, 2007239206l, 2016657235l, 2040688597l, 2044265977l, 2046052977l, 2055315478l, 2064422763l, 2065758395l, 2113478933l, 2119753736l, 2152564797l, 2194176269l, 2221434855l, 2233605091l, 2248069806l, 2254676784l, 2256924274l, 2281750254l, 2292959543l, 2302184628l, 2303273751l, 2304766883l, 2304987581l, 2305610698l, 2336344663l, 2350012451l, 2353929974l, 2377677629l, 2381297454l, 2391472374l, 2396778572l, 2402534574l, 2411783441l, 2415851309l, 2424838796l, 2424838826l, 2428283481l, 2430993989l, 2431346940l, 2434230422l, 2439440210l, 2441500508l, 2458553725l, 2458564996l, 2472640954l, 2480325521l, 2481024678l, 2498877312l, 2499715310l, 2502853048l, 2503648437l, 2507962584l, 2531814860l, 2545528535l, 2558277708l, 2558849520l, 2560963967l, 2566721250l, 2567933404l, 2575970666l, 2577848813l, 2579180609l, 2579453226l, 2608651381l, 2616515948l, 2619061261l, 2621153400l, 2622862318l, 2632125629l, 2636113035l, 2654236930l, 2656191589l, 2658943472l, 2661114334l, 2661781418l, 2690350479l, 2690622202l, 2707728021l, 2710117064l, 2710279063l, 2710936836l, 2714874298l, 2728068681l, 2730340765l, 2750027863l, 2755235509l, 2757335808l, 2773923473l, 2805865887l, 2847343289l, 2885103648l, 2903045338l, 2908838279l, 2916984602l, 2921763523l, 2958819231l, 2959053267l, 2962072583l, 2962191356l, 2969861216l, 2985036408l, 2997603354l, 2998586425l, 3004166571l, 3010177975l, 3019778233l, 3023695460l, 3030689679l, 3039400872l, 3039576217l, 3050817534l, 3050914471l}));
		map.put("CCTCCCCCTTCTT", new TLongArrayList(new long[] {2956007l, 3708009l, 7112016l, 19122619l, 22432923l, 29254159l, 32950336l, 44877616l, 44911185l, 73856438l, 82385081l, 100992735l, 108593697l, 112604920l, 151806923l, 156041862l, 171454804l, 219300425l, 225623425l, 230262984l, 234017409l, 234946942l, 275654472l, 280660790l, 310660245l, 317285621l, 325829068l, 367141071l, 381553636l, 383603558l, 386827628l, 420461747l, 428279277l, 446135295l, 474814672l, 515695157l, 550553007l, 553100161l, 580749286l, 587340264l, 590079604l, 608956096l, 609584445l, 621362214l, 645961520l, 682247506l, 682490661l, 693833479l, 697217667l, 703680468l, 705333202l, 706858781l, 706931782l, 717156846l, 718888555l, 722849311l, 735633377l, 812768956l, 823941065l, 864916403l, 883945918l, 889559933l, 891978129l, 913285342l, 917507145l, 937366900l, 948132488l, 996365399l, 1006192914l, 1012993979l, 1036292429l, 1046074478l, 1064365830l, 1081861493l, 1113332203l, 1135121146l, 1148725174l, 1162808353l, 1186850886l, 1221926422l, 1232088838l, 1238901448l, 1262790113l, 1265369600l, 1279046540l, 1306594069l, 1307378410l, 1392167283l, 1414728512l, 1430012778l, 1441033255l, 1453885932l, 1510380240l, 1511577583l, 1517992722l, 1528522567l, 1537219727l, 1574091329l, 1606829240l, 1637192952l, 1639906787l, 1647139071l, 1648051966l, 1648095300l, 1651089303l, 1652731647l, 1658360398l, 1679844687l, 1727501971l, 1764394863l, 1781509892l, 1795329160l, 1813657561l, 1852071519l, 1874266384l, 1874293682l, 1882279641l, 1895957306l, 1910411655l, 1959681570l, 1967970368l, 1994496313l, 2003637613l, 2007239207l, 2036627598l, 2050658348l, 2070584248l, 2074333914l, 2080422302l, 2127550150l, 2138306146l, 2233605092l, 2296460899l, 2302184629l, 2349687840l, 2350012452l, 2370384224l, 2380959482l, 2381782118l, 2385779698l, 2386016342l, 2401820609l, 2414503350l, 2415851310l, 2426692465l, 2436223357l, 2440314375l, 2458553726l, 2458564997l, 2487085817l, 2498877313l, 2500620318l, 2502853049l, 2503648438l, 2533872701l, 2546763185l, 2554143135l, 2567933405l, 2642758437l, 2703717395l, 2706555756l, 2710279064l, 2722789396l, 2735880957l, 2750027864l, 2757335809l, 2815781267l, 2820846524l, 2863346621l, 2870452282l, 2881445647l, 2898734062l, 2908838280l, 2916984603l, 2918805599l, 2921877268l, 2955101075l, 2957339912l, 2959053268l, 3010177976l, 3012812378l, 3020963013l, 3036666207l}));
		map.put("CTCCCCCTTCTTT", new TLongArrayList(new long[] {3708010l, 29254160l, 32950337l, 40107358l, 44877617l, 44911186l, 44973554l, 86627755l, 88061418l, 108593698l, 114784490l, 150605718l, 153703261l, 155599469l, 156738306l, 156816159l, 159774107l, 164662765l, 171454805l, 182158710l, 207811456l, 219300426l, 225623426l, 267864202l, 293274747l, 293592155l, 304761288l, 379973164l, 380713853l, 381553637l, 382679755l, 386827629l, 415294110l, 420461748l, 470240050l, 481242408l, 482501422l, 495539712l, 498603214l, 502342366l, 519919429l, 538791056l, 590079605l, 605196123l, 614853471l, 621362215l, 645961521l, 674711752l, 677733342l, 680847914l, 681982862l, 682490662l, 693833480l, 706858782l, 718888556l, 728169991l, 747174016l, 812637823l, 823941066l, 839336205l, 842581562l, 843667645l, 864916404l, 869341488l, 869534631l, 892530898l, 912116756l, 913285343l, 923138078l, 927629852l, 937366901l, 948263266l, 994050633l, 996365400l, 1017376709l, 1037714429l, 1046074479l, 1055216410l, 1061449232l, 1064365831l, 1101027401l, 1104816003l, 1140971915l, 1142143529l, 1171423583l, 1185393128l, 1196259109l, 1238282388l, 1238290892l, 1282039120l, 1306642629l, 1338002984l, 1390923305l, 1399399152l, 1400154391l, 1412619219l, 1420085446l, 1425898381l, 1450747292l, 1494899884l, 1511577584l, 1516712309l, 1517992723l, 1574091330l, 1641815329l, 1674009987l, 1679844688l, 1687242586l, 1690213614l, 1714470063l, 1740686627l, 1764394864l, 1795329161l, 1817926668l, 1818028443l, 1847607451l, 1874266385l, 1874293683l, 1895957307l, 1908935191l, 1910411656l, 1934502620l, 1934675781l, 1940478700l, 1967970369l, 1982326913l, 2009638949l, 2022084982l, 2050658349l, 2080422303l, 2107107666l, 2138306147l, 2159870748l, 2219330463l, 2296460900l, 2302614507l, 2350012453l, 2367748930l, 2370384225l, 2381843055l, 2390628772l, 2458553727l, 2458564998l, 2477730405l, 2527497397l, 2550645988l, 2554143136l, 2564436853l, 2582004519l, 2601032332l, 2608852833l, 2616052019l, 2680713921l, 2687576151l, 2690366284l, 2695510006l, 2697045156l, 2701353838l, 2722789397l, 2750217238l, 2757335810l, 2801534781l, 2815781268l, 2870452283l, 2881445648l, 2921759074l, 2921877269l, 2971856901l, 2994345715l, 3020963014l, 3036666208l, 3040981750l}));
		map.put("TCCCCCTTCTTTC", new TLongArrayList(new long[] {3708011l, 9007316l, 15607756l, 17541863l, 20287502l, 29254161l, 32950338l, 48022181l, 52047113l, 88061419l, 94982589l, 102436064l, 114784491l, 156739710l, 156816160l, 164662766l, 167965427l, 171454806l, 182158711l, 200112562l, 235693466l, 263203716l, 268807892l, 305656168l, 315208483l, 339176069l, 348493054l, 359769826l, 366007383l, 382679756l, 420461749l, 428333965l, 446907434l, 468118978l, 486461282l, 498603215l, 511336918l, 516839879l, 519919430l, 521740779l, 573600414l, 620568912l, 646230702l, 678700268l, 681982863l, 682490663l, 693833481l, 706425030l, 706858783l, 715889493l, 718888557l, 728169992l, 760219824l, 760332861l, 765095406l, 771032561l, 776713168l, 802012943l, 839336206l, 842581563l, 845307317l, 864916405l, 892530899l, 936136724l, 984678888l, 1022714637l, 1026457879l, 1046074480l, 1059990166l, 1067008980l, 1088693569l, 1101027402l, 1133032170l, 1142143530l, 1154879094l, 1160352283l, 1165025921l, 1171423584l, 1182756801l, 1185393129l, 1271305376l, 1276221263l, 1278539366l, 1305865367l, 1306642630l, 1320978071l, 1372489594l, 1399399153l, 1413948811l, 1425898382l, 1450747293l, 1470055485l, 1472834528l, 1483085628l, 1501920981l, 1509777114l, 1511577585l, 1517992724l, 1522608701l, 1533881459l, 1543238417l, 1549016479l, 1555768104l, 1560133801l, 1560133993l, 1560134185l, 1560134377l, 1574091331l, 1621376305l, 1625240085l, 1633371467l, 1662503976l, 1663249524l, 1669059665l, 1670254424l, 1674009988l, 1685178369l, 1692777154l, 1714470064l, 1753926606l, 1764394865l, 1778593512l, 1784328774l, 1817926669l, 1818028444l, 1820014240l, 1847607452l, 1860841400l, 1863856060l, 1880902940l, 1895957308l, 1924612426l, 1940478701l, 1954911693l, 1963986228l, 1978130730l, 1994107670l, 1995007366l, 1995013975l, 2003385609l, 2041218536l, 2050658350l, 2082065104l, 2107107667l, 2138306148l, 2146756583l, 2225579942l, 2250091428l, 2264360714l, 2298318327l, 2341209842l, 2344593924l, 2370384226l, 2381843056l, 2400354824l, 2415285778l, 2420406506l, 2458553728l, 2458564999l, 2461936002l, 2469819604l, 2479775654l, 2491325044l, 2527497398l, 2534165404l, 2545221535l, 2554143137l, 2567933567l, 2582416100l, 2616052020l, 2621083514l, 2624843546l, 2641881520l, 2650038607l, 2650286892l, 2656635481l, 2690366285l, 2702741460l, 2722789398l, 2730117406l, 2748637501l, 2752524084l, 2754367483l, 2763876240l, 2820272292l, 2876204307l, 2884379000l, 2962373796l, 2962717625l, 2966531132l, 2968085740l, 2988464494l, 2998434273l, 3002461167l, 3021636519l, 3032311803l, 3059119149l}));
		map.put("CCCCCTTCTTTCT", new TLongArrayList(new long[] {3708012l, 10952796l, 15607757l, 16436389l, 20287503l, 32950339l, 36172258l, 38982091l, 48022182l, 59689197l, 92627547l, 114784492l, 154862088l, 156816161l, 167965428l, 172056453l, 212355275l, 235693467l, 245344504l, 263203717l, 267010981l, 268807893l, 277894450l, 305656169l, 306789735l, 312012406l, 315208484l, 339176070l, 348493055l, 359769827l, 362059153l, 366007384l, 396704303l, 428333966l, 442608092l, 468118979l, 508858118l, 520641201l, 521740780l, 538582522l, 548406555l, 563524016l, 573600415l, 599667807l, 620568913l, 646230703l, 676040592l, 681982864l, 699024748l, 706858784l, 715889494l, 718888558l, 728169993l, 738643597l, 745883229l, 760219825l, 760332862l, 776713169l, 791229910l, 814733142l, 842581564l, 864916406l, 914154496l, 936136725l, 943982938l, 945981058l, 1026006323l, 1026457880l, 1049824122l, 1059990167l, 1067008981l, 1071119266l, 1101027403l, 1104617462l, 1113075145l, 1133032171l, 1154879095l, 1162334258l, 1171423585l, 1182756802l, 1185393130l, 1256262433l, 1271426787l, 1276221264l, 1320978072l, 1323949504l, 1364607154l, 1365997200l, 1374782496l, 1389374312l, 1399399154l, 1413948812l, 1467897133l, 1480838879l, 1483085629l, 1489223951l, 1489981993l, 1501919929l, 1507366940l, 1511577586l, 1520955176l, 1549016480l, 1555768105l, 1563643544l, 1611758732l, 1629473871l, 1633371468l, 1659374130l, 1662503977l, 1663664931l, 1668019300l, 1668708186l, 1670254425l, 1692777155l, 1705558023l, 1707614020l, 1714470065l, 1753926607l, 1764394866l, 1820014241l, 1849975823l, 1850595927l, 1860841401l, 1924612427l, 1932283463l, 1950174831l, 1954911694l, 1955050643l, 1959607321l, 1960854085l, 1963986229l, 1978130731l, 1994107671l, 1995007367l, 1995013976l, 2003385610l, 2017385996l, 2045459448l, 2050658351l, 2064147694l, 2082065105l, 2138306149l, 2138980234l, 2160920022l, 2181968846l, 2227166354l, 2252243702l, 2276452218l, 2370384227l, 2375593061l, 2382794240l, 2396562794l, 2418773884l, 2439942378l, 2458553729l, 2458565000l, 2469819605l, 2491325045l, 2514722808l, 2532208838l, 2534165405l, 2545221536l, 2554143138l, 2582416101l, 2616052021l, 2616397466l, 2624843547l, 2641881521l, 2642071849l, 2650038608l, 2650286893l, 2656635482l, 2661165261l, 2673037965l, 2698982384l, 2711801349l, 2714347694l, 2722789399l, 2752524085l, 2779052787l, 2821815597l, 2862905706l, 2870680160l, 2876204308l, 2882912353l, 2884379001l, 2904242778l, 2962717626l, 2966531133l, 2998434274l, 3002461168l, 3010602165l, 3021636520l, 3038132913l, 3059119150l}));
		map.put("CCCCTTCTTTCTT", new TLongArrayList(new long[] {3059988l, 10952797l, 15607758l, 20287504l, 36172259l, 38701411l, 49099510l, 59689198l, 59918423l, 60930288l, 63533303l, 68722643l, 92627548l, 114784493l, 114791663l, 116660483l, 119822714l, 154862089l, 156149872l, 167965429l, 170506198l, 197780276l, 200422203l, 204255975l, 212355276l, 218727551l, 238728032l, 245344505l, 253253295l, 263160814l, 267010982l, 269571806l, 270389279l, 277086637l, 287392283l, 291109409l, 303921671l, 305643639l, 305656170l, 322884244l, 339176071l, 362059154l, 365680815l, 367856790l, 377595746l, 378691402l, 387364497l, 389675386l, 390554454l, 396704304l, 399867957l, 412535479l, 422418560l, 428333967l, 429077934l, 433514430l, 434643569l, 435429255l, 456937955l, 458474956l, 459944061l, 464050807l, 468118980l, 477579973l, 488040394l, 503880194l, 506008694l, 506497369l, 508858119l, 513286932l, 523794918l, 530174748l, 538582523l, 548406556l, 552875581l, 561197622l, 563524017l, 574894143l, 590542956l, 594508295l, 599667808l, 613149951l, 618429743l, 635300320l, 640721668l, 646230704l, 649560656l, 651033439l, 656676266l, 658537743l, 670841664l, 681704323l, 682265339l, 683502494l, 683645289l, 698400883l, 699024749l, 700838234l, 715889495l, 718888559l, 749342474l, 779828778l, 797140529l, 829074580l, 834849584l, 839425676l, 849224797l, 851010284l, 872743429l, 885990112l, 885990160l, 890187665l, 892539132l, 902723132l, 904147782l, 908806597l, 914154497l, 936136726l, 943673180l, 945981059l, 948734341l, 959738436l, 963155182l, 990484302l, 1016023682l, 1026006324l, 1028912598l, 1035624529l, 1049121321l, 1049824123l, 1066975460l, 1071119267l, 1081108490l, 1091839054l, 1107073334l, 1109627892l, 1115319296l, 1125695726l, 1133032172l, 1145365985l, 1146562731l, 1154879096l, 1162808312l, 1165638442l, 1170187761l, 1170823586l, 1190525838l, 1192197869l, 1192957339l, 1218228516l, 1221537651l, 1240807782l, 1249990605l, 1267000169l, 1287016360l, 1306509394l, 1323949505l, 1324524261l, 1325304131l, 1325675790l, 1336450224l, 1336760857l, 1342100723l, 1346692040l, 1351626853l, 1357184879l, 1360410016l, 1364607155l, 1374782497l, 1387212251l, 1399350879l, 1399399155l, 1413948813l, 1418600897l, 1419288884l, 1421338573l, 1434968862l, 1467897134l, 1489223952l, 1489981994l, 1498359713l, 1502067180l, 1512537702l, 1518375553l, 1520955177l, 1521740594l, 1525393848l, 1531506663l, 1535512837l, 1538391226l, 1549016481l, 1552692196l, 1555768106l, 1583009094l, 1604750654l, 1614686690l, 1626504730l, 1641062946l, 1647889259l, 1659374131l, 1663664932l, 1668708187l, 1669848202l, 1672172109l, 1681225340l, 1684488832l, 1687645246l, 1691862639l, 1692777156l, 1694781323l, 1705558024l, 1707556400l, 1740462099l, 1771388965l, 1776381043l, 1785818825l, 1787412247l, 1802950737l, 1804229502l, 1809198057l, 1824925682l, 1825106223l, 1829471149l, 1829909776l, 1831662025l, 1849975824l, 1853570493l, 1861625641l, 1876691896l, 1876774146l, 1885205869l, 1885306877l, 1899291107l, 1905256383l, 1905761605l, 1919249880l, 1922169353l, 1926858470l, 1935052304l, 1944427413l, 1948472415l, 1949075809l, 1953276319l, 1959607322l, 1960854086l, 1971032284l, 1977121063l, 1978130732l, 1991822574l, 1992464167l, 1995007368l, 1995013977l, 1999411184l, 2005334103l, 2006399827l, 2019274450l, 2020242578l, 2022361928l, 2051778481l, 2061102714l, 2061923107l, 2071933241l, 2073907170l, 2076196550l, 2076276425l, 2110045414l, 2118278734l, 2154308109l, 2160920023l, 2221449057l, 2234826987l, 2239985918l, 2252027402l, 2252243703l, 2291676071l, 2296091936l, 2297457784l, 2297924997l, 2329681729l, 2333845249l, 2340861986l, 2343870069l, 2344342599l, 2374516555l, 2375593062l, 2396013586l, 2397266140l, 2415373851l, 2433069625l, 2462212080l, 2477165193l, 2483274039l, 2489833991l, 2495198700l, 2508532335l, 2514722809l, 2531508210l, 2532208839l, 2545141901l, 2546305282l, 2547349037l, 2550364427l, 2550833223l, 2579594739l, 2581111348l, 2600854462l, 2607269483l, 2610420266l, 2624843548l, 2642071850l, 2643808912l, 2650038609l, 2650334009l, 2656635483l, 2661311232l, 2669827534l, 2669827839l, 2671070586l, 2674551617l, 2676481746l, 2688217304l, 2694841601l, 2700891506l, 2700959429l, 2705190999l, 2706073993l, 2711801350l, 2712165801l, 2717018437l, 2723104231l, 2725189223l, 2727102359l, 2727855729l, 2734186874l, 2752337071l, 2752524086l, 2764604913l, 2770326744l, 2775036776l, 2779052788l}));
		map.put("CCCTTCTTTCTTC", new TLongArrayList(new long[] {3059989l, 9041382l, 24654205l, 27165843l, 35741879l, 49099511l, 49289769l, 50985448l, 59918424l, 62996092l, 78642808l, 89099199l, 91177482l, 92823773l, 114791664l, 116869111l, 152040279l, 156857051l, 157940255l, 162884843l, 164899796l, 166815201l, 180798903l, 205218873l, 208917231l, 218727552l, 221550848l, 225746211l, 232435554l, 245400448l, 255418496l, 258544968l, 262327520l, 263160815l, 269571807l, 278910714l, 290622683l, 291199811l, 319379983l, 323858694l, 325163233l, 332707537l, 367856791l, 379147105l, 385596443l, 386827958l, 388996706l, 390121703l, 392608669l, 402747909l, 411974887l, 412997051l, 429858354l, 430906052l, 436659582l, 441686711l, 450117727l, 458163547l, 458474957l, 458743707l, 462455591l, 464050808l, 467833671l, 476778692l, 486990691l, 500799761l, 506008695l, 506497370l, 508858120l, 516893971l, 530174749l, 538582524l, 545488250l, 552174209l, 558144477l, 563035151l, 599170405l, 601607904l, 606659389l, 617458904l, 618429744l, 619988379l, 628210705l, 642649163l, 642920837l, 649351602l, 656676267l, 672557848l, 676311863l, 698975859l, 705071634l, 713185851l, 718888560l, 725549769l, 747067395l, 779828779l, 797140530l, 801265129l, 829074581l, 835268802l, 835389593l, 835492861l, 846422321l, 847776949l, 848227614l, 857444853l, 864928311l, 872743430l, 879554485l, 885990113l, 898114678l, 909994802l, 913037188l, 914154498l, 923008721l, 932926441l, 936136727l, 942951668l, 948734342l, 965000293l, 975242054l, 976159549l, 979543844l, 990484303l, 996513333l, 1000533668l, 1000584699l, 1005042698l, 1024646096l, 1026006325l, 1030790388l, 1034774502l, 1049824124l, 1071146067l, 1076369427l, 1076640524l, 1081108491l, 1081773917l, 1082432968l, 1095872846l, 1099786248l, 1103512821l, 1125695727l, 1135397953l, 1137119041l, 1141080806l, 1146049414l, 1157345969l, 1165638443l, 1170187762l, 1188007248l, 1193772535l, 1201825707l, 1214682183l, 1217719233l, 1221200569l, 1221833745l, 1231217678l, 1234899923l, 1237438823l, 1237994929l, 1244729974l, 1261028271l, 1264120432l, 1264931896l, 1266802000l, 1275483191l, 1276829365l, 1279424905l, 1280151286l, 1283209901l, 1290238864l, 1290238941l, 1306509395l, 1331306126l, 1341938775l, 1342100724l, 1356267123l, 1361075095l, 1374782498l, 1387212252l, 1388723623l, 1391601400l, 1393315116l, 1396959993l, 1399399156l, 1399512643l, 1414700765l, 1419288885l, 1420057079l, 1420528349l, 1421338574l, 1430063118l, 1434968863l, 1454344087l, 1467897135l, 1468547711l, 1485651574l, 1488771468l, 1489223953l, 1489417307l, 1489981995l, 1491472642l, 1498359714l, 1502067181l, 1506744081l, 1512537703l, 1522254053l, 1522543141l, 1525393849l, 1526870120l, 1539225895l, 1543760939l, 1546822778l, 1547193829l, 1550855793l, 1557064405l, 1569197502l, 1607962213l, 1608300307l, 1613100326l, 1614686691l, 1615010946l, 1629358474l, 1641062947l, 1656860433l, 1658390529l, 1658497055l, 1659374132l, 1659534993l, 1662332993l, 1663664933l, 1669848203l, 1673031121l, 1691536564l, 1693686605l, 1695866633l, 1696177462l, 1696872226l, 1740462100l, 1753980626l, 1754732581l, 1771388966l, 1773062999l, 1776381044l, 1780030312l, 1783457653l, 1791057910l, 1804229503l, 1807616590l, 1808978446l, 1821369132l, 1821648439l, 1823549493l, 1824925683l, 1825771792l, 1843123649l, 1846638662l, 1857712826l, 1859125219l, 1861625642l, 1874809525l, 1875614524l, 1878270905l, 1882164683l, 1882591222l, 1892493754l, 1914980019l, 1918160479l, 1918865161l, 1922162547l, 1930949702l, 1941948021l, 1942253671l, 1948472416l, 1949075810l, 1960854087l, 1966067661l, 1966300430l, 1969816565l, 1977121064l, 1978130733l, 1999411185l, 2005203404l, 2005334104l, 2005976364l, 2011730432l, 2016434956l, 2019274451l, 2021597267l, 2022361929l, 2024686958l, 2032674257l, 2040065411l, 2043588585l, 2048747442l, 2050283093l, 2054281807l, 2061102715l, 2069183641l, 2071933242l, 2074770652l, 2110045415l, 2122644389l, 2132302631l, 2139401479l, 2156548454l, 2160920024l, 2221449058l, 2235087421l, 2235563558l, 2252027403l, 2272226263l, 2279729603l, 2297457785l, 2298969567l, 2299069822l, 2329227371l, 2330531114l, 2340151513l, 2344756448l, 2348656599l, 2359567448l, 2360827077l, 2377073165l, 2382938441l, 2386119587l, 2387443966l, 2410689161l, 2415877188l, 2423907446l, 2427689400l, 2443304050l, 2444269683l, 2462251107l, 2477165194l, 2490853702l, 2495198701l, 2504533604l, 2507635441l, 2512535787l, 2531508211l, 2535167646l, 2539594657l, 2542501879l, 2545009036l, 2547644710l, 2558998948l, 2559307080l, 2564770956l, 2572586453l, 2593499501l}));
		map.put("CCTTCTTTCTTCC", new TLongArrayList(new long[] {-9223372036854775129l}));
		map.put("CTTCTTTCTTCCT", new TLongArrayList(new long[] {-9223372036854774720l}));
		map.put("TTCTTTCTTCCTC", new TLongArrayList(new long[] {-9223372036854774692l}));
		map.put("TCTTTCTTCCTCC", new TLongArrayList(new long[] {-9223372036854775058l}));
		map.put("CTTTCTTCCTCCT", new TLongArrayList(new long[] {-9223372036854775030l}));
		map.put("TTTCTTCCTCCTT", new TLongArrayList(new long[] {-9223372036854774949l}));
		map.put("TTCTTCCTCCTTC", new TLongArrayList(new long[] {-9223372036854774980l}));
		map.put("TCTTCCTCCTTCC", new TLongArrayList(new long[] {-9223372036854774942l}));
		map.put("CTTCCTCCTTCCC", new TLongArrayList(new long[] {-9223372036854774685l}));
		map.put("TTCCTCCTTCCCT", new TLongArrayList(new long[] {-9223372036854774613l}));
		map.put("TCCTCCTTCCCTC", new TLongArrayList(new long[] {-9223372036854774751l}));
		map.put("CCTCCTTCCCTCC", new TLongArrayList(new long[] {-9223372036854773422l}));
		map.put("CTCCTTCCCTCCT", new TLongArrayList(new long[] {-9223372036854774540l}));
		map.put("TCCTTCCCTCCTT", new TLongArrayList(new long[] {-9223372036854773468l}));
		map.put("CCTTCCCTCCTTC", new TLongArrayList(new long[] {-9223372036854773544l}));
	
		
		Map<Integer, TLongList> map2 = TiledAlignerUtil.getTiles(map, "CTCCCTCCCCCTTCTTTCTTCCTCCTTCCCTCCTTC", 13, false);
		assertEquals(2, map2.size());
		
		/*
		 * {393216={29254156, 3299253771883}, 458752={2458553723, 2458564994}}
		 */
		assertArrayEquals(new long[] {2458553723l, 2458564994l}, map2.get(NumberUtils.getTileCount(7, 0)).toArray());
		assertArrayEquals(new long[] {29254156, 3299253771883l}, map2.get(NumberUtils.getTileCount(6, 0)).toArray());
		assertEquals(718888555, NumberUtils.getLongPositionValueFromPackedLong(3299253771883l));
		
		
		/*
		 * the best blat position is 305656162l 
		 */
		TARecord taRec = new TARecord("CTCCCTCCCCCTTCTTTCTTCCTCCTTCCCTCCTTC", map2);
		
		TLongList bestStartPositions = taRec.getStartPositions(12, true, 1000);
		TLongIntMap bestStartPositionsMap = taRec.getStartPositions();
		assertEquals(bestStartPositions.size(), bestStartPositionsMap.size());
		assertEquals(false, bestStartPositions.contains(305656168l));
		bestStartPositions = taRec.getStartPositions(2, true, 3000);
		assertEquals(4,  bestStartPositions.size());
		assertEquals(bestStartPositions.size(), bestStartPositionsMap.size());
		bestStartPositions = taRec.getStartPositions(12, true, 10);
		assertEquals(4,  bestStartPositions.size());
		assertEquals(bestStartPositions.size(), bestStartPositionsMap.size());
	}
	@Test
	public void getBestStartPosition5() {
		Map<String, TLongList> map = new HashMap<>();
		
		map.put("AAAANACAAAAAA", new TLongArrayList(new long[] {-9223372036854774361l}));
		map.put("AAANACAAAAAAT", new TLongArrayList(new long[] {-9223372036854774361l}));
		map.put("AANACAAAAAATT", new TLongArrayList(new long[] {-9223372036854775221l}));
		map.put("ANACAAAAAATTA", new TLongArrayList(new long[] {-9223372036854775270l}));
		map.put("NACAAAAAATTAG", new TLongArrayList(new long[] {-9223372036854774503l}));
		map.put("ACAAAAAATTAGC", new TLongArrayList(new long[] {-9223372036854722083l}));
		map.put("CAAAAAATTAGCC", new TLongArrayList(new long[] {-9223372036854737135l}));
		map.put("AAAAAATTAGCCA", new TLongArrayList(new long[] {-9223372036854739397l}));
		map.put("AAAAATTAGCCAG", new TLongArrayList(new long[] {-9223372036854690433l}));
		map.put("AAAATTAGCCAGG", new TLongArrayList(new long[] {-9223372036854689249l}));
		map.put("AAATTAGCCAGGA", new TLongArrayList(new long[] {-9223372036854773710l}));
		map.put("AATTAGCCAGGAG", new TLongArrayList(new long[] {-9223372036854774161l}));
		map.put("ATTAGCCAGGAGC", new TLongArrayList(new long[] {12261167l, 56422312l, 69896030l, 90894740l, 94964056l, 112750457l, 120694078l, 199868799l, 277255034l, 333603476l, 348546340l, 371562677l, 396062588l, 458476282l, 534065517l, 541864873l, 550317568l, 553070090l, 709999348l, 726987723l, 731592505l, 790246289l, 793831180l, 815228737l, 852854888l, 862548608l, 890713484l, 916083833l, 917399896l, 936110255l, 1015493129l, 1055185532l, 1086686837l, 1100191021l, 1102920530l, 1104365063l, 1119286079l, 1161238053l, 1360816871l, 1382366901l, 1382806601l, 1409321942l, 1430033300l, 1445522850l, 1524103308l, 1534767885l, 1575708326l, 1635996179l, 1673097818l, 1804478136l, 1845754356l, 1852345034l, 1878532902l, 1953542030l, 1955167786l, 1958802053l, 1978370202l, 2016275988l, 2068467250l, 2074515453l, 2113846630l, 2123465041l, 2127503091l, 2232953079l, 2340615998l, 2353088288l, 2371947129l, 2377254992l, 2414198914l, 2425218897l, 2426357490l, 2515761254l, 2534948037l, 2565474414l, 2580764078l, 2593278442l, 2692420529l, 2767915658l, 2774404310l, 2849203385l, 2898758774l, 2912110479l}));
		map.put("TTAGCCAGGAGCG", new TLongArrayList(new long[] {69896031l, 77323067l, 112750458l, 348546341l, 371562678l, 396062589l, 534065518l, 541864874l, 593823919l, 709999349l, 726987724l, 793831181l, 815228738l, 862548609l, 1086686838l, 1104365064l, 1119286080l, 1360816872l, 1409321943l, 1430033301l, 1445522851l, 1673097819l, 1804478137l, 1878532903l, 1932108076l, 1953542031l, 1958802054l, 1978370203l, 2016275989l, 2232953080l, 2411883825l, 2414198915l, 2419780119l, 2429326512l, 2507630003l, 2515761255l, 2534948038l, 2565474415l, 2580764079l, 2593278443l, 2668656422l, 2999008392l}));
		map.put("TAGCCAGGAGCGG", new TLongArrayList(new long[] {28307266l, 59171958l, 69896032l, 112750459l, 348546342l, 371562679l, 396062590l, 534065519l, 541864875l, 546334235l, 709999350l, 726987725l, 761811437l, 793831182l, 815228739l, 862548610l, 922306826l, 1014076951l, 1086686839l, 1104365065l, 1119286081l, 1194303987l, 1197286735l, 1302239440l, 1360816873l, 1409321944l, 1430033302l, 1445522852l, 1673097820l, 1690576989l, 1878532904l, 1932108077l, 1953542032l, 1958802055l, 1978370204l, 2016275990l, 2232953081l, 2265209317l, 2348604322l, 2411883826l, 2414198916l, 2419780120l, 2429326513l, 2504952100l, 2515761256l, 2553924506l, 2565474416l, 2578647878l, 2580764080l, 2593278444l, 2611246269l, 2668656423l, 2670411090l, 2780061079l, 2999008393l}));
		map.put("AGCCAGGAGCGGT", new TLongArrayList(new long[] {13371036l, 28307267l, 37512657l, 59171959l, 69896033l, 112750460l, 120283582l, 151272801l, 203880570l, 247598272l, 259518633l, 334958276l, 348546343l, 371562680l, 377790923l, 396062591l, 401216387l, 529597268l, 534065520l, 541759221l, 541864876l, 546334236l, 618069242l, 708073304l, 709999351l, 720703433l, 726987726l, 736983855l, 756803298l, 761811438l, 793831183l, 815228740l, 820129325l, 852967033l, 857748345l, 862548611l, 913150500l, 916024823l, 953229599l, 991802935l, 1014076952l, 1096482689l, 1097076222l, 1104365066l, 1119286082l, 1194303988l, 1197286736l, 1212180872l, 1239026060l, 1264271826l, 1278195768l, 1289493817l, 1325510658l, 1350226600l, 1360816874l, 1409321945l, 1425985410l, 1430033303l, 1445522853l, 1618603498l, 1618761283l, 1621959053l, 1638899582l, 1662661907l, 1673097821l, 1710789989l, 1712737272l, 1745157541l, 1753554139l, 1755646066l, 1802577318l, 1806591821l, 1815262134l, 1877039688l, 1878532905l, 1881207975l, 1932108078l, 1953542033l, 1958802056l, 1961773741l, 1978370205l, 2007940808l, 2016275991l, 2044007224l, 2070047364l, 2114932516l, 2148929577l, 2230561154l, 2232953082l, 2274464810l, 2348604323l, 2353636606l, 2362433796l, 2374610156l, 2387718722l, 2414198917l, 2419780121l, 2438258104l, 2456907237l, 2504018164l, 2504952101l, 2508211060l, 2515761257l, 2540132804l, 2553924507l, 2565474417l, 2593278445l, 2611246270l, 2614920676l, 2629689102l, 2668656424l, 2677584420l, 2714998058l, 2753929625l, 2757560052l, 2780061080l, 2867926404l, 2877896232l, 2929137025l, 2945952615l, 2972568554l, 2999008394l}));
		map.put("GCCAGGAGCGGTG", new TLongArrayList(new long[] {-9223372036854775184l}));
		map.put("CCAGGAGCGGTGG", new TLongArrayList(new long[] {-9223372036854775158l}));
		map.put("CAGGAGCGGTGGC", new TLongArrayList(new long[] {-9223372036854775191l}));
		map.put("AGGAGCGGTGGCA", new TLongArrayList(new long[] {32349656l, 75599640l, 112750464l, 371562684l, 520238658l, 525153036l, 667871382l, 709999355l, 726987730l, 862548615l, 1006157446l, 1013056722l, 1103549647l, 1119286086l, 1325510662l, 1409321949l, 1445522857l, 1458279162l, 1577907857l, 1662661911l, 1673097825l, 1693763522l, 1753063363l, 1801418357l, 1828142299l, 1941810514l, 1942379909l, 1958802060l, 1978370209l, 2044413747l, 2232953086l, 2457189290l, 2511610033l, 2515761261l, 2589218831l, 2593278449l, 2721598218l, 2852617941l, 2980067504l}));
		map.put("GGAGCGGTGGCAG", new TLongArrayList(new long[] {38364225l, 65315861l, 82187836l, 112750465l, 225878752l, 369321083l, 473531160l, 588778663l, 667871383l, 862548616l, 919432953l, 1006157447l, 1026187515l, 1119286087l, 1148637270l, 1213302436l, 1334704450l, 1445522858l, 1520590476l, 1572004154l, 1673097826l, 1753063364l, 1779706296l, 1801418358l, 1817536381l, 1818685149l, 1881895776l, 1882959622l, 1893240437l, 1961277010l, 1978370210l, 2351631423l, 2382450788l, 2391237616l, 2410437930l, 2440006539l, 2457189291l, 2481536008l, 2488535315l, 2503241276l, 2513345902l, 2515761262l, 2544622237l, 2544840158l, 2575175174l, 2654283544l, 2721598219l, 2852617942l, 2873083881l, 2877107475l, 2998513497l, 3028827664l}));
		map.put("GAGCGGTGGCAGG", new TLongArrayList(new long[] {13796034l, 38364226l, 58935387l, 82187837l, 112750466l, 225878753l, 278495566l, 322731974l, 369321084l, 386666732l, 473531161l, 588778664l, 667871384l, 862548617l, 1006157448l, 1026187516l, 1100128362l, 1119286088l, 1148637271l, 1213302437l, 1298596143l, 1445522859l, 1467622075l, 1520590477l, 1576909984l, 1673097827l, 1761276959l, 1779706297l, 1798873222l, 1801418359l, 1818228749l, 1818685150l, 1881895777l, 1893240438l, 1961277011l, 1978370211l, 2111692705l, 2252559723l, 2266332693l, 2382450789l, 2410437931l, 2440006540l, 2457189292l, 2469098077l, 2481536009l, 2488535316l, 2503241277l, 2513345903l, 2515761263l, 2544622238l, 2544840159l, 2868158434l, 2873083882l, 2988052430l, 3017666019l, 3096351128l}));
		map.put("AGCGGTGGCAGGC", new TLongArrayList(new long[] {38364227l, 44949352l, 82187838l, 112750467l, 225878754l, 473531162l, 588778665l, 667871385l, 1026187517l, 1072582670l, 1119286089l, 1148637272l, 1213302438l, 1422175872l, 1445522860l, 1492886658l, 1520590478l, 1673097828l, 1796206891l, 1801418360l, 1893240439l, 1961277012l, 1978370212l, 2266332694l, 2301222469l, 2301222482l, 2301222495l, 2301222630l, 2301222713l, 2301222830l, 2301222921l, 2440006541l, 2457189293l, 2469098078l, 2503241278l, 2515761264l, 2706133999l, 2880742945l, 3017666020l, 3034118018l, 3096351129l}));
		map.put("GCGGTGGCAGGCA", new TLongArrayList(new long[] {18936489l, 38364228l, 76196825l, 92331330l, 92432487l, 112750468l, 193146521l, 207942464l, 212394111l, 230593362l, 258939982l, 275124312l, 328395785l, 349634889l, 356140193l, 365061011l, 419525883l, 457301235l, 473911372l, 477560553l, 482735580l, 486242000l, 521745872l, 529076781l, 541681556l, 549697804l, 550103648l, 554152501l, 554377689l, 612232430l, 623376282l, 667871386l, 687254610l, 693004803l, 752799073l, 766993398l, 782875838l, 832472229l, 846054105l, 846510521l, 886111390l, 891986580l, 908777625l, 957648917l, 976582845l, 1022329550l, 1035173074l, 1045359957l, 1052439881l, 1054003637l, 1058066255l, 1093037521l, 1096892725l, 1148637273l, 1156833705l, 1214302717l, 1231725859l, 1267212989l, 1281509701l, 1288782975l, 1290010096l, 1295972888l, 1299183443l, 1309141722l, 1317453079l, 1356687586l, 1358940406l, 1400498051l, 1403124653l, 1426116574l, 1435067714l, 1445522861l, 1478631596l, 1510342538l, 1526249352l, 1528361297l, 1537669471l, 1558940444l, 1572639339l, 1574198852l, 1577777010l, 1612681392l, 1641738874l, 1642254676l, 1646466599l, 1659463137l, 1662595821l, 1669297318l, 1673097829l, 1685635952l, 1712788471l, 1750023792l, 1750458005l, 1752520016l, 1766630298l, 1783752420l, 1798656841l, 1801418361l, 1801677785l, 1829768861l, 1859562833l, 1863672786l, 1879949105l, 1880659608l, 1918015490l, 1990426529l, 2014439529l, 2027928496l, 2030881454l, 2030889956l, 2060756554l, 2130042315l, 2219490804l, 2221850391l, 2228140943l, 2231658941l, 2266332695l, 2268844299l, 2271078484l, 2287428839l, 2300713039l, 2301222470l, 2301222483l, 2301222496l, 2301222631l, 2301222714l, 2301222831l, 2301222922l, 2301617395l, 2340559273l, 2342483818l, 2351431684l, 2362839175l, 2372381303l, 2378464785l, 2379731046l, 2412599575l, 2432617408l, 2469098079l, 2497637027l, 2501740865l, 2507348601l, 2515761265l, 2525952235l, 2528803115l, 2529781125l, 2530511761l, 2535294876l, 2544486175l, 2569181169l, 2573084295l, 2592753388l, 2668999492l, 2675374316l, 2679903906l, 2692140941l, 2692622801l, 2696146878l, 2706530063l, 2709769703l, 2711354797l, 2734661161l, 2752898478l, 2753798753l, 2773570555l, 2780521984l, 2797731754l, 2804087859l, 2819568108l, 2825882608l, 2852913975l, 2860074066l, 2874611661l, 2874645243l, 2882668237l, 2884597480l, 2916579369l, 3008960863l, 3013648402l, 3031766383l, 3037888797l}));
		
		
		Map<Integer, TLongList> map2 = TiledAlignerUtil.getTiles(map, "AAAANACAAAAAATTAGCCAGGAGCGGTGGCAGGCA", 13, false);
		assertEquals(5, map2.size());
		List<Integer> keys = new ArrayList<>(map2.keySet());
		keys.sort(null);
		for (int i = keys.size() - 1; i >= 0 ; i--) {
			System.out.println("key: " + keys.get(i) + ", counts: " + Arrays.toString(NumberUtils.splitIntInto2(keys.get(i))) + ", positions: " + map2.get(keys.get(i)).toString());
		}
		
		assertEquals(4, map2.get(NumberUtils.getTileCount(12, 0)).size());
		assertEquals(2, map2.get(NumberUtils.getTileCount(11, 0)).size());
		assertEquals(1, map2.get(NumberUtils.getTileCount(10, 0)).size());
		assertEquals(7, map2.get(NumberUtils.getTileCount(8, 0)).size());
		assertEquals(15, map2.get(NumberUtils.getTileCount(7, 0)).size());
		long offsetFor12 = NumberUtils.addShortToLong(0l, (short)12, TiledAlignerUtil.POSITION_OF_TILE_IN_SEQUENCE_OFFSET);
		assertArrayEquals(new long[] {offsetFor12 + 112750457, offsetFor12 + 1445522850, offsetFor12 + 1673097818, offsetFor12 + 2515761254l}, map2.get(NumberUtils.getTileCount(12, 0)).toArray());
		assertEquals(true, map2.get(NumberUtils.getTileCount(7, 0)).contains(offsetFor12 + 1953542030l));
	}
	
	@Test
	public void getBEstStartPosition7() {
		Map<String, TLongList> map = new HashMap<>();
		
		map.put("TCCCTCCCTTCCT", new TLongArrayList(new long[] {2386760682l}));
		map.put("CCCTCCCTTCCTC", new TLongArrayList(new long[] {2386760683l}));
		map.put("CCTCCCTTCCTCT", new TLongArrayList(new long[] {2386760684l}));
		map.put("CTCCCTTCCTCTT", new TLongArrayList(new long[] {2386760685l}));
		map.put("TCCCTTCCTCTTT", new TLongArrayList(new long[] {2386760686l}));
		map.put("CCCTTCCTCTTTC", new TLongArrayList(new long[] {2386760687l}));
		map.put("CCTTCCTCTTTCT", new TLongArrayList(new long[] {2386760688l}));
		map.put("CTTCCTCTTTCTG", new TLongArrayList(new long[] {2386760689l}));
		map.put("TTCCTCTTTCTGT", new TLongArrayList(new long[] {2386760690l}));
		map.put("TCCTCTTTCTGTC", new TLongArrayList(new long[] {2386760691l}));
		map.put("CCTCTTTCTGTCT", new TLongArrayList(new long[] {2386760692l}));
		map.put("CTCTTTCTGTCTT", new TLongArrayList(new long[] {2386760693l}));
		map.put("TCTTTCTGTCTTT", new TLongArrayList(new long[] {2386760694l}));
		map.put("CTTTCTGTCTTTT", new TLongArrayList(new long[] {2386760695l}));
		map.put("TTTCTGTCTTTTC", new TLongArrayList(new long[] {2386760696l}));
		map.put("TTCTGTCTTTTCT", new TLongArrayList(new long[] {2386760697l}));
		map.put("TCTGTCTTTTCTT", new TLongArrayList(new long[] {2386760698l}));
		map.put("CTGTCTTTTCTTC", new TLongArrayList(new long[] {2386760699l}));
		map.put("TGTCTTTTCTTCC", new TLongArrayList(new long[] {2386760700l}));
		map.put("GTCTTTTCTTCCT", new TLongArrayList(new long[] {2386760701l}));
		map.put("TCTTTTCTTCCTT", new TLongArrayList(new long[] {2386760702l}));
		map.put("CTTTTCTTCCTTC", new TLongArrayList(new long[] {2386760703l}));
		map.put("TTTTCTTCCTTCC", new TLongArrayList(new long[] {2386760704l}));
		map.put("TTTCTTCCTTCCT", new TLongArrayList(new long[] {2386760705l}));
		map.put("TTCTTCCTTCCTT", new TLongArrayList(new long[] {2386760706l}));
		map.put("TCTTCCTTCCTTC", new TLongArrayList(new long[] {2386760707l}));
		
		map.put("CTTCCTTCCTTCA", new TLongArrayList(new long[] {100}));
		map.put("TTCCTTCCTTCAT", new TLongArrayList(new long[] {200}));
		map.put("TCCTTCCTTCATT", new TLongArrayList(new long[] {300}));
		map.put("CCTTCCTTCATTT", new TLongArrayList(new long[] {400}));
		map.put("CTTCCTTCATTTC", new TLongArrayList(new long[] {500}));
		map.put("TTCCTTCATTTCT", new TLongArrayList(new long[] {600}));
		map.put("TCCTTCATTTCTT", new TLongArrayList(new long[] {700}));
		map.put("CCTTCATTTCTTT", new TLongArrayList(new long[] {800}));
		map.put("CTTCATTTCTTTC", new TLongArrayList(new long[] {900}));
		map.put("TTCATTTCTTTCT", new TLongArrayList(new long[] {10}));
		map.put("TCATTTCTTTCTC", new TLongArrayList(new long[] {11}));
		map.put("CATTTCTTTCTCT", new TLongArrayList(new long[] {12}));
		map.put("ATTTCTTTCTCTT", new TLongArrayList(new long[] {13}));
		
		map.put("TTTCTTTCTCTTT", new TLongArrayList(new long[] {-1}));
		map.put("TTCTTTCTCTTTC", new TLongArrayList(new long[] {2386760722l}));
		
		Map<Integer, TLongList> map2 = TiledAlignerUtil.getTiles(map, "TCCCTCCCTTCCTCTTTCTGTCTTTTCTTCCTTCCTTCATTTCTTTCTCTTTC", 13, false);
		assertEquals(1, map2.size());
		List<Integer> keys = new ArrayList<>(map2.keySet());
		keys.sort(null);
		for (int i = keys.size() - 1; i >= 0 ; i--) {
			System.out.println("key: " + keys.get(i) + ", counts: " + Arrays.toString(NumberUtils.splitIntInto2(keys.get(i))) + ", positions: " + map2.get(keys.get(i)).toString());
		}
		
		assertEquals(1, map2.get(NumberUtils.getTileCount(41, 1)).size());
		assertEquals(2386760682l, map2.get(NumberUtils.getTileCount(41, 1)).get(0));
	}
	
	@Test
	public void happyWithSequence() {
		assertEquals(true, TiledAlignerUtil.doesSequenceHaveMostlySingleBaseRepeats("ABCD"));
		assertEquals(true, TiledAlignerUtil.doesSequenceHaveMostlySingleBaseRepeats("ABCCCCCCCCCCCCCCCCCCCCCCD"));
		assertEquals(true, TiledAlignerUtil.doesSequenceHaveMostlySingleBaseRepeats("ABCCCCCCCCCCCCCCCCCCCCCCDCC"));
		assertEquals(true, TiledAlignerUtil.doesSequenceHaveMostlySingleBaseRepeats("ABCCCCCCCCCCCCCCCCCCCCCCDCCCCCCCCCCCCCCCCCCCCCC"));
		assertEquals(true, TiledAlignerUtil.doesSequenceHaveMostlySingleBaseRepeats("ABCCCCCCCCCCCCCCCCCCCCCCDCCCCCCCCCCCCCCCCCCCCCCGGGGGGGGGGGGGGGGGGGGGG"));
		assertEquals(false, TiledAlignerUtil.doesSequenceHaveMostlySingleBaseRepeats("ABCCCCCCCCCCCCCCCCCCCCCCDCCCCCCCCCCCCCCCCCCCCCCCGGGGGGGGGGGGGGGGGGGGGG"));
		assertEquals(true, TiledAlignerUtil.doesSequenceHaveMostlySingleBaseRepeats("ABCCCCCCCCCCCCCCCCCCCCCCDCCCCCCCCCCCCCCCCCCCCCCCGGGGGGGGGGGGGGGGGGGGGGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXx"));
		assertEquals(true, TiledAlignerUtil.doesSequenceHaveMostlySingleBaseRepeats("GAATCGAATTTGGTTGAAAAAGAAATCTAATGTACATTTATAAGAGGCAGATTTAGATTTAAAAAGTCCAGGAAACTTTTAGTTAACAGATAAATTTAGTCAGTTCAACTTATTATAATTTTTGATACATTTGGATGTATTTAACTCTCTATATTTCTGGTTTTCTGTTTATCATGTTATATCTATGTTTATTTCAAGCATTTGTTTAATAGAATGTTTTCTGACTACTCTCATTTTTTTGAAAGTGGTACATTCTTTTTTTTTTTTTTTTTTTTTTTTATGGTG"));
	}
	
	@Test
	public void getBestStartPositions7() {
		Map	<String, TLongList> map = new HashMap<>();
		map.put("TTATTAAAGAGGG", new TLongArrayList(new long[]{29747455l, 47834276l, 86254487l, 87159099l, 95033883l, 112483092l, 150365652l, 159595684l, 160420297l, 177521723l, 185857684l, 196108850l, 196526849l, 198241677l, 199851321l, 229118823l, 234606228l, 259740140l, 267039162l, 267583471l, 313896563l, 315627884l, 332791517l, 353339004l, 355702779l, 380797476l, 394047491l, 434218133l, 468349696l, 468465329l, 503428614l, 588546096l, 622686720l, 623286057l, 624911226l, 629654457l, 654323170l, 718537816l, 743967524l, 763644409l, 768724161l, 790366661l, 792015060l, 802796380l, 873736555l, 893725629l, 933894441l, 956918753l, 956956016l, 978216388l, 984144363l, 984343473l, 985228889l, 985608635l, 1008096494l, 1034795055l, 1061516731l, 1072630979l, 1086702776l, 1098275935l, 1158446286l, 1164076954l, 1203101588l, 1285559433l, 1294905420l, 1295032176l, 1330938762l, 1334688255l, 1355478667l, 1449847411l, 1473628958l, 1554785270l, 1560364704l, 1622441276l, 1642064161l, 1649310388l, 1652266624l, 1657404529l, 1669985300l, 1737536513l, 1864492265l, 1871374928l, 1875220140l, 1876237604l, 1901269711l, 1943290117l, 1971710464l, 1973744593l, 2023675948l, 2033424497l, 2036335460l, 2111671993l, 2131562941l, 2174032022l, 2193558684l, 2327315029l, 2327337283l, 2389193531l, 2533828030l, 2664599954l, 2764725614l, 2855745616l, 2900326008l, 2971871435l, 2979448988l, 2981764979l, 2983719314l, 2993533649l, 3015480447l, 3026586399l, 30279706l, 3040996270l}));
		map.put("TATTAAAGAGGGT", new TLongArrayList(new long[]{47834277l, 51339873l, 106812955l, 160420298l, 177521724l, 196526850l, 234606229l, 275234488l, 315627885l, 316282111l, 355702780l, 434218134l, 434236964l, 468349697l, 532495717l, 622686721l, 629654458l, 903598494l, 978216389l, 984144364l, 1034795056l, 1046170794l, 1086702777l, 1091963252l, 1104781655l, 1164076955l, 1280515263l, 1345790968l, 1355478668l, 1501306465l, 1622441277l, 1649310389l, 1652266625l, 1667139565l, 1688913882l, 1737536514l, 1787256042l, 1894149955l, 1918928182l, 1921874821l, 2111671994l, 2131206360l, 2131562942l, 2174032023l, 2283497463l, 2284989528l, 2416396297l, 2511216433l, 2552884574l, 2600099576l, 2606292876l, 2682733613l, 2700922743l, 2761940684l, 2894580976l, 2927865839l, 2967899527l, 2971871436l, 2981764980l, 3015480448l, 3015649685l, 3040996271l}));
		map.put("ATTAAAGAGGGTG", new TLongArrayList(new long[]{160420299l, 164275159l, 177521725l, 234606230l, 315627886l, 316282112l, 397862806l, 468349698l, 476879994l, 496102952l, 532495718l, 603406443l, 608786460l, 629654459l, 657890216l, 750057722l, 762594521l, 784125219l, 856349426l, 963520065l, 979671361l, 1037394773l, 1045393019l, 1104781656l, 1120590895l, 1164076956l, 1196495676l, 1345790969l, 1508104269l, 1572186604l, 1605741344l, 1614130124l, 1647056033l, 1667139566l, 1702527118l, 1737536515l, 1787256043l, 1852787424l, 1927024088l, 2048234467l, 2111671995l, 2174032024l, 2174903980l, 2237315360l, 2511216434l, 2798450076l, 2962773472l, 3015480449l, 3015649686l, 3029154847l}));
		map.put("TTAAAGAGGGTGT", new TLongArrayList(new long[]{164275160l, 177521726l, 220304176l, 315627887l, 349180871l, 420681564l, 440613224l, 468349699l, 474433019l, 526981855l, 570642112l, 608786461l, 629654460l, 750057723l, 762594522l, 813971112l, 833491632l, 853489224l, 856349427l, 866786841l, 960181281l, 971494809l, 978475784l, 1034808497l, 1037394774l, 1104781657l, 1161897694l, 1164076957l, 1244059886l, 1310838979l, 1383105920l, 1456200170l, 1555302522l, 1614927166l, 1647056034l, 1649964666l, 1737536516l, 1742634224l, 1746702177l, 1788735188l, 1899483070l, 2012427339l, 2058439617l, 2111671996l, 2122187758l, 2149209925l, 2174903981l, 2351071926l, 2416810400l, 2555555138l, 2618754283l, 2647668498l, 2815660740l, 2865505276l, 2963883241l, 3015480450l, 3015649687l}));
		map.put("TAAAGAGGGTGTA", new TLongArrayList(new long[]{390549295l, 440613225l, 442111038l, 454748526l, 468349700l, 474433020l, 570642113l, 590964128l, 629654461l, 686522915l, 850095663l, 856349428l, 886687081l, 978475785l, 978750600l, 1030635767l, 1079308356l, 1161897695l, 1244059887l, 1255202314l, 1278930219l, 1309535435l, 1310838980l, 1383622233l, 1647734798l, 1742634225l, 1830576288l, 2028205799l, 2108419087l, 2112472184l, 2128164938l, 2157801549l, 2188361416l, 2300325198l, 2555555139l, 2815660741l, 3013151199l}));
		map.put("AAAGAGGGTGTAC", new TLongArrayList(new long[]{299095911l, 393559201l, 468349701l, 474955810l, 617858346l, 669102996l, 675505593l, 763469488l, 763470092l, 906646620l, 1030635768l, 1048759244l, 1173339000l, 1196398157l, 1348317938l, 1381133228l, 1383622234l, 1488374522l, 1631880152l, 1647725776l, 1647734799l, 1921791240l, 2010836200l, 2028205800l, 2246239267l, 2289596318l, 2384648216l, 2471789753l, 2904568475l, 3031576160l}));
		map.put("AAGAGGGTGTACG", new TLongArrayList(new long[]{412951324l, 468349702l, 600881863l, 669102997l, 1173339001l, 2147286165l, 2246239268l}));
		map.put("AGAGGGTGTACGG", new TLongArrayList(new long[]{468349703l, 949919689l, 1100688211l, 1173339002l, 1971729085l}));
		map.put("GAGGGTGTACGGG", new TLongArrayList(new long[]{430806892l, 468349704l, 483562144l, 527480019l, 538881786l, 949919690l, 1367740537l, 1809348948l, 2439858585l, 2753776654l, 2779472918l}));
		map.put("AGGGTGTACGGGA", new TLongArrayList(new long[]{468349705l, 718569128l, 949919691l, 1465841807l, 2563923173l, 2753776655l, 2781326380l}));
		map.put("GGGTGTACGGGAG", new TLongArrayList(new long[]{468349706l, 468456928l, 518302224l, 718569129l, 1012215599l, 1782789127l, 2348518499l}));
		map.put("GGTGTACGGGAGT", new TLongArrayList(new long[]{468349707l}));
		map.put("GTGTACGGGAGTT", new TLongArrayList(new long[]{382633241l, 468349708l, 2302263166l, 2669507711l}));
		map.put("TGTACGGGAGTTT", new TLongArrayList(new long[]{165675197l, 195757033l, 468349709l, 819168003l, 2375073052l, 2669507712l, 2951744438l}));
		map.put("GTACGGGAGTTTC", new TLongArrayList(new long[]{468349710l, 2375073053l}));
		map.put("TACGGGAGTTTCT", new TLongArrayList(new long[]{468349711l, 559402306l, 1403796911l, 2375073054l, 2736112548l}));
		map.put("ACGGGAGTTTCTT", new TLongArrayList(new long[]{120210721l, 276290800l, 302892475l, 468349712l, 1605954375l, 1955194945l, 2299777491l, 2512315068l, 2646142637l, 2736112549l, 2921585951l, 2924666263l}));
		map.put("CGGGAGTTTCTTG", new TLongArrayList(new long[]{468349713l, 535356324l, 2198033423l, 2299777492l, 2646142638l}));
		map.put("GGGAGTTTCTTGG", new TLongArrayList(new long[]{6492230l, 54725451l, 192990500l, 267352435l, 270819666l, 273467845l, 323985897l, 361475558l, 366090608l, 468349714l, 651184123l, 739244386l, 806608291l, 962130872l, 1004482024l, 1042030545l, 1077833710l, 1153698578l, 1189226966l, 1250349771l, 1261709246l, 1283338679l, 1310849898l, 1363684519l, 1404633584l, 1421519785l, 1557025803l, 1716109803l, 1751071315l, 1791391332l, 1924505196l, 1934758727l, 1936356145l, 2136011717l, 2141503581l, 2219023778l, 2236284056l, 2378721678l, 2391703433l, 2409442076l, 2465792808l, 2547498964l, 2566994188l, 2642279829l, 2701652346l, 2754956254l, 2764559112l, 2766495759l, 2795986557l, 2821449197l, 2867669460l, 2904554822l}));
		map.put("GGAGTTTCTTGGT", new TLongArrayList(new long[]{12714454l, 35151265l, 54536316l, 185432612l, 232690521l, 238733216l, 255531771l, 269240817l, 361475559l, 386249629l, 468349715l, 551879994l, 593891073l, 651184124l, 680895814l, 785022886l, 806608292l, 829598169l, 880799951l, 913295644l, 956817504l, 978000588l, 1004482025l, 1010826772l, 1038049986l, 1067382511l, 1101360510l, 1114672401l, 1119386082l, 1153698579l, 1171701454l, 1236766844l, 1250349772l, 1261709247l, 1364645000l, 1421519786l, 1476921468l, 1637379144l, 1639852307l, 1640473950l, 1660520701l, 1751071316l, 1765903492l, 1782245762l, 1841897563l, 1943618178l, 2105957924l, 2120486488l, 2219023779l, 2275548015l, 2405412893l, 2422973794l, 2519775577l, 2535204696l, 2642279830l, 2755560477l, 2765199634l, 2766495760l, 2795986558l, 2821449198l, 2979175453l}));
		map.put("GAGTTTCTTGGTA", new TLongArrayList(new long[]{14698073l, 78079204l, 347660714l, 468349716l, 496036092l, 502236732l, 502237706l, 551879995l, 560584678l, 572408233l, 589411609l, 658362266l, 661106122l, 665385885l, 753390243l, 778928722l, 783031672l, 785022887l, 794193391l, 806608293l, 829598170l, 956817505l, 1043890707l, 1062191781l, 1067382512l, 1153698580l, 1214588562l, 1285695107l, 1432104314l, 1476921469l, 1500803098l, 1514405895l, 1634291717l, 1707630760l, 1765903493l, 1841897564l, 1890451974l, 2041841370l, 2105353788l, 2188610176l, 2234473011l, 2391373836l, 2459368738l, 2460055581l, 2486937017l, 2505384035l, 2519775578l, 2642279831l, 2650451970l, 2741192662l, 2756178240l, 2759228242l, 2765199635l, 2804877293l, 2895170767l, 2946465344l, 2974255454l, 3039629845l, 3045061283l}));
		map.put("AGTTTCTTGGTAA", new TLongArrayList(new long[]{12795576l, 69573705l, 108710527l, 117677256l, 253555819l, 282245816l, 284092027l, 302553612l, 313832321l, 347660715l, 371773829l, 393741037l, 433458879l, 446785008l, 468349717l, 494243216l, 502237707l, 589411610l, 590033206l, 635156917l, 641647779l, 663240003l, 667229781l, 679449293l, 785022888l, 793149420l, 829598171l, 896702964l, 911502297l, 956817506l, 971684416l, 979741377l, 990013329l, 1003727583l, 1062191782l, 1066089903l, 1111393083l, 1125489944l, 1153698581l, 1167945574l, 1214588563l, 1252059051l, 1312293564l, 1319475062l, 1329978555l, 1376967195l, 1396226532l, 1432104315l, 1448565366l, 1545519579l, 1578186105l, 1586413309l, 1613660471l, 1707630761l, 1765903494l, 1768875202l, 1818906788l, 1841897565l, 1847749126l, 1883021461l, 1887125891l, 1890451975l, 1907174113l, 1938578804l, 1975182768l, 1998878341l, 2053381590l, 2135496599l, 2150487321l, 2234473012l, 2263398049l, 2268100664l, 2425410959l, 2459368739l, 2460055582l, 2625148686l, 2643891103l, 2650451971l, 2656693921l, 2726077606l, 2741192663l, 2801431197l, 2804877294l, 2817639276l, 2973546362l, 2993247211l, 3030682232l, 3039629846l}));
		map.put("GTTTCTTGGTAAA", new TLongArrayList(new long[]{69573706l, 69989249l, 172138026l, 203960894l, 211272993l, 225789745l, 253555820l, 318901299l, 336461131l, 347660716l, 357735593l, 358627810l, 359841834l, 371773830l, 393741038l, 433458880l, 443185041l, 468349718l, 624530452l, 628855865l, 641343732l, 641647780l, 663240004l, 679449294l, 705501256l, 715456133l, 847394351l, 854100537l, 860061006l, 865608618l, 872497041l, 879172724l, 911502298l, 932890472l, 956817507l, 969254696l, 979741378l, 985915012l, 987649803l, 990013330l, 1003727584l, 1028112615l, 1033311404l, 1034769587l, 1059176600l, 1062191783l, 1112708088l, 1115819885l, 1118077965l, 1125489945l, 1134215335l, 1153698582l, 1167945575l, 1182052586l, 1198076391l, 1213799694l, 1214588564l, 1229708257l, 1296647379l, 1300490336l, 1319475063l, 1325826723l, 1329978556l, 1342033573l, 1368000361l, 1369700373l, 1396226533l, 1425133161l, 1427764472l, 1463168381l, 1502642255l, 1508245268l, 1513418230l, 1525991180l, 1565847607l, 1578186106l, 1586413310l, 1615530596l, 1700988970l, 1733210442l, 1748931873l, 1768875203l, 1841050172l, 1883021462l, 1887125892l, 1890451976l, 1909664272l, 1959542888l, 1998878342l, 2127219326l, 2133606131l, 2151338241l, 2170637446l, 2180853824l, 2191925139l, 2251217205l, 2263398050l, 2335048768l, 2372861182l, 2425410960l, 2460055583l, 2504919551l, 2612786610l, 2643891104l, 2671769593l, 2758771505l, 2762373933l, 2804877295l, 2878663705l, 2906559229l, 2909711204l, 2917958041l, 2934127584l, 2946249671l, 3053542858l}));
		map.put("TTTCTTGGTAAAT", new TLongArrayList(new long[]{7881181l, 35858955l, 57676169l, 67712842l, 69776021l, 85197314l, 99088627l, 108749898l, 117989327l, 192217613l, 199415123l, 203960895l, 211272994l, 213883704l, 222807975l, 225789746l, 234625525l, 249314493l, 264102757l, 283551271l, 294150792l, 302054668l, 302693079l, 350282356l, 381380412l, 387557322l, 391689523l, 407027871l, 409581534l, 419802124l, 443185042l, 461561409l, 468349719l, 487853598l, 516548823l, 522208335l, 528489967l, 557849753l, 579374156l, 609706837l, 624530453l, 626291270l, 632688492l, 632969937l, 641343733l, 651157213l, 658604465l, 659275303l, 662787266l, 669296079l, 671367896l, 693748337l, 704221263l, 704300681l, 705501257l, 711324623l, 713161974l, 718722766l, 719915906l, 749863156l, 755560167l, 800536334l, 803096490l, 807145512l, 815030685l, 822795038l, 824743693l, 827611618l, 839913327l, 847536671l, 849471657l, 851928444l, 855786048l, 865168776l, 868526228l, 871978310l, 903013566l, 907330800l, 925637263l, 925832272l, 935096927l, 943889760l, 946586250l, 947143272l, 948651036l, 950813559l, 951689441l, 957933079l, 958963000l, 966084952l, 969254697l, 970462642l, 979679027l, 980634910l, 996843442l, 1001878310l, 1009523365l, 1017894559l, 1026383955l, 1036281560l, 1044405429l, 1045060312l, 1054625552l, 1062191784l, 1077906845l, 1083922053l, 1084930004l, 1087309123l, 1091457490l, 1110084156l, 1115819886l, 1129260236l, 1137522700l, 1140100001l, 1161439895l, 1184846164l, 1198076392l, 1200877294l, 1202620782l, 1220299966l, 1225913670l, 1245637043l, 1250972276l, 1275383449l, 1288386422l, 1300490337l, 1312084780l, 1314065243l, 1317990257l, 1320187559l, 1325826724l, 1356388395l, 1374534614l, 1376932567l, 1388840266l, 1395363821l, 1398070475l, 1414595333l, 1415934312l, 1416511517l, 1418908236l, 1426261656l, 1464674890l, 1472638618l, 1486784001l, 1487057122l, 1499264357l, 1504444140l, 1515966843l, 1541626430l, 1561654004l, 1565847608l, 1608915956l, 1609282643l, 1609533096l, 1614991285l, 1619905120l, 1623923414l, 1651484989l, 1687928087l, 1696477113l, 1700541427l, 1700831507l, 1708480309l, 1712228728l, 1723162198l, 1733210443l, 1734787075l, 1734982006l, 1790304076l, 1791183373l, 1802540946l, 1811848153l, 1830729221l, 1837944470l, 1841050173l, 1883021463l, 1890873198l, 1902173395l, 1903417808l, 1903857094l, 1965927895l, 1970840974l, 1972122548l, 1978917312l, 1992363531l, 1998878343l, 2021065279l, 2022064506l, 2025297507l, 2031422145l, 2041387013l, 2043222338l, 2069336978l, 2113021428l, 2116808214l, 2119545440l, 2126600978l, 2128772019l, 2133606132l, 2136355311l, 2151338242l, 2151573071l, 2152434299l, 2170637447l, 2251217206l, 2260867469l, 2269065607l, 2282384932l, 2285383085l, 2286619655l, 2332428910l, 2335048769l, 2344013136l, 2344858935l, 2346739813l, 2361521741l, 2380274259l, 2404708865l, 2442281251l, 2492288033l, 2509688425l, 2514861028l, 2533830663l, 2582453516l, 2596432667l, 2601729097l, 2604714306l, 2616750805l, 2622552341l, 2634008806l, 2643891105l, 2653334351l, 2689895437l, 2716560763l, 2733840798l, 2743065113l, 2744088246l, 2777385643l, 2791174643l, 2796623964l, 2804416815l, 2811840053l, 2817224483l, 2829647949l, 2862881542l, 2878663706l, 2898702052l, 2902456947l, 2914878977l, 2917958042l, 2923233754l, 2923448586l, 2924094188l, 2924818268l, 2928328884l, 2945619312l, 2950380673l, 2953276055l, 2953617196l, 2953749003l, 2954042534l, 2956550690l, 2971910010l, 2989008550l, 2989099575l, 2992142555l, 2993217257l, 3002465566l, 3041033215l, 3055144007l, 3057850341l, 3058345466l, 3060799555l}));		 
		map.put("TTCTTGGTAAATC", new TLongArrayList(new long[]{67712843l, 85197315l, 107738448l, 213883705l, 302054669l, 387557323l, 419746101l, 468349720l, 516548824l, 519217773l, 539884102l, 574078570l, 579374157l, 632969938l, 659275304l, 698750782l, 707401542l, 800536335l, 815030686l, 839913328l, 865168777l, 943889761l, 958963001l, 979679028l, 980634911l, 1017894560l, 1040239182l, 1046477236l, 1050531920l, 1077464458l, 1083922054l, 1115819887l, 1166646993l, 1202620783l, 1287390193l, 1300490338l, 1376932568l, 1395363822l, 1406787840l, 1461840539l, 1487057123l, 1515966844l, 1565847609l, 1751362743l, 1844083780l, 1850213384l, 1903857095l, 1998878344l, 2019447813l, 2031422146l, 2122996708l, 2136355312l, 2151573072l, 2160604132l, 2241663494l, 2251217207l, 2269065608l, 2400475132l, 2485601799l, 2509688426l, 2519975936l, 2526225611l, 2582453517l, 2631107564l, 2733165663l, 2777385644l, 2811922449l, 2817224484l, 2859578843l, 2897814733l, 2901692557l, 2917958043l, 2934903830l, 2953276056l, 2953617197l, 2989008551l, 2998517792l, 3002465567l, 3005391414l, 3029239248l, 3058345467l}));
		map.put("TCTTGGTAAATCC", new TLongArrayList(new long[]{60356555l, 107738449l, 329854938l, 331514426l, 348861257l, 376232080l, 387557324l, 419746102l, 429318665l, 468349721l, 503456237l, 539884103l, 778906557l, 887806251l, 932142720l, 1055359230l, 1083922055l, 1166646994l, 1329366311l, 1332577170l, 1344322420l, 1395363823l, 1406787841l, 1515569631l, 1636927643l, 1725005372l, 1751362744l, 1780746938l, 1946555202l, 2130789002l, 2136355313l, 2166629802l, 2241663495l, 2269065609l, 2370070765l, 2377921525l, 2400475133l, 2492521757l, 2519975937l, 2526225612l, 2576792061l, 2626390470l, 2631107565l, 2648595463l, 2671618099l, 2681308007l, 2797889914l, 2817224485l, 2822400954l, 2934903831l, 2980221032l, 3005391415l}));
		map.put("CTTGGTAAATCCA", new TLongArrayList(new long[]{27770153l, 60356556l, 239197639l, 298902989l, 329854939l, 337541677l, 348861258l, 356336691l, 361857772l, 419746103l, 468349722l, 476153903l, 516457133l, 560535800l, 592096174l, 702652391l, 749135911l, 758426709l, 765691143l, 768484791l, 807607706l, 835665543l, 887806252l, 1038623295l, 1055359231l, 1166646995l, 1189397364l, 1212803522l, 1253902738l, 1359636983l, 1389564179l, 1389855835l, 1395363824l, 1424912262l, 1560870889l, 1637995979l, 2111698141l, 2136355314l, 2198037240l, 2236469176l, 2241663496l, 2243428822l, 2269065610l, 2389988499l, 2390365024l, 2468812056l, 2559116827l, 2587029141l, 2626390471l, 2656605131l, 2733267385l, 2822400955l, 3062598305l}));
		map.put("TTGGTAAATCCAG", new TLongArrayList(new long[]{27770154l, 83573814l, 329854940l, 337541678l, 349672262l, 356336692l, 361857773l, 419746104l, 468349723l, 516457134l, 681603336l, 749135912l, 1059432192l, 1166646996l, 1212803523l, 1389564180l, 1469679957l, 1562702584l, 1637995980l, 1653606202l, 1715183995l, 1739119845l, 1941783383l, 1958305282l, 2018337801l, 2064907672l, 2117640316l, 2161883032l, 2187267211l, 2236469177l, 2241663497l, 2271959366l, 2353513249l, 2356863083l, 2407033818l, 2565627844l, 2587029142l, 2656605132l, 2662239856l, 2671573656l, 2733267386l, 2950709853l, 2988350206l, 3045453443l}));
		map.put("TGGTAAATCCAGA", new TLongArrayList(new long[]{27770155l, 57771850l, 65838367l, 83573815l, 144908103l, 146517938l, 321764029l, 329854941l, 353302906l, 376221812l, 456847670l, 468349724l, 511258514l, 516457135l, 660685009l, 689383656l, 692040517l, 802634392l, 828048840l, 828428888l, 870105679l, 1126362932l, 1131556220l, 1144814723l, 1280570016l, 1282928159l, 1327680230l, 1360965587l, 1469679958l, 1499844979l, 1527805616l, 1637995981l, 1723375926l, 1811020745l, 1821416812l, 1831515546l, 1926840641l, 1958305283l, 1961878883l, 2018337802l, 2039489976l, 2041437995l, 2107947741l, 2111752164l, 2127107690l, 2242431850l, 2254655279l, 2281048378l, 2286649954l, 2289876274l, 2353513250l, 2356826366l, 2361853826l, 2432319517l, 2565627845l, 2593940657l, 2602641654l, 2609817542l, 2656605133l, 2662239857l, 2671573657l, 2672780822l, 2733267387l, 2865545218l, 2879417904l, 3018008091l, 3045453444l}));
		map.put("GGTAAATCCAGAA", new TLongArrayList(new long[]{27770156l, 35185830l, 144908104l, 146517939l, 202036893l, 330511299l, 376221813l, 403626999l, 414401819l, 456847671l, 468349725l, 516457136l, 547841074l, 689383657l, 802634393l, 803641725l, 828048841l, 870105680l, 920740521l, 963595582l, 1106630501l, 1131556221l, 1144814724l, 1277030016l, 1327847251l, 1398507920l, 1488128450l, 1527805617l, 1644333227l, 1652779221l, 1811020746l, 1811946956l, 1821416813l, 1958305284l, 2018337803l, 2039489977l, 2080335904l, 2232687872l, 2242431851l, 2254655280l, 2353513251l, 2356826367l, 2432319518l, 2477344224l, 2529794392l, 2555252632l, 2555326572l, 2559126481l, 2559908626l, 2574232365l, 2609817543l, 2643685585l, 2671573658l, 2902912002l, 2974541592l, 2989003277l, 3018008092l}));
		map.put("GTAAATCCAGAAT", new TLongArrayList(new long[]{31743757l, 35185831l, 73360133l, 73390005l, 119784926l, 146517940l, 211314893l, 288836164l, 306460482l, 328065994l, 403627000l, 420851062l, 422575918l, 468349726l, 481209945l, 516457137l, 541996553l, 547841075l, 634567630l, 639844153l, 656386884l, 760104295l, 789710899l, 828048842l, 837389369l, 870105681l, 922887213l, 957812053l, 1028069827l, 1158531042l, 1176527394l, 1237369895l, 1276852610l, 1277030017l, 1316618390l, 1327847252l, 1424371693l, 1656450446l, 1657586413l, 1700142627l, 1715381353l, 1777358705l, 1811020747l, 1811946957l, 1821416814l, 1945027637l, 1958305285l, 2066006387l, 2186918775l, 2232687873l, 2242431852l, 2275649763l, 2332372031l, 2356826368l, 2384908319l, 2462173351l, 2477344225l, 2487816567l, 2574232366l, 2719023966l, 2734198956l, 2902912003l, 2904783433l, 2953914914l, 2964460716l, 3029794079l, 3059556367l}));
		map.put("TAAATCCAGAATC", new TLongArrayList(new long[]{47226371l, 74047112l, 94337922l, 166113645l, 196517402l, 213644705l, 240978698l, 261303366l, 295253351l, 310068288l, 322352508l, 328065995l, 332946017l, 423760845l, 440805414l, 450321506l, 468349727l, 514348111l, 541996554l, 547841076l, 596605493l, 599027172l, 629439729l, 652498006l, 671475806l, 672735930l, 684566568l, 706281885l, 766574683l, 789710900l, 798282233l, 798642591l, 802705941l, 886584793l, 1004909190l, 1010704259l, 1019391860l, 1024128239l, 1025996568l, 1056927916l, 1081737966l, 1093776549l, 1093861636l, 1181563554l, 1184101370l, 1185879527l, 1202932406l, 1277030018l, 1286909616l, 1319092192l, 1373388687l, 1496096186l, 1507983809l, 1515280861l, 1523417344l, 1533237561l, 1646746871l, 1657586414l, 1799083693l, 1886396317l, 1943265867l, 1949267129l, 1997504330l, 2044762405l, 2059801199l, 2061578577l, 2124239262l, 2142061746l, 2169115008l, 2173566603l, 2242431853l, 2274597716l, 2287961377l, 2304870659l, 2384908320l, 2487816568l, 2520528004l, 2527754345l, 2557797636l, 2574232367l, 2630756390l, 2643731189l, 2644085268l, 2646989393l, 2757075554l, 2762630312l, 2767528167l, 2771116816l, 2812860562l, 2898550858l, 2902912004l, 2915010654l, 2964222551l, 2983828710l, 2987153632l, 3011003394l, 3033170189l, 3034465096l, 3034502225l, 3034540033l}));
		map.put("AAATCCAGAATCA", new TLongArrayList(new long[]{58463424l, 60763651l, 94337923l, 166113646l, 167720042l, 168497015l, 240978699l, 251423126l, 252623228l, 253020929l, 257495940l, 268032852l, 363754626l, 413938427l, 423760846l, 441399943l, 449912867l, 468349728l, 510008571l, 566109613l, 594006663l, 596605494l, 641483182l, 664697874l, 739217734l, 764626991l, 766574684l, 785326712l, 787554993l, 789710901l, 794420747l, 798282234l, 802705942l, 809099001l, 814955411l, 830081943l, 853757276l, 865402984l, 875446054l, 883573210l, 886584794l, 906105561l, 925169422l, 945654894l, 948806580l, 949840248l, 1010737016l, 1053273054l, 1068093861l, 1078193221l, 1081737967l, 1084128317l, 1089142399l, 1097491004l, 1107798958l, 1197633391l, 1227760250l, 1262695307l, 1269244274l, 1295523638l, 1319092193l, 1357690116l, 1370067586l, 1373388688l, 1402378257l, 1421137335l, 1435100991l, 1463267023l, 1486934462l, 1493769006l, 1515280862l, 1525906234l, 1533237562l, 1541850477l, 1631103313l, 1641148452l, 1655115579l, 1657586415l, 1666326529l, 1698951301l, 1781265299l, 1799083694l, 1808682419l, 1837415851l, 1837969009l, 1855983705l, 1913651942l, 2013189921l, 2024616541l, 2054681939l, 2158281782l, 2173566604l, 2195650769l, 2236345345l, 2242431854l, 2265074820l, 2274597717l, 2304870660l, 2347337587l, 2353014609l, 2384908321l, 2385323553l, 2415965852l, 2574232368l, 2619683215l, 2651518384l, 2669741677l, 2727770856l, 2752635768l, 2755299319l, 2767528168l, 2807421636l, 2812860563l, 2813638190l, 2878722840l, 2902912005l, 2914290976l, 2920915496l, 2927442713l, 2943110799l, 2983828711l, 2984998182l, 2985468635l, 3011003395l, 3033170190l, 3034465097l, 3034502226l, 3034540034l, 3061311551l, 3062945299l}));
		map.put("AATCCAGAATCAG", new TLongArrayList(new long[]{58463425l, 60763652l, 94875306l, 107794080l, 187857825l, 251423127l, 267051127l, 287474824l, 291683939l, 392743866l, 448016523l, 457539598l, 468349729l, 509312434l, 589822718l, 594006664l, 602809119l, 627255057l, 638627157l, 641483183l, 668377011l, 739217735l, 751948416l, 767617038l, 802705943l, 806696022l, 927046229l, 945654895l, 995909174l, 1028830067l, 1038948388l, 1068093862l, 1084128318l, 1089142400l, 1097491005l, 1271673502l, 1319092194l, 1373207070l, 1373388689l, 1385846807l, 1421775987l, 1459466754l, 1474957500l, 1486934463l, 1489544931l, 1533237563l, 1639464048l, 1657586416l, 1752553531l, 1837969010l, 1900313712l, 1903223662l, 1914509288l, 2024616542l, 2113947152l, 2233948669l, 2255454265l, 2263604192l, 2345019229l, 2370544680l, 2427860526l, 2490621920l, 2528334048l, 2563217762l, 2669741678l, 2724064410l, 2758694970l, 2779716950l, 2800801750l, 2902912006l, 2905791874l, 2920915497l, 2927442714l, 2984998183l, 2985468636l, 3016934627l, 3033170191l, 3034465098l, 3034502227l, 3034540035l}));
		map.put("ATCCAGAATCAGG", new TLongArrayList(new long[]{60763653l, 88795061l, 274063388l, 291683940l, 468349730l, 505808029l, 540927428l, 592926256l, 630394611l, 638627158l, 685346425l, 872320384l, 990163072l, 1028830068l, 1055198518l, 1072530086l, 1120192500l, 1229580875l, 1360862693l, 1418583372l, 1459466755l, 1474957501l, 1486934464l, 1487687774l, 1489544932l, 1731041483l, 1752553532l, 1786443743l, 1793413714l, 1805874367l, 1828742166l, 1903223663l, 2004983320l, 2109776023l, 2113947153l, 2293410052l, 2347197548l, 2550405798l, 2590000589l, 2634365582l, 2646272174l, 2655790081l, 2702578782l, 2724064411l, 2920915498l, 3016934628l}));
		map.put("TCCAGAATCAGGA", new TLongArrayList(new long[]{10827345l, 103399775l, 211446740l, 271266371l, 274063389l, 389817552l, 396781086l, 407436232l, 473586706l, 483356280l, 497142807l, 505808030l, 515510535l, 592926257l, 689474075l, 698969805l,726200328l, 912463690l, 949333061l, 954890467l, 1020032676l, 1021595626l, 1025340089l, 1035053238l, 1069083998l, 1072530087l, 1073493213l, 1158979261l, 1289905417l, 1303298365l, 1308301410l, 1308515632l, 1333521940l, 1341951308l, 1363954523l, 1369365380l, 1379095811l, 1405780738l, 1427435801l, 1433908768l, 1474957502l, 1489544933l, 1502357900l, 1627802128l, 1686688998l, 1752553533l, 1791768766l, 1916463164l, 1944342723l, 1994329647l, 2004983321l, 2053173473l, 2060188319l, 2077412246l, 2109776024l, 2125725664l, 2129611003l, 2139438545l, 2236729599l, 2237684897l, 2347197549l, 2409200497l, 2488791468l, 2492189574l, 2500618810l, 2503880061l, 2548523880l, 2574821841l, 2584694492l, 2590000590l, 2605258725l, 2623633195l, 2626391286l, 2646272175l, 2655790082l, 2711685724l, 2724064412l, 2741920152l, 2780996595l, 2869212127l, 2870827152l, 2897435110l, 2907062617l, 2944288591l, 3009934641l}));		 
		map.put("CCAGAATCAGGAT", new TLongArrayList(new long[]{19505994l, 163434370l, 172261067l, 175630132l, 182601354l, 182602452l, 195403318l, 211446741l, 219150536l, 226567273l, 236637449l, 241337621l, 271266372l, 335525059l, 351876553l, 407436233l, 483356281l, 545481738l, 565962050l, 580908536l, 592926258l, 686089481l, 705826703l, 737478171l, 794606036l, 895345125l, 1039087732l, 1059684150l, 1072530088l, 1109040480l, 1202224072l, 1212482903l, 1272234119l, 1285982872l, 1304834478l, 1308301411l, 1308515633l, 1321212435l, 1333521941l, 1361708472l, 1396290264l, 1452720825l, 1500580769l, 1502357901l, 1539554725l, 1566023309l, 1698211603l, 1698458590l, 1752553534l, 1851343000l, 1874924590l, 1894469909l, 1947309231l, 2041504641l, 2109776025l, 2125725665l, 2129611004l, 2139438546l, 2146628647l, 2237080646l, 2237684898l, 2267536415l, 2356606379l, 2399889840l, 2492189575l, 2548523881l, 2555327239l, 2577968399l, 2590000591l, 2646272176l, 2705584864l, 2706654770l, 2711685725l, 2724064413l, 2780996596l, 2822694480l, 2900833452l}));
		map.put("CAGAATCAGGATA", new TLongArrayList(new long[]{19505995l, 61037264l, 113539602l, 163434371l, 198899729l, 218850354l, 461606678l, 505916026l, 546065917l, 610794607l, 643088316l, 662740673l, 695684008l, 728047443l, 785753831l, 802867990l, 834688696l, 867098480l, 876855788l, 922891778l, 940450867l, 980619194l, 1057309478l, 1118859106l, 1318222372l, 1433079043l, 1452720826l, 1500580770l, 1502357902l, 1533280625l, 1551406885l, 1566023310l, 1627447100l, 1659642187l, 1716557046l, 1732900180l, 1756564310l, 1762318811l, 1796518507l, 1807737446l, 1829896577l, 1835850640l, 1848460297l, 1879567711l, 2005155503l, 2015704343l, 2051906332l, 2384645476l, 2466836996l, 2532867397l, 2593872677l, 3019486153l}));
		map.put("AGAATCAGGATAC", new TLongArrayList(new long[]{58115562l, 165524926l, 196607988l, 198899730l, 418840445l, 577922138l, 578105762l, 603032542l, 610794608l, 643088317l, 771158397l, 846275037l, 876855789l, 940224762l, 1226470779l, 1264875019l, 1370344415l, 1374512007l, 1551406886l, 1627447101l, 1716557047l, 1747462729l, 1762318812l, 1807737447l, 1829896578l, 1843062532l, 1879567712l, 1977597434l, 2029497501l, 2162134660l, 2162922055l, 2407261947l, 2560028466l, 2935869886l, 2988553331l, 3019486154l, 3028566068l}));
		map.put("GAATCAGGATACA", new TLongArrayList(new long[]{12341352l, 165524927l, 170831349l, 198899731l, 418864343l, 421200234l, 521477579l, 577922139l, 605123826l, 610794609l, 715335901l, 732833725l, 745147456l, 771158398l, 781475772l, 846275038l, 876855790l, 940224763l, 953412448l, 971382658l, 1007504134l, 1196332665l, 1226470780l, 1362584994l, 1472113213l, 1551406887l, 1716557048l, 1718253035l, 1761866530l, 1769388708l, 1829896579l, 1938013074l, 1977597435l, 2022402424l, 2029497502l, 2191098269l, 2363923935l, 2374435604l, 2421951737l, 2431202956l, 2513600683l, 2528682680l, 2560028467l, 2814275515l}));
		map.put("AATCAGGATACAA", new TLongArrayList(new long[]{34353035l, 51482545l, 56690490l, 80302984l, 170831350l, 212876404l, 217329695l, 218054786l, 235178288l, 251732161l, 290137119l, 320051695l, 373143211l, 380271361l, 390321494l, 442173902l, 473554903l, 545788992l, 546537676l, 567748797l, 573119872l, 597458413l, 605123827l, 610794610l, 626589993l, 626590421l, 675573218l, 703955906l, 714018724l, 714680493l, 716730381l, 771158399l, 773800994l, 834182637l, 846275039l, 861457588l, 907583837l, 909218032l, 913892254l, 938660651l, 971382659l, 973991360l, 983168571l, 1113992644l, 1196332666l, 1254415699l, 1312904440l, 1324691348l, 1358849450l, 1362584995l, 1472847396l, 1551406888l, 1619671283l, 1624718250l, 1687028376l, 1703681524l, 1761866531l, 1769388709l, 1801679431l, 1888523651l, 1919486982l, 1927655043l, 1938013075l, 1943091867l, 1977928401l, 2018200848l, 2035248292l, 2054294831l, 2067042424l, 2106644412l, 2229050393l, 2250062337l, 2259433094l, 2348581125l, 2349637971l, 2355736674l, 2374435605l, 2421951738l, 2431202957l, 2486003772l, 2542433297l, 2559375846l, 2613057886l, 2732792656l, 2760032640l, 2827069523l, 3014556503l, 3019288207l, 3027552522l, 3029718722l}));
		map.put("ATCAGGATACAAT", new TLongArrayList(new long[]{213653915l, 256146597l, 390321495l, 546537677l, 567748798l, 573119873l, 675573219l, 714680494l, 783831781l, 846275040l, 862668374l, 899804369l, 907583838l, 909218033l, 1024603225l, 1050552490l, 1244284366l, 1286243021l, 1358849451l, 1472847397l, 1484850934l, 1514601464l, 1519910893l, 1573087899l, 1724749538l, 1747264294l, 1800897657l, 1810849270l, 1941813541l, 1977928402l, 1979627927l, 2020473098l, 2023940600l, 2107065775l, 2229050394l, 2289282116l, 2293061439l, 2369078446l, 2435372924l, 2528974482l, 2559375847l, 2605604588l, 2761754186l, 3014043631l}));
		map.put("TCAGGATACAATG", new TLongArrayList(new long[]{18133123l, 239725354l, 241198392l, 293050485l, 515602712l, 546537678l, 607091318l, 647054569l, 736859333l, 755687090l, 846473070l, 874976026l, 907583839l, 917041264l, 927489985l, 1024603226l, 1050170085l, 1102082354l, 1275007953l, 1286243022l, 1311330965l, 1356154196l, 1427436257l, 1474762924l, 1487545057l, 1511660729l, 1622318539l, 1724749539l, 1809341036l, 1810849271l, 1855997603l, 1936967092l, 1941813542l, 2123626486l, 2189461040l, 2278972783l, 2280900355l, 2293061440l, 2486635491l, 2549611832l, 2583414993l, 2609610079l, 2645347794l, 2739406806l, 2777675144l, 2863550034l, 2932025630l, 2996827183l, 3002496298l, 3052797875l}));
		map.put("CAGGATACAATGT", new TLongArrayList(new long[]{389800l, 18133124l, 50396734l, 86415487l, 118250186l, 239725355l, 293050486l, 344906263l, 366548296l, 385920329l, 468354005l, 534331226l, 607091319l, 647054570l, 736859334l, 739212701l, 755687091l, 833782395l, 838474243l, 908984028l, 917041265l, 927489986l, 960469728l, 1022746612l, 1024603227l, 1050170086l, 1062443052l, 1076079694l, 1233515928l, 1365140012l, 1449477711l, 1477942377l, 1644194660l, 1698788610l, 1715539138l, 1758843011l, 1801857099l, 1855997604l, 1894093763l, 1936967093l, 2113786901l, 2123195720l, 2189461041l, 2233152622l, 2259648264l, 2343581714l, 2409723667l, 2506444245l, 2549611833l, 2584721015l, 2609610080l, 2737852762l, 2876956486l, 2931407956l, 2932025631l, 2932810617l, 2936029983l, 2963537975l, 2964149820l, 2986564931l, 2996827184l, 3002496299l}));
		map.put("AGGATACAATGTC", new TLongArrayList(new long[]{18133125l, 21206830l, 50396735l, 96914869l, 202885257l, 227554258l, 237641357l, 241539659l, 344906264l, 468354006l, 497841111l, 570703664l, 647054571l, 730637206l, 755687092l, 941427503l, 979549404l, 1015414880l, 1019991054l, 1022746613l, 1024603228l, 1087159478l, 1108053418l, 1137180666l, 1523831792l, 1564474050l, 1644194661l, 1698788611l, 1755981233l, 1758843012l, 1765092294l, 1801857100l, 1813142961l, 1855997605l, 1899436318l, 1918182109l, 2367171108l, 2374183733l, 2506444246l, 2591408314l, 2600749575l, 2931407957l, 2936029984l, 3002496300l}));
		map.put("GGATACAATGTCT", new TLongArrayList(new long[]{96914870l, 118331066l, 185573831l, 227554259l, 241539660l, 275100126l, 383840938l, 430797104l, 468354007l, 508621408l, 619218895l, 647054572l, 703028864l, 755687093l, 757100552l, 876297779l, 1024603229l, 1087159479l, 1171139483l, 1426344648l, 1707243300l, 1767470977l, 1775137578l, 1801857101l, 1872537909l, 1918182110l, 1973423572l, 2115581417l, 2275642540l, 2367171109l, 2739764997l, 2883461373l, 3038681933l}));
		map.put("GATACAATGTCTC", new TLongArrayList(new long[]{262007740l, 430797105l, 468354008l, 654349488l, 723113108l, 759725152l, 778818612l, 843526200l, 940674552l, 973014924l, 1029273223l, 1052946432l, 1149026241l, 1477842088l, 1531431005l, 1640791048l, 1726483249l, 1872537910l, 1980720860l, 1989867270l, 1999969207l, 2003612659l, 2115581418l, 2165147613l, 2174654918l, 2275642541l, 2994285765l, 3031695923l, 3045862320l}));
		map.put("ATACAATGTCTCT", new TLongArrayList(new long[]{100211756l, 195138063l, 218964800l, 238739300l, 326684780l, 333366449l, 411168891l, 449326952l, 468354009l, 575812985l, 651206615l, 718537434l, 723113109l, 733712469l, 755210479l, 818556765l, 843526201l, 925749374l, 1029273224l, 1052946433l, 1062695904l, 1073233673l, 1137574385l, 1149026242l, 1159085906l, 1180921205l, 1232120384l, 1321906850l, 1356768919l, 1397153330l, 1397153390l, 1463922960l, 1483527410l, 1527549072l, 1616148930l, 1640791049l, 1726483250l, 1769111370l, 1798069319l, 1809390062l, 1861991038l, 1933012709l, 1989867271l, 1999969208l, 2003612660l, 2056349494l, 2082863540l, 2115581419l, 2153400320l, 2154150582l, 2156032511l, 2174654919l, 2244205145l, 2282691862l, 2284423538l, 2286921613l, 2387205220l, 2482038985l, 2729626496l, 2756104076l, 2756903734l, 2865024443l, 2895419022l, 2897464117l, 2900849035l, 2911161646l, 2915271185l, 2935266313l, 2946315551l, 2955792511l, 2976732451l, 2982025145l, 2986626235l, 2994285766l, 3007042705l, 3031695924l, 3031729576l, 3035859366l, 3100796161l}));
		map.put("TACAATGTCTCTT", new TLongArrayList(new long[]{7807029l, 98890556l, 186259306l, 190250969l, 195138064l, 291099589l, 318801151l, 326684781l, 377016402l, 426959229l, 460334627l, 468354010l, 575812986l, 629515561l, 644092118l, 723113110l, 778970070l, 843526202l, 953508248l, 953613863l, 1011825035l, 1109020073l, 1128033946l, 1136228197l, 1149026243l, 1180921206l, 1233092320l, 1324828493l, 1409013135l, 1420440302l, 1496010205l, 1513078466l, 1527549073l, 1620959917l, 1640264834l, 1656111643l, 1703701233l, 1809390063l, 1838187263l, 1902891762l, 1933012710l, 1970871014l, 1996477016l, 2056349495l, 2115581420l, 2156032512l, 2222428464l, 2286921614l, 2330487066l, 2334997121l, 2340107561l, 2347468132l, 2468748061l, 2482038986l, 2642906355l, 2650247902l, 2701025074l, 2724484740l, 2733681679l, 2856251879l, 2895419023l, 2911161647l, 2935266314l, 2968569410l, 2994285767l, 3030396126l}));
		map.put("ACAATGTCTCTTT", new TLongArrayList(new long[]{7807030l, 73436516l, 81854957l, 83783410l, 158604786l, 163274427l, 181114388l, 270280819l, 278878583l, 280578022l, 290007875l, 308548115l, 318801152l, 402128763l, 404982273l, 408622781l, 417519327l, 426959230l, 460334628l, 468354011l, 473523638l, 487654369l, 511834938l, 575812987l, 614617834l, 643896032l, 657752799l, 662350755l, 684599742l, 697787776l, 701609907l, 710614029l, 729581892l, 735929915l, 778970071l, 782068302l, 814637932l, 876960346l, 880417722l, 895380778l, 910447827l, 953508249l, 974717179l, 998623790l, 1062971963l, 1134328901l, 1149026244l, 1163100912l, 1166558672l, 1233092321l, 1234860796l, 1310069345l, 1324828494l, 1333267507l, 1361436479l, 1371420327l, 1372180899l, 1389626953l, 1395624733l, 1441634842l, 1523691390l, 1527549074l, 1533254286l, 1564487624l, 1574475399l, 1575864274l, 1615541079l, 1615680206l, 1620959918l, 1640264835l, 1653719337l, 1656319431l, 1674415149l, 1703701234l, 1707414102l, 1790407673l, 1802091970l, 1811496055l, 1846274351l, 1857442623l, 1902891763l, 1926360237l, 1933012711l, 1939103951l, 1945099063l, 1970871015l, 1974386099l, 1989978941l, 2056349496l, 2057274519l, 2107090153l, 2115581421l, 2156032513l, 2192928201l, 2347468133l, 2357425873l, 2391830666l, 2398515351l, 2419227732l, 2468748062l, 2482038987l, 2501370143l, 2534189961l, 2561018160l, 2600710162l, 2619216344l, 2630754497l, 2650247903l, 2660661946l, 2688006325l, 2706064031l, 2717683980l, 2720054247l, 2770164836l, 2856251880l, 2877368440l, 2895419024l, 2910503802l, 2911161648l, 2955367041l, 2994285768l, 3027454423l, 3029253647l, 3033214716l}));
		map.put("CAATGTCTCTTTG", new TLongArrayList(new long[]{19795573l, 70597483l, 74614989l, 78650733l, 109003295l, 170330569l, 218830555l, 269231107l, 308548116l, 360416389l, 364886123l, 388145045l, 468354012l, 473523639l, 488837561l, 489262153l, 513310520l, 521864043l, 614617835l, 655689196l, 684599743l, 807975982l, 814637933l, 913438267l, 923879691l, 1062971964l, 1163100913l, 1189439539l, 1199169712l, 1199289867l, 1201038883l, 1223457217l, 1266499770l, 1324623145l, 1333267508l, 1356003959l, 1365052249l, 1406198040l, 1406814316l, 1495784242l, 1523691391l, 1545068913l, 1615157337l, 1633582289l, 1640542524l, 1674116011l, 1697114315l, 1734625907l, 1800037875l, 1811496056l, 1832905711l, 1846274352l, 1879018422l, 1903510832l, 1945099064l, 1970871016l, 1974386100l, 1992385384l, 2019801012l, 2035217380l, 2056349497l, 2057274520l, 2068356100l, 2123892280l, 2241655300l, 2282909230l, 2419227733l, 2468748063l, 2493156110l, 2591892970l, 2630754498l, 2636357482l, 2654624860l, 2688006326l, 2706064032l, 2717683981l, 2725089227l, 2757367466l, 2856251881l, 2877368441l, 2885741698l, 2908998341l, 2910503803l, 2911161649l, 2939126956l, 2955367042l, 2983279954l, 2994285769l, 3024302635l}));
		map.put("AATGTCTCTTTGC", new TLongArrayList(new long[]{50573583l, 61826562l, 112452059l, 113674597l, 152574341l, 152923792l, 163379721l, 209499435l, 218830556l, 218980095l, 269231108l, 387253467l, 415173381l, 446320237l, 450114984l, 468354013l, 517618016l, 528838967l, 533100427l, 614617836l, 625783339l, 661341799l, 712203083l, 720411718l, 744689658l, 770892383l, 800627763l, 895495888l, 987100204l, 988006195l, 988718860l, 995971018l, 1075356616l, 1078320974l, 1108370995l, 1116724266l, 1175240880l, 1176888597l, 1189439540l, 1242001413l, 1266499771l, 1282966830l, 1284127859l, 1291470798l, 1321091476l, 1361232866l, 1365762076l, 1365930195l, 1372180472l, 1408467772l, 1439860544l, 1439999351l, 1440005813l, 1440065793l, 1440068270l, 1440075541l, 1440168881l, 1440183103l, 1440199259l, 1475403383l, 1476599641l, 1487330603l, 1508056407l, 1516103065l, 1612353595l, 1619405399l, 1640542525l, 1660959593l, 1699637545l, 1722887142l, 1773712936l, 1844961688l, 1846274353l, 1865983560l, 1866541666l, 1867010481l, 1882321128l, 1908579005l, 1945099065l, 1957550423l, 1974386101l, 1988832489l, 2051235701l, 2057274521l, 2153634338l, 2155186419l, 2177005870l, 2180248500l, 2191808239l, 2224168952l, 2244900730l, 2263984133l, 2303132878l, 2350833893l, 2371802482l, 2433620262l, 2434729544l, 2457895971l, 2493156111l, 2514244389l, 2522331995l, 2591892971l, 2650414252l, 2683848265l, 2683879380l, 2687659401l, 2706064033l, 2717683982l, 2725270912l, 2744521685l, 2797641651l, 2803292193l, 2804990421l, 2877368442l, 2911161650l, 2939435655l, 2939442237l, 2942960065l, 2943046109l, 2956651358l, 2979031813l, 3017960816l, 3054314038l, 3056112907l}));
		map.put("ATGTCTCTTTGCT", new TLongArrayList(new long[]{42045485l, 61826563l, 63799098l, 71206117l, 93796015l, 108795654l, 112452060l, 113674598l, 152923793l, 155092494l, 176295341l, 209499436l, 209554138l, 210778744l, 215153533l, 218830557l, 232307458l, 240587372l, 258262939l, 259874321l, 329435088l, 414514381l, 414590830l, 468354014l, 494687845l, 494817322l, 533100428l, 544269184l, 556895488l, 605425401l, 610577000l, 626953408l, 649543305l, 665962072l, 682457872l, 722437323l, 782379262l, 884927067l, 954829283l, 1048924509l, 1049063455l, 1075356617l, 1077199598l, 1078320975l, 1104081474l, 1116724267l, 1154371306l, 1154630895l, 1175240881l, 1189439541l, 1191631918l, 1250307306l, 1261364921l, 1266499772l, 1321091477l, 1328418992l, 1332977270l, 1356605162l, 1360597282l, 1365762077l, 1380898988l, 1408467773l, 1451528515l, 1469449888l, 1581430131l, 1607478732l, 1612353596l, 1632411540l, 1747719113l, 1773712937l, 1795185564l, 1807389967l, 1839958103l, 1846274354l, 1848062115l, 1851909393l, 1855103758l, 1911183821l, 1930967530l, 1944332396l, 1955948658l, 1975382164l, 1997304952l, 2051235702l, 2056246740l, 2057274522l, 2148695010l, 2153634339l, 2189168852l, 2267813696l, 2275930086l, 2300511038l, 2408701686l, 2434729545l, 2457895972l, 2493156112l, 2514244390l, 2535894442l, 2574198865l, 2624315052l, 2645400920l, 2650414253l, 2706064034l, 2725769530l, 2755568701l, 2792216714l, 2804990422l, 2810282225l, 2817908166l, 2864275271l, 2946051745l, 2953342508l, 2956651359l, 3033062108l, 3101591255l}));
		map.put("TGTCTCTTTGCTA", new TLongArrayList(new long[]{70609279l, 71206118l, 93796016l, 191943698l, 215153534l, 253091814l, 280424184l, 364910529l, 440256361l, 446734835l, 446757578l, 468354015l, 491686046l, 520344921l, 552281563l, 555462962l, 568912734l, 588579831l, 591172171l, 623342528l, 638735478l, 658496106l, 668093099l, 693147553l, 726265186l, 736988006l, 759608997l, 760170063l, 773248546l, 788379025l, 796738435l, 833527605l, 854333588l, 868712786l, 942500553l, 949347112l, 969663370l, 971157830l, 1078320976l, 1153499763l, 1154630896l, 1180730290l, 1191631919l, 1211192239l, 1230696554l, 1233294478l, 1248750532l, 1266499773l, 1332665280l, 1355438516l, 1356605163l, 1406145513l, 1408635347l, 1451528516l, 1469449889l, 1484821030l, 1541785701l, 1674722136l, 1679757745l, 1681129477l, 1701281320l, 1728157847l, 1728666175l, 1748938140l, 1772371435l, 1846274355l, 1850843665l, 1851909394l, 1855103759l, 1858433832l, 1877307331l, 1899255868l, 1918477356l, 1930157257l, 1944332397l, 1945460948l, 1954479537l, 1955948659l, 1977485920l, 1981471095l, 2057274523l, 2128688657l, 2146273118l, 2148695011l, 2181541278l, 2189168853l, 2250113810l, 2255723324l, 2267813697l, 2281227120l, 2288184629l, 2296770398l, 2345436088l, 2353745872l, 2396478173l, 2457895973l, 2514244391l, 2582664685l, 2594720036l, 2609156129l, 2630830691l, 2636422775l, 2690159288l, 2735503123l, 2761291207l, 2776926026l, 2808096705l, 2821240953l, 2864275272l, 3008078878l, 3025424922l, 3033062109l}));
		map.put("GTCTCTTTGCTAT", new TLongArrayList(new long[]{41516014l, 71206119l, 83580022l, 99327436l, 218251813l, 240702592l, 244823046l, 300293248l, 310817806l, 446734836l, 468354016l, 510276736l, 555462963l, 733445529l, 733985341l, 736151145l, 788379026l, 817242049l, 828084471l, 854333589l, 971157831l, 1040352702l, 1145072705l, 1153499764l, 1184736011l, 1208385732l, 1211192240l, 1301699835l, 1316546328l, 1356605164l, 1453220817l, 1484821031l, 1500430454l, 1523924640l, 1662625604l, 1693864677l, 1701281321l, 1728157848l, 1728666176l, 1748938141l, 1762754736l, 1846274356l, 1877307332l, 1944332398l, 1977485921l, 1996191697l, 2006180203l, 2016970410l, 2128688658l, 2148695012l, 2189168854l, 2193220711l, 2237709850l, 2250113811l, 2267813698l, 2275964541l, 2303643351l, 2353745873l, 2497051865l, 2573224228l, 2594720037l, 2690159289l, 2761291208l, 2808096706l, 2915345837l, 2958273537l, 2967598445l, 2974817625l, 3030607901l}));
		map.put("TCTCTTTGCTATA", new TLongArrayList(new long[]{27373686l, 59705176l, 83580023l, 89145282l, 99675910l, 156155584l, 157553589l, 212805789l, 218251814l, 253188880l, 314894768l, 358493462l, 392374795l, 409999734l, 422617755l, 468354017l, 486014649l, 539862183l, 548660486l, 555462964l, 602916567l, 661893440l, 692902920l, 697497049l, 723991230l, 733445530l, 733985342l, 756421630l, 759165773l, 767464559l, 771319120l, 785803943l, 795150439l, 811602411l, 826277135l, 837581678l, 854333590l, 861668463l, 884113203l, 917842715l, 924086917l, 971157832l, 1013388266l, 1040352703l, 1041697379l, 1043125944l, 1076301802l, 1111438204l, 1173734093l, 1184736012l, 1187191568l, 1190090603l, 1195236910l, 1203346806l, 1208934353l, 1271216583l, 1316614169l, 1324899762l, 1328183439l, 1355465726l, 1376422648l, 1409392049l, 1412488367l, 1441894579l, 1453220818l, 1468438250l, 1478719887l, 1552318993l, 1552357781l, 1571534948l, 1622326153l, 1642920422l, 1647881232l, 1651350937l, 1690712240l, 1704307859l, 1728157849l, 1728666177l, 1748938142l, 1751524726l, 1762754737l, 1846274357l, 1848054974l, 1873915589l, 1882191397l, 1927253134l, 1971877218l, 2023840490l, 2046389057l, 2048934734l, 2051609154l, 2053323032l, 2053652713l, 2112950855l, 2142042087l, 2156368415l, 2156850666l, 2176277117l, 2193220712l, 2193690508l, 2229450791l, 2303643352l, 2341174700l, 2403264812l, 2416192105l, 2420062517l, 2547555899l, 2550564789l, 2582311869l, 2619365373l, 2621194358l, 2637719413l, 2654343090l, 2798655633l, 2820870045l, 2888396969l, 2949778950l, 2953999176l, 2967598446l, 2974817626l, 3014491539l, 3017000694l}));
		map.put("CTCTTTGCTATAT", new TLongArrayList(new long[]{43963442l, 88324621l, 157553590l, 172256726l, 174517402l, 195575200l, 253154349l, 337311638l, 356262675l, 360514295l, 362368870l, 392374796l, 444895054l, 444977247l, 468354018l, 670798275l, 702874457l, 706186078l, 712148196l, 723991231l, 725516684l, 756421631l, 759165774l, 767464560l, 785803944l, 811602412l, 829197873l, 845459710l, 854333591l, 868334127l, 924086918l, 989335313l, 1013388267l, 1050626323l, 1072201332l, 1151403310l, 1161997097l, 1190090604l, 1195236911l, 1204702818l, 1220920126l, 1246856175l, 1271216584l, 1271275665l, 1324899763l, 1346511908l, 1412488368l, 1441894580l, 1493848667l, 1521521278l, 1528826480l, 1550475388l, 1559949798l, 1622326154l, 1642920423l, 1643568015l, 1704307860l, 1762754738l, 1828395556l, 1839650176l, 1853153230l, 1882191398l, 1904154255l, 1971877219l, 2023724043l, 2038831886l, 2053323033l, 2058610601l, 2122033715l, 2128690010l, 2377395379l, 2409761050l, 2458128237l, 2522328242l, 2609029915l, 2619365374l, 2621194359l, 2637719414l, 2678845803l, 2681173203l, 2682483947l, 2725073375l, 2798655634l, 2820870046l, 2855379911l, 2855628746l, 2891606575l, 2967598447l}));
		map.put("TCTTTGCTATATG", new TLongArrayList(new long[]{22073359l, 47153298l, 85575706l, 101624964l, 166233523l, 176906787l, 195575201l, 245221569l, 278732243l, 287945880l, 453607663l, 460891930l, 468354019l, 533255773l, 642733996l, 652816763l, 654726449l, 660586815l, 675612559l, 697187741l, 712148197l, 785405379l, 813613369l, 819903085l, 854333592l, 871473952l, 876658746l, 896576894l, 924086919l, 989335314l, 997363170l, 999262129l, 1001521898l, 1153710730l, 1161997098l, 1207382540l, 1220920127l, 1250972082l, 1271216585l, 1303077348l, 1336019567l, 1378727881l, 1432450726l, 1448391520l, 1493848668l, 1528826481l, 1530934609l, 1549553639l, 1550475389l, 1555252262l, 1648686901l, 1668263659l, 1756401543l, 1828395557l, 1904154256l, 1916085834l, 2014257153l, 2024686362l, 2141465756l, 2152386967l, 2236570228l, 2246829179l, 2270754585l, 2272622572l, 2387090545l, 2387090904l, 2433969484l, 2470306473l, 2619365375l, 2679277673l, 2697504754l, 2737422843l, 2870374822l, 2885105367l, 2895025289l, 2901068332l, 2938945542l, 2950145372l, 3017656212l, 3030915906l}));
		map.put("CTTTGCTATATGA", new TLongArrayList(new long[]{37693671l, 47153299l, 64931808l, 73899995l, 103045777l, 245221570l, 278732244l, 293164342l, 313662066l, 434555849l, 453607664l, 454125463l, 468354020l, 562887761l, 617302136l, 659199143l, 675612560l, 716846160l, 744017008l, 758449495l, 794156938l, 801360052l, 850835373l, 854333593l, 871473953l, 876658747l, 918456228l, 924086920l, 967797882l, 967797900l, 989335315l, 999262130l, 1009280173l, 1041097576l, 1207382541l, 1271216586l, 1481911607l, 1501192383l, 1510239930l, 1550475390l, 1552258854l, 1725037721l, 1748686135l, 1796260304l, 1881825866l, 1889941577l, 1916156817l, 1964125294l, 1992539916l, 1992864453l, 2158676251l, 2183037850l, 2228353801l, 2241972839l, 2346214956l, 2520236161l, 2536524330l, 2737422844l, 2870374823l, 2887478270l, 2895025290l, 2901068333l, 2906241645l, 2923168318l, 2938945543l, 2943172923l, 2963204179l, 2963286021l, 2977961046l, 2989274269l, 3010097624l, 3022270358l}));
		map.put("TTTGCTATATGAC", new TLongArrayList(new long[]{58515324l, 64931809l, 80285021l, 81329357l, 87854622l, 158406174l, 209904009l, 264327955l, 268056239l, 301294427l, 313662067l, 353751729l, 373413057l, 430080153l, 468354021l, 513875160l, 565149426l, 575963430l, 624381603l, 672432063l, 710869240l, 746171677l, 747159844l, 749185267l, 755892587l, 791941438l, 794156939l, 802055106l, 805167476l, 819619765l, 869454356l, 886910881l, 918456229l, 919081684l, 967483771l, 1009280174l, 1041956075l, 1186876214l, 1189358221l, 1243058439l, 1362431582l, 1427167869l, 1481911608l, 1488475226l, 1516298736l, 1519249320l, 1725210369l, 1748686136l, 1826034232l, 1881825867l, 1889941578l, 1982756952l, 1992539917l, 2044044374l, 2158676252l, 2164965866l, 2229114488l, 2246529992l, 2331564337l, 2360539714l, 2435541624l, 2649087359l, 2739725691l, 2811706966l, 2893222750l, 2912998316l, 2923168319l, 2938945544l, 2963355002l, 3010097625l, 3014281811l, 3014790039l, 3022270359l}));
		map.put("TTGCTATATGACC", new TLongArrayList(new long[]{58515325l, 100410189l, 241310765l, 264749385l, 268056240l, 301294428l, 313434402l, 313662068l, 353719773l, 359639357l, 441262467l, 442616923l, 468354022l, 501380959l, 565409552l, 624381604l, 672432064l, 746171678l, 755892588l, 779449921l, 886157394l, 892089897l, 966735686l, 1006025767l, 1009280175l, 1013687961l, 1041956076l, 1052321175l, 1099338601l, 1266552430l, 1411692740l, 1619579652l, 1633059691l, 1725210370l, 1738614762l, 1759028305l, 1760383695l, 1826034233l, 1860674537l, 1981432649l, 1982756953l, 1983682280l, 2031377788l, 2031377825l, 2044044375l, 2140624983l, 2147890062l, 2158676253l, 2229114489l, 2246529993l, 2255906359l, 2301977954l, 2435541625l, 2513525033l, 2649087360l, 2749210062l, 2923570736l, 2925311317l, 2928978689l, 3014047651l, 3022270360l}));
		map.put("TGCTATATGACCT", new TLongArrayList(new long[]{43902646l, 55622367l, 58515326l, 86420143l, 94670103l, 147110993l, 158136318l, 241310766l, 268056241l, 279388393l, 282219453l, 301294429l, 313434403l, 313662069l, 331137402l, 359639358l, 468354023l, 498752891l, 501380960l, 520492331l, 559203487l, 565409553l, 598073775l, 616474631l, 672432065l, 706651613l, 755892589l, 781104650l, 828233233l, 966735687l, 998204812l, 1013687962l, 1041956077l, 1097695612l, 1099338602l, 1129524985l, 1157779290l, 1201827964l, 1266552431l, 1278961296l, 1411692741l, 1431516153l, 1507126464l, 1633059692l, 1651687270l, 1680958172l, 1725210371l, 1738614763l, 1760383696l, 1825949696l, 1826034234l, 1845107263l, 1860674538l, 2051196350l, 2113492709l, 2116422425l, 2140624984l, 2143284247l, 2143363147l, 2167733236l, 2255906360l, 2362985197l, 2435541626l, 2479736717l, 2620748945l, 2649087361l, 2923570737l, 3022270361l}));
		map.put("GCTATATGACCTT", new TLongArrayList(new long[]{22616872l, 27770210l, 39590998l, 55622368l, 58090007l, 58515327l, 61012353l, 63564328l, 84203828l, 91871140l, 94670104l, 114337880l, 144052054l, 147110994l, 154079528l, 158136319l, 174636572l, 199798521l, 206514764l, 212025510l, 212381436l, 213678784l, 215628211l, 217853570l, 241310767l, 253658704l, 268056242l, 301294430l, 308594740l, 313662070l, 315624399l, 317764574l, 320371296l, 331137403l, 349485176l, 369473115l, 373990403l, 468354024l, 469258879l, 501380961l, 520492332l, 524360645l, 533289862l, 538366943l, 548045266l, 565409554l, 598073776l, 668577361l, 672432066l, 680726835l, 690944039l, 695295214l, 706651614l, 709682625l, 713475078l, 714419019l, 728103371l, 735617570l, 744004511l, 748458684l, 755892590l, 790993005l, 805957700l, 816812655l, 819719757l, 827921014l, 828233234l, 829962275l, 843408376l, 865467491l, 867400672l, 912512484l, 998204813l, 1013687963l, 1034642937l, 1041956078l, 1050733878l, 1086667056l, 1091400172l, 1111471976l, 1117575258l, 1129524986l, 1147081247l, 1158435540l, 1163999355l, 1168718912l, 1259366627l, 1260023258l, 1262212430l, 1267131927l, 1278961297l, 1303401994l, 1310859019l, 1330374334l, 1354260638l, 1384438187l, 1417362146l, 1432640656l, 1464772902l, 1498292978l, 1507423230l, 1546598665l, 1637315654l, 1651687271l, 1661675278l, 1665108900l, 1717656640l, 1725210372l, 1752900716l, 1760383697l, 1788135586l, 1795870014l, 1822125559l, 1825949697l, 1826034235l, 1833457461l, 1835543167l, 1845587735l, 1845957581l, 1856346566l, 1889076805l, 1895572135l, 1896588744l, 1902349771l, 1917499248l, 1930177018l, 1931498178l, 1938768035l, 1940952187l, 1945018091l, 1996221092l, 2028753276l, 2041012751l, 2048687188l, 2056216078l, 2057993950l, 2059555342l, 2113492710l, 2116422426l, 2117597182l, 2143363148l, 2167733237l, 2186978352l, 2255906361l, 2271153206l, 2276070861l, 2278900310l, 2292226352l, 2295853283l, 2374803253l, 2383585936l, 2402417690l, 2438751388l, 2460969456l, 2479736718l, 2505987016l, 2622063894l, 2649087362l, 2667924214l, 2720935405l, 2749940449l, 2758285447l, 2821595412l, 2864824691l, 2914107199l, 2919246556l, 2923570738l, 2925466694l, 2949488102l, 2958219423l, 2977356486l, 2980996994l, 3008866538l, 3013353298l, 3022270362l, 3022484106l, 3051119932l}));		 
		map.put("CTATATGACCTTG", new TLongArrayList(new long[]{22616873l, 31821073l, 39590999l, 58515328l, 58651502l, 61012354l, 63564329l, 81822092l, 84203829l, 91048597l, 91871141l, 114337881l, 120492848l, 144052055l, 147110995l, 174636573l, 206514765l, 212025511l, 212381437l, 213678785l, 215628212l, 221046378l, 224595017l, 226585788l, 241310768l, 253658705l, 268056243l, 268604270l, 295535478l, 303180142l, 308594741l, 313662071l, 317764575l, 320371297l, 325054728l, 331379815l, 369473116l, 373990404l, 377240012l, 445154764l, 468354025l, 478899051l, 501380962l, 506723878l, 533289863l, 538366944l, 553573688l, 565409555l, 601313184l, 607455223l, 632417699l, 636989806l, 637547197l, 651150062l, 678482144l, 680726836l, 695295215l, 706651615l, 709682626l, 713475079l, 714419020l, 735617571l, 744004512l, 746387201l, 748458685l, 755892591l, 759605354l, 775500751l, 790993006l, 819442460l, 819719758l, 827921015l, 829962276l, 851577915l, 865467492l, 973475060l, 1013687964l, 1034642938l, 1050733879l, 1111471977l, 1117575259l, 1126796506l, 1129524987l, 1147444459l, 1169189024l, 1184320829l, 1193764851l, 1219203303l, 1231731179l, 1303401995l, 1310859020l, 1322170864l, 1330374335l, 1354260639l, 1384438188l, 1384868408l, 1413810545l, 1432640657l, 1440333377l, 1464772903l, 1498292979l, 1507423231l, 1530140940l, 1546598666l, 1559590390l, 1561937242l, 1637315655l, 1646206292l, 1661675279l, 1760383698l, 1795870015l, 1833457462l, 1845587736l, 1845957582l, 1850655868l, 1852390607l, 1854583866l, 1856225694l, 1856346567l, 1888772746l, 1889076806l, 1895572136l, 1896588745l, 1899963190l, 1917499249l, 1930177019l, 1938768036l, 1940952188l, 1945018092l, 1960161832l, 1968987101l, 1982865228l, 1996221093l, 2042720478l, 2048687189l, 2059555343l, 2073704429l, 2130741848l, 2145619411l, 2186978353l, 2227243470l, 2255906362l, 2271153207l, 2374803254l, 2379891288l, 2387012893l, 2424438137l, 2427251574l, 2437507803l, 2438751389l, 2460969457l, 2479736719l, 2487127137l, 2505987017l, 2520220398l, 2554647647l, 2555457165l, 2565026994l, 2601464593l, 2617260411l, 2617399624l, 2642173675l, 2649087363l, 2667924215l, 2677177415l, 2700871087l, 2720935406l, 2741761406l, 2749940450l, 2756215946l, 2758285448l, 2821595413l, 2854597004l, 2854957129l, 2914107200l, 2919246557l, 2925466695l, 2949488103l, 2958219424l, 2977356487l, 2980996995l, 3007860726l, 3008866539l, 3013353299l, 3022484107l, 3030451133l}));
		map.put("TATATGACCTTGA", new TLongArrayList(new long[]{24079753l, 31821074l, 58515329l, 61012355l, 63564330l, 120492849l, 163345541l, 221046379l, 253658706l, 259267489l, 268056244l, 269261455l, 276797846l, 297651976l, 303180143l, 308594742l, 313662072l, 357365739l, 369473117l, 401923670l, 407014186l, 415327071l, 445154765l, 447375330l, 468354026l, 469793909l, 478899052l, 601313185l, 624503703l, 636989807l, 651150063l, 667101195l, 680726837l, 703123324l, 709964538l, 730628849l, 731955840l, 735617572l, 755892592l, 775500752l, 788059370l, 790993007l, 819442461l, 819719759l, 827921016l, 836087794l, 838758989l, 840029210l, 852389974l, 853516459l, 896564562l, 932382088l, 933124006l, 956374222l, 959091404l, 970147904l, 996019895l, 996902679l, 1010716896l, 1013687965l, 1048372964l, 1050733880l, 1072586817l, 1085817644l, 1087960496l, 1126796507l, 1129524988l, 1133366257l, 1184320830l, 1193764852l, 1243958082l, 1249174917l, 1259679770l, 1285181250l, 1303401996l, 1305745379l, 1322170865l, 1344111485l, 1377591995l, 1440333378l, 1489141655l, 1494612488l, 1495875402l, 1507423232l, 1546598667l, 1561171785l, 1576003453l, 1643810083l, 1644467152l, 1661675280l, 1686106004l, 1737344486l, 1795870016l, 1800184566l, 1828329961l, 1833457463l, 1845957583l, 1856225695l, 1889076807l, 1938768037l, 1940952189l, 1950462271l, 1954721542l, 1960161833l, 1968745802l, 1990284797l, 2000851878l, 2044333913l, 2059555344l, 2145619412l, 2168265728l, 2186978354l, 2192757182l, 2255906363l, 2299907398l, 2385804871l, 2479736720l, 2490757008l, 2533002254l, 2554345212l, 2554647648l, 2601464594l, 2638312665l, 2642173676l, 2642204755l, 2643049664l, 2677177416l, 2681952182l, 2720935407l, 2758285449l, 2800625210l, 2880928458l, 2914107201l, 2919246558l, 2938468424l, 3013353300l, 3059450761l}));
		map.put("ATATGACCTTGAA", new TLongArrayList(new long[]{1712024l, 16759278l, 61012356l, 68928876l, 71807112l, 73158666l, 73893172l, 82576376l, 93593632l, 163345542l, 192138537l, 230680069l, 268056245l, 293993329l, 297651977l, 308594743l, 313662073l, 324867177l, 327256423l, 407014187l, 408453024l, 415327072l, 436518791l, 444612483l, 445154766l, 468354027l, 478899053l, 511917326l, 573644560l, 581030615l, 593587933l, 596684838l, 616093234l, 651150064l, 656091942l, 672865221l, 680726838l, 703123325l, 746802587l, 755892593l, 775500753l, 788284427l, 790993008l, 807910629l, 819442462l, 819858292l, 827921017l, 836087795l, 837102526l, 840029211l, 853516460l, 856868529l, 922234527l, 932382089l, 946815389l, 956882634l, 995978285l, 996902680l, 1026845430l, 1043462158l, 1071093236l, 1075622017l, 1085817645l, 1087960497l, 1091855834l, 1112925258l, 1139252680l, 1184320831l, 1192113255l, 1220278390l, 1229004385l, 1243958083l, 1267166501l, 1285181251l, 1329001271l, 1331297382l, 1335396396l, 1468313555l, 1472995536l, 1507423233l, 1512033731l, 1515039544l, 1569558406l, 1577287012l, 1616144684l, 1634908376l, 1643810084l, 1660595793l, 1712622709l, 1737344487l, 1774314488l, 1820982781l, 1841472779l, 1842019659l, 1856225696l, 1874402092l, 1938768038l, 1950462272l, 1954721543l, 1965232271l, 1979221368l, 2064470923l, 2153617769l, 2187257353l, 2232654256l, 2243069973l, 2299907399l, 2385804872l, 2529645746l, 2533002255l, 2554345213l, 2591814475l, 2601464595l, 2626104993l, 2628271343l, 2642173677l, 2677177417l, 2681952183l, 2692310343l, 2711719474l, 2757626768l, 2769968611l, 2773102172l, 2907631444l, 2914107202l, 2914974425l, 2919246559l, 2970726059l, 2974563953l, 2983027570l, 3032392727l, 3040186614l}));
		map.put("TATGACCTTGAAA", new TLongArrayList(new long[]{73893173l, 192138538l, 248791975l, 252326901l, 268056246l, 274185344l, 293993330l, 308661942l, 325554206l, 392199184l, 407014188l, 422549362l, 444612484l, 468354028l, 478899054l, 482545369l, 511917327l, 533923714l, 558620132l, 581668801l, 589710480l, 591057284l, 596684839l, 610703826l, 616093235l, 626255237l, 650622030l, 746802588l, 788284428l, 819814814l, 828724642l, 848593825l, 857927630l, 954274662l, 962083962l, 993440085l, 1029340040l, 1087960498l, 1091855835l, 1109635298l, 1175434324l, 1180739078l, 1187329651l, 1188359720l, 1192907062l, 1212651551l, 1220278391l, 1245405183l, 1322761103l, 1336104254l, 1424848958l, 1468313556l, 1507423234l, 1529945549l, 1564703787l, 1569558407l, 1577287013l, 1624288702l, 1643810085l, 1647291085l, 1660595794l, 1730547497l, 1810316476l, 1820982782l, 1841472780l, 1842019660l, 1848383365l, 1853054692l, 1910670417l, 1938768039l, 1945808438l, 1960312031l, 1979221369l, 2010902821l, 2016603364l, 2018264421l, 2064470924l, 2076061780l, 2104275782l, 2132047661l, 2240774273l, 2240911451l, 2243069974l, 2287128209l, 2385804873l, 2556459766l, 2559162295l, 2619256637l, 2628371431l, 2634598165l, 2642173678l, 2672167003l, 2676905198l, 2680776404l, 2711719475l, 2769968612l, 2865739649l, 2876548263l, 2895385149l, 2974563954l, 2974863673l, 3042030590l}));
		map.put("ATGACCTTGAAAA", new TLongArrayList(new long[]{50056945l, 73893174l, 76705772l, 77746115l, 114990501l, 115322563l, 120025811l, 172885042l, 211747798l, 219829669l, 230769460l, 232186120l, 246326574l, 248791976l, 251414150l, 258800430l, 293993331l, 308661943l, 319075862l, 322436202l, 322969494l, 325554207l, 334308180l, 337862480l, 363222311l, 371393684l, 374256377l, 391290281l, 392114933l, 394914586l, 407014189l, 411709275l, 413090407l, 468354029l, 477127212l, 511917328l, 522365969l, 525391608l, 525888196l, 548128887l, 551780151l, 558620133l, 574006879l, 581668802l, 591057285l, 591196278l, 608352215l, 610703827l, 616185680l, 617066896l, 626255238l, 650622031l, 699884694l, 710782593l, 733230605l, 736341991l, 738463999l, 743515519l, 749246253l, 755499314l, 767564808l, 770847639l, 788284429l, 806757729l, 819814815l, 828724643l, 843241180l, 867403224l, 874361508l, 954274663l, 957478244l, 972055402l, 995491681l, 997685177l, 1004483531l, 1020054670l, 1025608831l, 1029340041l, 1032941637l, 1036139436l, 1081700675l, 1096317633l, 1107599638l, 1109635299l, 1126600018l, 1156417809l, 1180739079l, 1192907063l, 1192917882l, 1200053401l, 1212651552l, 1220278392l, 1245405184l, 1263046916l, 1282364938l, 1346478822l, 1348979138l, 1353655322l, 1355653319l, 1359111219l, 1386086447l, 1404739975l, 1404986223l, 1417522607l, 1448486053l, 1449885748l, 1471106397l, 1507423235l, 1512065726l, 1533915322l, 1540049740l, 1543231219l, 1562404018l, 1564703788l, 1584716716l, 1585102967l, 1585731381l, 1611672141l, 1623263650l, 1624288703l, 1647291086l, 1660337713l, 1660595795l, 1662900327l, 1715340973l, 1730547498l, 1745383557l, 1764632892l, 1767664220l, 1796726597l, 1809298207l, 1810316477l, 1812882100l, 1820982783l, 1848383366l, 1856134946l, 1876217453l, 1881973927l, 1887463486l, 1896155616l, 1901002120l, 1910670418l, 1917500398l, 1922528337l, 1930858432l, 1938768040l, 1945808439l, 1967431146l, 1976432791l, 1980022355l, 1994070457l, 2013059418l, 2016603365l, 2035903235l, 2061308744l, 2064470925l, 2076061781l, 2142434078l, 2155762412l, 2155786263l, 2157069887l, 2194698157l, 2223005394l, 2225029819l, 2253391203l, 2287128210l, 2338465516l, 2343519863l, 2359208246l, 2385995555l, 2444721770l, 2463517278l, 2475732395l, 2486955703l, 2520072683l, 2544396358l, 2555822457l, 2556459767l, 2559162296l, 2560077487l, 2588407923l, 2619256638l, 2631337724l, 2634598166l, 2647926545l, 2648933128l, 2672167004l, 2676905199l, 2689581507l, 2698843199l, 2732599826l, 2802102747l, 2809153421l, 2818141196l, 2876548264l, 2876649123l, 2886208656l, 2895385150l, 2918794172l, 2919840838l, 2928581848l, 2943106903l, 2949815691l, 2970562900l, 2978802986l, 2999071744l, 3025829433l, 3035188709l, 3040015681l, 3054723461l}));
		map.put("TGACCTTGAAAAT", new TLongArrayList(new long[]{7298409l, 24409815l, 61190673l, 91887660l, 96542649l, 157323584l, 172885043l, 174505044l, 181241272l, 181455751l, 185841121l, 196315726l, 208432156l, 211747799l, 214110593l, 246326575l, 258166344l, 319697071l, 322436203l, 322728767l, 337862481l, 351757046l, 374256378l, 382875869l, 391840462l, 407014190l, 414160437l, 418717038l, 426836280l, 441886296l, 444066976l, 458941007l, 468354030l, 470538520l, 515741057l, 525475142l, 528207455l, 551780152l, 591196279l, 604878775l, 610703828l, 616185681l, 620377387l, 650544434l, 650622032l, 685155425l, 696400447l, 700533568l, 711253836l, 733230606l, 736341992l, 743515520l, 745711995l, 749246254l, 767564809l, 771484582l, 806757730l, 819814816l, 820885801l, 827900409l, 852987027l, 933496045l, 934694847l, 943311507l, 953621434l, 958647110l, 967052225l, 977390884l, 997685178l, 1005341969l, 1010509616l, 1042442781l, 1055246846l, 1056309683l, 1096317634l, 1107599639l, 1139894132l, 1172939922l, 1173258719l, 1180739080l, 1192723468l, 1193928026l, 1245405185l, 1275493748l, 1298282458l, 1298793664l, 1316472926l, 1331413160l, 1344082480l, 1346478823l, 1348979139l, 1355653320l, 1369574983l, 1386086448l, 1387566851l, 1392612820l, 1405965045l, 1448486054l, 1451965353l, 1452458453l, 1484945105l, 1525147361l, 1531457043l, 1564703789l, 1574115501l, 1576016475l, 1584704854l, 1585091106l, 1614605569l, 1624288704l, 1661780030l, 1662900328l, 1718969874l, 1759818168l, 1789019875l, 1791060442l, 1807005647l, 1809298208l, 1838266226l, 1872118992l, 1881973928l, 1896223380l, 1908092487l, 1910670419l, 1910697155l, 1917500399l, 1938768041l, 1945808440l, 1967431147l, 1975596055l, 1976432792l, 1980022356l, 1983217736l, 2014840381l, 2015036220l, 2032221344l, 2061308745l, 2065163605l, 2077017970l, 2107120683l, 2173787244l, 2225029820l, 2226192848l, 2228995116l, 2243610801l, 2253391204l, 2282058634l, 2287128211l, 2343519864l, 2360201617l, 2385995556l, 2436326528l, 2463517279l, 2468463362l, 2476011116l, 2486955704l, 2503551536l, 2567073568l, 2567138521l, 2582206929l, 2589694027l, 2604511677l, 2618146564l, 2620862737l, 2631337725l, 2634598167l, 2646072058l, 2698843200l, 2712869247l, 2735620275l, 2744138545l, 2759349238l, 2761966439l, 2774688701l, 2809153422l, 2827045927l, 2865007016l, 2886208657l, 2894141334l, 2927665310l, 2928581849l, 2943106904l, 2949815692l, 2961926024l, 2973095429l, 2978802987l, 3015509136l, 3026789158l, 3033256814l, 3035188710l, 3035260395l, 3042095632l, 3054723462l}));
		map.put("GACCTTGAAAATC", new TLongArrayList(new long[]{63882256l, 261945490l, 270926866l, 322436204l, 331275977l, 351757047l, 407014191l, 441886297l, 453102745l, 468354031l, 470538521l, 491092355l, 528207456l, 587574244l, 604878776l, 650544435l, 668220517l, 672469425l, 820885802l, 958647111l, 1026905262l, 1107599640l, 1161116705l, 1188709552l, 1212661911l, 1252164564l, 1275493749l, 1316472927l, 1331413161l, 1344082481l, 1367822790l, 1386086449l, 1387566852l, 1397046926l, 1452458454l, 1492263480l, 1541849503l, 1574115502l, 1617272927l, 1629238252l, 1748909254l, 1791060443l, 1804470674l, 1809298209l, 1938768042l, 1952969745l, 1957411626l, 1964304235l, 1975596056l, 2007077227l, 2022453475l, 2052866219l, 2067014554l, 2107120684l, 2225029821l, 2228995117l, 2256896058l, 2282058635l, 2343519865l, 2385995557l, 2486955705l, 2503551537l, 2604511678l, 2618146565l, 2620862738l, 2631337726l, 2744138546l, 2886200593l, 2886208658l, 2896139145l, 2943106905l, 2978802988l, 3051724621l, 3054723463l}));
		map.put("ACCTTGAAAATCT", new TLongArrayList(new long[]{2892505l, 52623884l, 62048576l, 62962808l, 63882257l, 64658715l, 75694425l, 81234633l, 100989130l, 103011372l, 114209888l, 114936676l, 168222107l, 169104687l, 181785974l, 183987775l, 201457490l, 220570974l, 225313062l, 225359207l, 256490377l, 261945491l, 270926867l, 308001461l, 331275978l, 351757048l, 387137297l, 388256892l, 409824298l, 453102746l, 456338048l, 463784940l, 464988356l, 468354032l, 468933181l, 518589665l, 528207457l, 574257071l, 587574245l, 593370985l, 595722358l, 604878777l, 655891273l, 663157068l, 668220518l, 686211255l, 769023199l, 778253283l, 795583446l, 796938243l, 803759853l, 807596551l, 811208809l, 820885803l, 836366446l, 846998266l, 848547407l, 863529793l, 868809993l, 872497151l, 873589472l, 887662141l, 967588905l, 977076954l, 995650220l, 1045951579l, 1076238526l, 1107599641l, 1115172036l, 1115212375l, 1119088536l, 1126353227l, 1166292494l, 1181692462l, 1236629194l, 1252164565l, 1265813306l, 1275320678l, 1316472928l, 1346759515l, 1386086450l, 1397046927l, 1410047604l, 1414094581l, 1420577447l, 1444905495l, 1463377132l, 1501526252l, 1501845650l, 1508351420l, 1508721557l, 1518743504l, 1538426161l, 1541849504l, 1574115503l, 1613618462l, 1629238253l, 1649895107l, 1665925223l, 1675377771l, 1685745541l, 1698613863l, 1699098205l, 1713560303l, 1743246965l, 1748192340l, 1791060444l, 1797977128l, 1811373889l, 1938768043l, 1943032520l, 1966277468l, 1975596057l, 2007077228l, 2055655715l, 2153158660l, 2162428519l, 2162603649l, 2225029822l, 2228995118l, 2253900112l, 2260178107l, 2280579887l, 2290886085l, 2413414365l, 2431607605l, 2432423721l, 2483683815l, 2487284063l, 2500364222l, 2503551538l, 2570880799l, 2590090938l, 2611614424l, 2613470414l, 2618146566l, 2620862739l, 2628084799l, 2651516612l, 2668945107l, 2734598707l, 2753240960l, 2766429766l, 2802443571l, 2861935430l, 2907306737l, 2944928907l, 2970672715l, 2995316977l, 2998227943l, 3021311669l, 3040133246l, 3051724622l, 3059864490l}));
		map.put("CCTTGAAAATCTT", new TLongArrayList(new long[]{10121691l, 39495262l, 40978586l, 63882258l, 96829898l, 100763334l, 114936677l, 117912445l, 166245525l, 169173890l, 181785975l, 220570975l, 257198819l, 261945492l, 304232058l, 308001462l, 335640600l, 396461747l, 397127379l, 402744077l, 409824299l, 449662953l, 453102747l, 455843535l, 463784941l, 464988357l, 468354033l, 468933182l, 470015558l, 515761450l, 528207458l, 573999255l, 579987534l, 587574246l, 590545063l, 595722359l, 612998134l, 655891274l, 666640894l, 688065799l, 702831559l, 724947861l, 726439027l, 732699080l, 767066398l, 796938244l, 803759854l, 828257378l, 846998267l, 848547408l, 849363583l, 858006595l, 872497152l, 931708885l, 956772605l, 958906507l, 967588906l, 1039775981l, 1115172037l, 1115212376l, 1160631490l, 1168020308l, 1181765719l, 1191602686l, 1203464544l, 1211190065l, 1227658717l, 1249237672l, 1252164566l, 1285022415l, 1298197791l, 1298891921l, 1325631788l, 1326377138l, 1332989245l, 1366104611l, 1371025905l, 1376048268l, 1386560965l, 1410047605l, 1411692455l, 1411949404l, 1414094582l, 1420577448l, 1469712635l, 1501845651l, 1508351421l, 1508400699l, 1518061392l, 1542137730l, 1574115504l, 1615833945l, 1619347352l, 1628478492l, 1629238254l, 1685745542l, 1687638877l, 1700066540l, 1748192341l, 1764713419l, 1797977129l, 1850401883l, 1901214084l, 1924824653l, 1933707402l, 1973355162l, 2011276753l, 2019358236l, 2029734748l, 2081817670l, 2151144425l, 2153158661l, 2173430538l, 2173486653l, 2222390662l, 2225029823l, 2247383223l, 2255707222l, 2264212286l, 2290886086l, 2292139428l, 2331215171l, 2342451785l, 2349598601l, 2356019084l, 2356429596l, 2409616657l, 2431607606l, 2432423722l, 2470277710l, 2495947914l, 2503551539l, 2522007153l, 2526813269l, 2559539965l, 2603379866l, 2611614425l, 2618146567l, 2620862740l, 2630903385l, 2646653957l, 2716519515l, 2734598708l, 2753240961l, 2763771894l, 2766429767l, 2802443572l, 2861935431l, 2893020666l, 2898409740l, 2967521687l, 2970672716l, 2989958284l, 3021311670l, 3040133247l, 3051724623l}));
		map.put("CTTGAAAATCTTC", new TLongArrayList(new long[]{62177439l, 67816068l, 72688452l, 80868891l, 84904244l, 96829899l, 100763335l, 106164081l, 174929656l, 183017903l, 192602027l, 254709848l, 257198820l, 272883018l, 281554375l, 286048046l, 334559055l, 346343411l, 366429321l, 374439057l, 404019494l, 408035775l, 423045008l, 443778789l, 455843536l, 464988358l, 468354034l, 473005757l, 546494902l, 655891275l, 666640895l, 706026151l, 723296007l, 743246211l, 767368916l, 793756090l, 803759855l, 858006596l, 872497153l, 926120373l, 956772606l, 969702920l, 1042303810l, 1074000473l, 1107497943l, 1121013969l, 1148866829l, 1156138360l, 1165273601l, 1191397834l, 1191602687l, 1210595382l, 1229008225l, 1313799280l, 1339773428l, 1371025906l, 1378867393l, 1386560966l, 1395271250l, 1458555345l, 1467501376l, 1518061393l, 1557100935l, 1559560414l, 1615833946l, 1622449689l, 1669123585l, 1686847408l, 1686925074l, 1690086726l, 1700066541l, 1708716301l, 1742418414l, 1746104331l, 1762071081l, 1764713420l, 1787931881l, 1797977130l, 1813497686l, 1855427492l, 1856828779l, 1858916284l, 1892406213l, 1898106037l, 1898178244l, 1899174703l, 1932529733l, 1958381453l, 2037280269l, 2108592646l, 2125664877l, 2138514685l, 2151144426l, 2190153107l, 2191839530l, 2237344968l, 2250552671l, 2292139429l, 2331215172l, 2340265099l, 2342451786l, 2365739919l, 2374347341l, 2409616658l, 2424344766l, 2538484266l, 2541368594l, 2546269958l, 2551096985l, 2556829045l, 2577928323l, 2618146568l, 2648710406l, 2691751498l, 2731110323l, 2755374965l, 2893020667l, 2928089127l, 2979703338l, 2989105480l, 3034019695l}));
		map.put("TTGAAAATCTTCC", new TLongArrayList(new long[]{14530639l, 62177440l, 68254341l, 72688453l, 93450819l, 96829900l, 100588768l, 100763336l, 106164082l, 109369869l, 184234140l, 219268661l, 257247978l, 272883019l, 281554376l, 286775770l, 293150407l, 310029748l, 335540781l, 341046419l, 357991189l, 361910621l, 383776759l, 397376082l, 408035776l, 468354035l, 484550917l, 494816604l, 553585739l, 594051618l, 626617277l, 651865407l, 683521638l, 707890168l, 723296008l, 723948555l, 730116939l, 753331795l, 778471126l, 793809800l, 793821310l, 805863569l, 816065698l, 834706093l, 836755945l, 850027001l, 862375173l, 884092736l, 893369553l, 895000021l, 926120374l, 933219738l, 938428098l, 941092959l, 985824978l, 1013680657l, 1027899715l, 1042303811l, 1046947502l, 1092889813l, 1099485421l, 1107497944l, 1108817535l, 1111021709l, 1113530889l, 1154480678l, 1191397835l, 1210595383l, 1247448718l, 1252176024l, 1313158912l, 1378867394l, 1389986093l, 1390175013l, 1467501377l, 1476698084l, 1505325039l, 1518061394l, 1531253626l, 1557100936l, 1567620318l, 1615282374l, 1622449690l, 1641781400l, 1686239442l, 1687006058l, 1694299485l, 1700066542l, 1705574569l, 1742418415l, 1755618050l, 1787931882l, 1809167257l, 1813497687l, 1819888196l, 1834525498l, 1855543713l, 1898098217l, 1898106038l, 1898869934l, 1912818861l, 1958381454l, 1964232170l, 1977280051l, 1981884434l, 2020514413l, 2054753991l, 2076163622l, 2113508726l, 2125375201l, 2138514686l, 2171227195l, 2184797351l, 2190153108l, 2191839531l, 2237344969l, 2250552672l, 2284315822l, 2287400749l, 2289396278l, 2291383394l, 2341512901l, 2368258397l, 2374347342l, 2413941025l, 2416612297l, 2417737622l, 2513218805l, 2548068849l, 2551059135l, 2552362956l, 2561532009l, 2564134361l, 2577928324l, 2578852567l, 2618146569l, 2619800607l, 2632239062l, 2641566528l, 2648710407l, 2668369515l, 2671964882l, 2695947517l, 2696610300l, 2711987503l, 2727288398l, 2893971947l, 2927474807l, 2927850011l, 2929411065l, 2932022057l, 2979703339l, 3027830119l}));
		map.put("TGAAAATCTTCCG", new TLongArrayList(new long[]{184234141l, 184637982l, 468354036l, 593571847l, 883328755l, 1040381578l, 1271884765l, 1615282375l, 1713898378l, 1818373015l, 1898106039l, 2030023248l, 2289396279l, 2348064383l, 2348066105l, 2348067568l}));
		map.put("GAAAATCTTCCGG", new TLongArrayList(new long[]{37759059l, 468354037l, 490546539l, 593571848l, 1271884766l, 1615282376l, 1671757189l, 1713898379l, 2105174288l, 2642941643l, 2904579919l}));		 
		
		Map<Integer, TLongList> map2 = TiledAlignerUtil.getTiles(map, "TTATTAAAGAGGGTGTACGGGAGTTTCTTGGTAAATCCAGAATCAGGATACAATGTCTCTTTGCTATATGACCTTGAAAATCTTCCGG", 13, false);
		List<Integer> keys = new ArrayList<>(map2.keySet());
		keys.sort(null);
		for (int i = keys.size() - 1; i >= 0 ; i--) {
			System.out.println("key: " + keys.get(i) + ", counts: " + Arrays.toString(NumberUtils.splitIntInto2(keys.get(i))) + ", positions: " + map2.get(keys.get(i)).toString());
		}
		assertEquals(6, map2.size());
		assertArrayEquals(new long[] {468349696}, map2.get(NumberUtils.pack2IntsInto1(35, 0)).toArray());
		assertArrayEquals(new long[] {47279468348373l}, map2.get(NumberUtils.pack2IntsInto1(33, 0)).toArray());
		
	}
	
	@Test
	public void getSoCalledInteligentSW() {
		String ref = "CAGCACCTAGGTAATGTAACTCTCTTCTCTTGCCTGGGCCCGGCATAAATTGTGTATTGTGACATGGGGCTCGATCACAAACCTAGGTAATGCTACTCTCTTGCATTGGCTCTGCCCACCAGGGTATTATGACACAACTTTTCATTCATCGCCTAGGCGATGTGACCCCCCGCTTCTGCTTGAATCTTGCCAAAAGAGGAAATGATAACA";
		String seq = "CAGCACCTAGGTAATGTAACTCTCTTCTCTTGCCTGGGCCCGGCATAAATTGTGTATTGTGACATGGGGCTCGATCACAAACCTAGGTAATGCTACTCTCTTGCATTGGCTCTGCCCACCAGGGTATTATGACACAACCAGCACCTAGGTAATGTAACTCTCTTCTCTTGCCTGGGCCCGGCATAAATTG";
		String [] bestSW = TiledAlignerUtil.getIntelligentSwDiffs(ref, seq);
		
		assertEquals(3, bestSW.length);
		assertEquals("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", bestSW[1]);
	}
	
	@Test
	public void getSoCalledInteligentSW2() {
		String ref = "GAAGACTTTCCCATTCATTGATGGATTAATTGACTGGTTGTCCTTCATATCCTGCACTAACCTCTATTACAGCATGGAGAGGTACTTTTGTTTCTCTGTCCCACTGCTACAAC";
		String seq = "ATGGNTTNATTGNCTGGTTGTCCTTCNTATCCTGCACTAACCTCTTTTNCAGCATGGAGCGGTCNTTTTNTTT,";
		String [] bestSW = TiledAlignerUtil.getIntelligentSwDiffs(ref, seq);
		
		assertEquals(3, bestSW.length);
		assertEquals("||||.||.||||.|||||||||||||.||||||||||||||||||.||.||||||||||.|||..||||.|||", bestSW[1]);
	}
	
	@Test
	public void getSoCalledInteligentSW3() {
		String ref = "CATTTAAAATTAATGTTGTTCTGTGTGAATTTGATCCTGTCATCATGATTCTAGCTGGTTATTTTGCAGACTTTTTTATGTGGTTGCTTCATAGTGTTACTGATCTGTGTACTTCAATGTGTTTTGGTAGTGGCTGATAATTGTTTTTCATTTCCATATTTAATGCTTCCTTCAGGAGCTCTTGTAAGGCAGGCCTGGTGGTGATGTATTCCCTCAGCATTTGCTTGTCTGAAAAGGATCTTATTTCTCTTTTGTTTATGAAG";
		String seq = "GAAGGGTGTTCTGTGTGAGGTTGAGGCTGTCGTCATGATGCTAGCTGGTTATTGTGCAGACTTGTTTATGTGGTTGCTTCATAGTGTGACTGATCTGTGTACTTACATGTGTTTTGGTAGTGGCTGATAATTGTTTTTCATTTCCATATTTAATGCTTCCTTCAGGAGCTCTTGTAAGGCAGGCCTGGTTGTGATGTATTCCCTCAGCATTTGCTTGTCTGAAAAGGATCTTATTTCTCTTTTGTTTATGAAG";
		String [] bestSW = TiledAlignerUtil.getIntelligentSwDiffs(ref, seq);
		
		assertEquals(3, bestSW.length);
		assertEquals("||.|.||||||||||||..||||..|||||.|||||||.|||||||||||||.|||||||||.|||||||||||||||||||||||.||||||||||||||||..|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", bestSW[1]);
	}
	
	@Test
	public void getBestStartPositions8() {
		Map	<String, TLongList> map = new HashMap<>();
		map.put("TTATTAAAGAGGG", new TLongArrayList(new long[]{ 468349696l, 468465329l}));
		map.put("TATTAAAGAGGGT", new TLongArrayList(new long[]{ 468349697l, }));
		map.put("ATTAAAGAGGGTG", new TLongArrayList(new long[]{468349698l, 476879994l}));
		map.put("TTAAAGAGGGTGT", new TLongArrayList(new long[]{468349699l}));
		map.put("TAAAGAGGGTGTA", new TLongArrayList(new long[]{468349700l, 474433020l}));
		map.put("AAAGAGGGTGTAC", new TLongArrayList(new long[]{468349701l, 474955810l}));
		map.put("AAGAGGGTGTACG", new TLongArrayList(new long[]{412951324l, 468349702l, 600881863l, 669102997l, 1173339001l }));
		map.put("AGAGGGTGTACGG", new TLongArrayList(new long[]{468349703l, 949919689l, 1100688211l, 1173339002l, 1971729085l}));
		map.put("GAGGGTGTACGGG", new TLongArrayList(new long[]{430806892l, 468349704l, 483562144l, 527480019l, 538881786l,  }));
		map.put("AGGGTGTACGGGA", new TLongArrayList(new long[]{468349705l, 718569128l, 949919691l, 1465841807l, 2563923173l }));
		map.put("GGGTGTACGGGAG", new TLongArrayList(new long[]{468349706l, 468456928l, 518302224l, 718569129l, 1012215599l}));
		map.put("GGTGTACGGGAGT", new TLongArrayList(new long[]{468349707l}));
		map.put("GTGTACGGGAGTT", new TLongArrayList(new long[]{382633241l, 468349708l, 2302263166l, 2669507711l}));
		map.put("TGTACGGGAGTTT", new TLongArrayList(new long[]{165675197l, 195757033l, 468349709l, 819168003l }));
		map.put("GTACGGGAGTTTC", new TLongArrayList(new long[]{468349710l, 2375073053l}));
		map.put("TACGGGAGTTTCT", new TLongArrayList(new long[]{468349711l, 559402306l, 1403796911l, 2375073054l, }));
		map.put("ACGGGAGTTTCTT", new TLongArrayList(new long[]{468349712l}));
		map.put("CGGGAGTTTCTTG", new TLongArrayList(new long[]{468349713l, 535356324l, 2198033423l, 2299777492l, }));
		map.put("GGGAGTTTCTTGG", new TLongArrayList(new long[]{468349714l}));
		map.put("GGAGTTTCTTGGT", new TLongArrayList(new long[]{ 468349715l, 551879994l}));
		map.put("GAGTTTCTTGGTA", new TLongArrayList(new long[]{ 468349716l}));
		map.put("AGTTTCTTGGTAA", new TLongArrayList(new long[]{433458879l, 446785008l, 468349717l, 494243216l}));
		map.put("GTTTCTTGGTAAA", new TLongArrayList(new long[]{433458880l, 443185041l, 468349718l, 624530452l}));
		map.put("TTTCTTGGTAAAT", new TLongArrayList(new long[]{ 407027871l, 409581534l, 419802124l, 443185042l, 461561409l, 468349719l, 487853598l}));		 
		map.put("TTCTTGGTAAATC", new TLongArrayList(new long[]{ 419746101l, 468349720l, 516548824l, 519217773l}));
		map.put("TCTTGGTAAATCC", new TLongArrayList(new long[]{ 429318665l, 468349721l, 503456237l, }));
		map.put("CTTGGTAAATCCA", new TLongArrayList(new long[]{419746103l, 468349722l, 476153903l, 516457133l}));
		map.put("TTGGTAAATCCAG", new TLongArrayList(new long[]{361857773l, 419746104l, 468349723l, 516457134l, 681603336l, 749135912l, 1059432192l, 1166646996l, }));
		map.put("TGGTAAATCCAGA", new TLongArrayList(new long[]{321764029l, 329854941l, 353302906l, 376221812l, 456847670l, 468349724l, 511258514l, 516457135l, 660685009l, 689383656l, 692040517l}));
		map.put("GGTAAATCCAGAA", new TLongArrayList(new long[]{ 403626999l, 414401819l, 456847671l, 468349725l, 516457136l, 547841074l, 689383657l, 802634393l, 803641725l}));
		map.put("GTAAATCCAGAAT", new TLongArrayList(new long[]{468349726l, 481209945l, 516457137l, 541996553l, 547841075l}));
		map.put("TAAATCCAGAATC", new TLongArrayList(new long[]{47226371l, 440805414l, 450321506l, 468349727l, 514348111l, 541996554l, 547841076l, 596605493l, 599027172l, 629439729l, 652498006l, 671475806l, 672735930l, 684566568l, 706281885l, 766574683l}));
		map.put("AAATCCAGAATCA", new TLongArrayList(new long[]{58463424l,  251423126l, 252623228l, 253020929l, 257495940l, 268032852l, 363754626l, 413938427l, 423760846l, 441399943l, 449912867l, 468349728l, 510008571l}));
		map.put("AATCCAGAATCAG", new TLongArrayList(new long[]{392743866l, 448016523l, 457539598l, 468349729l, 509312434l, 589822718l, 594006664l, 602809119l}));
		map.put("ATCCAGAATCAGG", new TLongArrayList(new long[]{ 291683940l, 468349730l, 505808029l, 540927428l}));
		map.put("TCCAGAATCAGGA", new TLongArrayList(new long[]{10827345l, 103399775l, 211446740l, 271266371l, 274063389l, 389817552l, 396781086l, 407436232l}));		 
		map.put("CCAGAATCAGGAT", new TLongArrayList(new long[]{19505994l, 163434370l, 172261067l, 175630132l, 182601354l, 182602452l, 195403318l, 211446741l}));
		map.put("CAGAATCAGGATA", new TLongArrayList(new long[]{19505995l, 61037264l, 113539602l, 163434371l, 198899729l, 218850354l, 461606678l, 505916026l}));
		map.put("AGAATCAGGATAC", new TLongArrayList(new long[]{58115562l, 165524926l, 196607988l, 198899730l, 418840445l, 577922138l, 578105762l, 603032542l}));
		map.put("GAATCAGGATACA", new TLongArrayList(new long[]{12341352l, 165524927l, 170831349l, 198899731l, 418864343l, 421200234l, 521477579l, 577922139l, 605123826l, 610794609l}));
		map.put("AATCAGGATACAA", new TLongArrayList(new long[]{34353035l, 51482545l, 56690490l, 80302984l, 170831350l, 212876404l, 217329695l, 218054786l}));
		map.put("ATCAGGATACAAT", new TLongArrayList(new long[]{213653915l, 256146597l, 390321495l, 546537677l, 567748798l, 573119873l, 675573219l}));
		map.put("TCAGGATACAATG", new TLongArrayList(new long[]{18133123l, 239725354l, 241198392l, 293050485l, 515602712l, 546537678l, 607091318l, 647054569l, 736859333l, 755687090l,}));
		map.put("CAGGATACAATGT", new TLongArrayList(new long[]{ 468354005l, 534331226l, 607091319l, 647054570l, 736859334l, 739212701l, 755687091l}));
		map.put("AGGATACAATGTC", new TLongArrayList(new long[]{468354006l, 497841111l, 570703664l, 647054571l, 730637206l, 755687092l, 941427503l}));
		map.put("GGATACAATGTCT", new TLongArrayList(new long[]{ 383840938l, 430797104l, 468354007l, 508621408l}));
		map.put("GATACAATGTCTC", new TLongArrayList(new long[]{262007740l, 430797105l, 468354008l}));
		map.put("ATACAATGTCTCT", new TLongArrayList(new long[]{468354009l, 575812985l, 651206615l, 718537434l, 723113109l, 733712469l, 755210479l, 818556765l, 843526201l, 925749374l, 1029273224l, 1052946433l, 1062695904l}));
		map.put("TACAATGTCTCTT", new TLongArrayList(new long[]{ 468354010l, 575812986l, 629515561l, 644092118l, 723113110l, 778970070l, 843526202l, 953508248l, 953613863l, 1011825035l, 1109020073l, 1128033946l}));
		map.put("ACAATGTCTCTTT", new TLongArrayList(new long[]{404982273l, 408622781l, 417519327l, 426959230l, 460334628l, 468354011l, 473523638l, 487654369l, 511834938l, 575812987l, 614617834l, 643896032l}));
		map.put("CAATGTCTCTTTG", new TLongArrayList(new long[]{468354012l, 473523639l, 488837561l, 489262153l, 513310520l, 521864043l, 614617835l, 655689196l, 684599743l, 807975982l, 814637933l, 913438267l}));
		map.put("AATGTCTCTTTGC", new TLongArrayList(new long[]{ 468354013l, 517618016l, 528838967l, 533100427l, 614617836l, 625783339l, 661341799l, 712203083l, 720411718l, 744689658l, 770892383l}));
		map.put("ATGTCTCTTTGCT", new TLongArrayList(new long[]{468354014l, 494687845l, 494817322l, 533100428l, 544269184l, 556895488l, 605425401l, 610577000l, 626953408l, 649543305l, 665962072l}));
		map.put("TGTCTCTTTGCTA", new TLongArrayList(new long[]{468354015l}));
		map.put("GTCTCTTTGCTAT", new TLongArrayList(new long[]{ 468354016l, 510276736l, 555462963l, 733445529l, 733985341l, 736151145l, 788379026l, 817242049l, 828084471l, 854333589l, 971157831l, 1040352702l}));
		map.put("TCTCTTTGCTATA", new TLongArrayList(new long[]{ 422617755l, 468354017l, 486014649l, 539862183l, 548660486l, 555462964l, 602916567l, 661893440l, 692902920l, 697497049l}));
		map.put("CTCTTTGCTATAT", new TLongArrayList(new long[]{ 468354018l, 670798275l, 702874457l, 706186078l, 712148196l, 723991231l, 725516684l, 756421631l, 759165774l, 767464560l, 785803944l, 811602412l, 1271216584l}));
		map.put("TCTTTGCTATATG", new TLongArrayList(new long[]{ 468354019l, 533255773l, 642733996l, 652816763l, 654726449l, 660586815l, 675612559l, 697187741l, 712148197l, 785405379l, 813613369l, 819903085l,  1336019567l}));
		map.put("CTTTGCTATATGA", new TLongArrayList(new long[]{ 468354020l, 562887761l, 617302136l, 659199143l, 675612560l, 716846160l, 744017008l, 758449495l, 794156938l, 801360052l, 850835373l, 854333593l, 1009280173l}));
		map.put("TTTGCTATATGAC", new TLongArrayList(new long[]{468354021l}));
		map.put("TTGCTATATGACC", new TLongArrayList(new long[]{ 468354022l}));
		map.put("TGCTATATGACCT", new TLongArrayList(new long[]{468354023l, 498752891l, 501380960l, 520492331l, 559203487l, 565409553l, 598073775l, 616474631l, 672432065l, 706651613l, 755892589l, 781104650l, 828233233l, 966735687l, 998204812l, 1013687962l, 1041956077l}));
		map.put("GCTATATGACCTT", new TLongArrayList(new long[]{468354024l, 469258879l}));		 
		map.put("CTATATGACCTTG", new TLongArrayList(new long[]{ 468354025l, 478899051l, 501380962l, 506723878l, 533289863l, 538366944l, 553573688l, 565409555l, 601313184l, 607455223l, 632417699l, 636989806l, 637547197l, 651150062l, 678482144l, 680726836l, 695295215l}));
		map.put("TATATGACCTTGA", new TLongArrayList(new long[]{468354026l, 469793909l, 478899052l, 601313185l}));
		map.put("ATATGACCTTGAA", new TLongArrayList(new long[]{ 324867177l, 327256423l, 407014187l, 408453024l, 415327072l, 436518791l, 444612483l, 445154766l, 468354027l, 478899053l, 511917326l, 573644560l, 581030615l}));
		map.put("TATGACCTTGAAA", new TLongArrayList(new long[]{444612484l, 468354028l, 478899054l, 482545369l,	2642173678l}));
		map.put("ATGACCTTGAAAA", new TLongArrayList(new long[]{334308180l, 337862480l, 363222311l, 371393684l, 374256377l, 391290281l, 392114933l, 394914586l, 407014189l, 411709275l, 413090407l, 468354029l, 477127212l, 511917328l}));
		map.put("TGACCTTGAAAAT", new TLongArrayList(new long[]{7298409l,322728767l, 337862481l, 351757046l, 414160437l, 418717038l, 426836280l, 441886296l, 444066976l, 458941007l, 468354030l, 470538520l}));
		map.put("GACCTTGAAAATC", new TLongArrayList(new long[]{63882256l, 261945490l, 270926866l, 322436204l, 331275977l, 351757047l, 407014191l, 441886297l, 453102745l, 468354031l, 470538521l,  820885802l, 958647111l}));
		map.put("ACCTTGAAAATCT", new TLongArrayList(new long[]{2892505l, 52623884l, 103011372l, 114209888l, 114936676l, 225313062l, 225359207l, 256490377l, 388256892l, 409824298l, 453102746l, 456338048l, 463784940l, 464988356l, 468354032l, 468933181l, 518589665l}));
		map.put("CCTTGAAAATCTT", new TLongArrayList(new long[]{ 409824299l, 449662953l, 453102747l, 455843535l, 463784941l, 464988357l, 468354033l, 468933182l, 470015558l, 515761450l}));
		map.put("CTTGAAAATCTTC", new TLongArrayList(new long[]{62177439l,174929656l, 183017903l, 192602027l,408035775l, 423045008l, 443778789l, 455843536l, 464988358l, 468354034l, 473005757l, 546494902l, 655891275l, 666640895l, 706026151l, 723296007l, 743246211l}));
		map.put("TTGAAAATCTTCC", new TLongArrayList(new long[]{341046419l, 357991189l, 361910621l, 383776759l, 397376082l, 408035776l, 468354035l, 484550917l, 494816604l, 553585739l, 594051618l}));
		map.put("TGAAAATCTTCCG", new TLongArrayList(new long[]{ 468354036l, 593571847l}));
		map.put("GAAAATCTTCCGG", new TLongArrayList(new long[]{37759059l, 468354037l, 490546539l, 593571848l, 1271884766l, 1615282376l, 1671757189l, 1713898379l, 2105174288l, 2642941643l, 2904579919l}));		 
		
		
		Map<Integer, TLongList> map2 = TiledAlignerUtil.getTiles(map, "TTATTAAAGAGGGTGTACGGGAGTTTCTTGGTAAATCCAGAATCAGGATACAATGTCTCTTTGCTATATGACCTTGAAAATCTTCCGG", 13, false);
		List<Integer> keys = new ArrayList<>(map2.keySet());
		keys.sort(null);
		for (int i = keys.size() - 1; i >= 0 ; i--) {
			System.out.println("key: " + keys.get(i) + ", counts: " + Arrays.toString(NumberUtils.splitIntInto2(keys.get(i))) + ", positions: " + map2.get(keys.get(i)).toString());
		}
		
		assertEquals(2, map2.size());
		assertArrayEquals(new long[] {468349696}, map2.get(NumberUtils.pack2IntsInto1(35, 0)).toArray());
		assertArrayEquals(new long[] {47279468348373l}, map2.get(NumberUtils.pack2IntsInto1(33, 0)).toArray());
	}
	
	
	@Test
	public void getRC() {
		assertEquals("AAA", SequenceUtil.reverseComplement("TTT"));
		assertEquals("ACGT", SequenceUtil.reverseComplement("ACGT"));
		assertEquals("ACGT", SequenceUtil.reverseComplement("ACGT"));
		assertEquals("AAAANACAAAAAA", SequenceUtil.reverseComplement("TTTTTTGTNTTTT"));
		assertEquals("CCAGCTTCTGTAGAAGTTTCTACAGAAACTTAGCAGTTTCTGTAGAAGTTTCTACAG", SequenceUtil.reverseComplement("CTGTAGAAACTTCTACAGAAACTGCTAAGTTTCTGTAGAAACTTCTACAGAAGCTGG"));
		assertEquals("CTTGCTAGGAGGGTAGGGAGTGGATTAAAAGATTGGACCAAAAAACTCATTTTACCCGGGG", SequenceUtil.reverseComplement("CCCCGGGTAAAATGAGTTTTTTGGTCCAATCTTTTAATCCACTCCCTACCCTCCTAGCAAG"));
		assertEquals("CCCCGGGTAAAATGAGTTTTTTATCCACTCCCTACCCTCCTAGCAAG", SequenceUtil.reverseComplement("CTTGCTAGGAGGGTAGGGAGTGGATAAAAAACTCATTTTACCCGGGG"));
		assertEquals("TAGTACCCAGCACTCCTCAATAAATATTAAATGAGTGAATCATTATATTTAACTTGTGTGCCTCTCTAGCCTGTGAACTCTGCAAGTGCAAGGTCCAGGCCTATGTTGTTGTTGTTTGTTCTTCTAATGGCCTAGTACCCAGCACTCCTCAATAAATATTAAATGAGTGAATCAT", SequenceUtil.reverseComplement("ATGATTCACTCATTTAATATTTATTGAGGAGTGCTGGGTACTAGGCCATTAGAAGAACAAACAACAACAACATAGGCCTGGACCTTGCACTTGCAGAGTTCACAGGCTAGAGAGGCACACAAGTTAAATATAATGATTCACTCATTTAATATTTATTGAGGAGTGCTGGGTACTA"));
	}
	
	@Test
	public void getBestStartPosition3() {
		/*
		 * CATGTATCCAAGAACTTAAGAGTATAATAATAATAATA
		 */
		Map<String, TLongList> map = new HashMap<>();
		map.put("CATGTATCCAAGA", new TLongArrayList(new long[] {49573418l, 114656855l, 181950606l, 196080513l, 213879289l, 279169993l, 299667247l, 321725052l, 362134554l, 386712950l, 405883566l, 407516869l, 441225975l, 481210699l, 570699947l, 570755577l, 593344754l, 599182635l, 638265975l, 672501816l, 723110115l, 733963246l, 792300124l, 807853514l, 856030216l, 889201592l, 897418246l, 914686592l, 949793932l, 985001734l, 985003199l, 1118126781l, 1142401591l, 1204759938l, 1210502429l, 1246672292l, 1270950331l, 1340746802l, 1360010668l, 1365361953l, 1377148412l, 1398826245l, 1412117074l, 1416778500l, 1427601710l, 1484427448l, 1519383462l, 1528475515l, 1530265185l, 1535275654l, 1565276148l, 1570275889l, 1659965110l, 1682709834l, 1785560613l, 1790160363l, 1822501345l, 1853670228l, 1857480323l, 1899392928l, 1904605682l, 1935109561l, 1945458663l, 1995902452l, 2157762363l, 2170250678l, 2176684341l, 2187777955l, 2190662125l, 2193177727l, 2266489805l, 2339477441l, 2377290885l, 2403483065l, 2503261869l, 2521121529l, 2563614047l, 2568286387l, 2619231863l, 2627328338l, 2639327722l, 2697569002l, 2703952737l, 2732299192l, 2774027828l, 2810117670l, 2865046880l, 2903924218l, 2929312570l, 2956755988l, 2966899566l, 2969218086l, 2982985928l, 3017633711l, 3100356128l}));
		map.put("ATGTATCCAAGAA" , new TLongArrayList(new long[] {29276805l, 80247690l, 181950607l, 185553130l, 204819017l, 254914066l, 279169994l, 299667248l, 362134555l, 386712951l, 397065377l, 405883567l, 529022716l, 547904492l, 566885346l, 570699948l, 589169453l, 593344755l, 597561146l, 599182636l, 634530089l, 638265976l, 672501817l, 723110116l, 735672592l, 788923293l, 792300125l, 803045803l, 807853515l, 856030217l, 889201593l, 897418247l, 914686593l, 920861833l, 923055867l, 949793933l, 968853012l, 982990509l, 1021276700l, 1060851378l, 1118126782l, 1126186787l, 1131642665l, 1142401592l, 1193258860l, 1195702869l, 1204759939l, 1246672293l, 1246696100l, 1270950332l, 1285035841l, 1317409290l, 1319287480l, 1340746803l, 1360010669l, 1396540590l, 1398826246l, 1416778501l, 1484427449l, 1488279859l, 1519383463l, 1528475516l, 1570275890l, 1574914487l, 1659965111l, 1682709835l, 1735711578l, 1754356399l, 1767879067l, 1773462624l, 1785560614l, 1790160364l, 1822501346l, 1836835357l, 1857480324l, 1904605683l, 1945458664l, 1960983028l, 1961348578l, 1995902453l, 2033123363l, 2080795871l, 2141941358l, 2174209017l, 2177132165l, 2186462332l, 2187748336l, 2187777956l, 2190662126l, 2193683675l, 2222332739l, 2259100116l, 2266489806l, 2281890889l, 2283151981l, 2283743563l, 2285136333l, 2339477442l, 2368957995l, 2372858546l, 2398432895l, 2403483066l, 2503261870l, 2521121530l, 2562293563l, 2563614048l, 2568286388l, 2608211991l, 2627328339l, 2630405956l, 2639327723l, 2732299193l, 2774027829l, 2817770256l, 2865046881l, 2903924219l, 2908758184l, 2910098378l, 2929312571l, 2946991723l, 2956755989l, 2990627548l, 3004650826l, 3100356129l}));
		map.put("TGTATCCAAGAAC" , new TLongArrayList(new long[] {181950608l, 238834251l, 279169995l, 282711716l, 299667249l, 353500754l, 362134556l, 377125374l, 386712952l, 405883568l, 469798165l, 470832976l, 513418182l, 593344756l, 607599727l, 638265977l, 672501818l, 723110117l, 751923328l, 792300126l, 807853516l, 856030218l, 878873098l, 904555301l, 914686594l, 920861834l, 949793934l, 982990510l, 1204759940l, 1270950333l, 1319287481l, 1340746804l, 1360010670l, 1396540591l, 1416778502l, 1495507812l, 1515479714l, 1528475517l, 1570275891l, 1659965112l, 1682709836l, 1857480325l, 1945458665l, 1961348579l, 1975509717l, 1995902454l, 2033123364l, 2069892626l, 2141941359l, 2187777957l, 2222332740l, 2339477443l, 2436334150l, 2503261871l, 2563614049l, 2568286389l, 2608211992l, 2627328340l, 2639327724l, 2757266111l, 2774027830l, 2849144198l, 2865046882l, 2903924220l, 2910098379l, 2956755990l, 3004650827l, 3100356130l}));
		map.put("GTATCCAAGAACT", new TLongArrayList(new long[] {181950609l, 238834252l, 279169996l, 282711717l, 299667250l, 302621969l, 323218777l, 335912469l, 348969288l, 353500755l, 362134557l, 386712953l, 405883569l, 543747672l, 593344757l, 600770663l, 604585673l, 607599728l, 638265978l, 672501819l, 723110118l, 792300127l, 807853517l, 834318731l, 856030219l, 897955193l, 914686595l, 920529323l, 920861835l, 949793935l, 1061512267l, 1085991238l, 1144876888l, 1170249742l, 1204759941l, 1270950334l, 1319287482l, 1340746805l, 1360010671l, 1406152492l, 1416778503l, 1471984708l, 1499103783l, 1528475518l, 1545618905l, 1570275892l, 1646030215l, 1659965113l, 1682709837l, 1857480326l, 1937489962l, 1995902455l, 2033123365l, 2069892627l, 2131066463l, 2141941360l, 2187777958l, 2222332741l, 2255915684l, 2339477444l, 2363786814l, 2503261872l, 2563614050l, 2568286390l, 2596415369l, 2608211993l, 2627328341l, 2639327725l, 2757266112l, 2774027831l, 2811003708l, 2848632295l, 2851438311l, 2865046883l, 2903924221l, 2911246258l, 2954397341l, 2956755991l, 3004650828l, 3005881692l, 3100356131l}));
		map.put("TATCCAAGAACTT", new TLongArrayList(new long[] {49490433l, 181950610l, 204821238l, 222907003l, 238834253l, 246623495l, 279169997l, 282711718l, 299667251l, 302621970l, 348969289l, 353500756l, 362134558l, 386712954l, 392117252l, 405883570l, 426480860l, 428124846l, 475337467l, 497582879l, 543747673l, 576236491l, 593344758l, 607599729l, 638265979l, 640118807l, 672501820l, 718969370l, 723110119l, 723956071l, 792300128l, 807853518l, 829725823l, 856030220l, 861860273l, 866890102l, 911458974l, 914686596l, 920861836l, 949793936l, 1085991239l, 1202167761l, 1204759942l, 1244278268l, 1265734279l, 1270950335l, 1315231368l, 1331117963l, 1340746806l, 1360010672l, 1416778504l, 1431963260l, 1440275137l, 1471984709l, 1485698629l, 1528475519l, 1545618906l, 1571021526l, 1659965114l, 1682709838l, 1857480327l, 1937489963l, 1975093671l, 1993125429l, 1995902456l, 2016684993l, 2030415413l, 2109550766l, 2136230547l, 2141941361l, 2154406720l, 2187777959l, 2222332742l, 2268548671l, 2304532192l, 2327867521l, 2339477445l, 2343549294l, 2388311668l, 2412642830l, 2486148768l, 2489281915l, 2503261873l, 2563614051l, 2568286391l, 2568378271l, 2596415370l, 2601906713l, 2608211994l, 2616880373l, 2627328342l, 2639327726l, 2692121285l, 2728159138l, 2774027832l, 2777577471l, 2811003709l, 2865046884l, 2903924222l, 2954397342l, 2956755992l, 3002134980l, 3005881693l, 3100356132l}));
		map.put("ATCCAAGAACTTA", new TLongArrayList(new long[] {49490434l, 164272699l, 181950611l, 203930611l, 222907004l, 237552832l, 279169998l, 280669704l, 282711719l, 299667252l, 310446600l, 335831010l, 353500757l, 362134559l, 386712955l, 405883571l, 444045150l, 464701841l, 497582880l, 500937798l, 501915061l, 607599730l, 630134723l, 638265980l, 672501821l, 718969371l, 723110120l, 729802188l, 752111898l, 792300129l, 807853519l, 856030221l, 860931064l, 861860274l, 883302703l, 911458975l, 914686597l, 920861837l, 949793937l, 958335879l, 1161442828l, 1168386654l, 1202167762l, 1204759943l, 1237029100l, 1265734280l, 1270950336l, 1275322640l, 1311789505l, 1322984496l, 1331117964l, 1340746807l, 1360010673l, 1384220779l, 1416778505l, 1417453222l, 1440275138l, 1485698630l, 1506695679l, 1528475520l, 1545618907l, 1615583788l, 1632655004l, 1639473804l, 1659965115l, 1682709839l, 1700410685l, 1739145542l, 1834180559l, 1840322131l, 1857480328l, 1857964229l, 1891191666l, 1896396768l, 1967853124l, 1981522953l, 1984487248l, 1998383036l, 2016684994l, 2045300159l, 2051574360l, 2109550767l, 2141941362l, 2154406721l, 2172542967l, 2187777960l, 2189137266l, 2222332743l, 2304532193l, 2327867522l, 2339477446l, 2482128427l, 2503261874l, 2563614052l, 2568286392l, 2596415371l, 2608211995l, 2627328343l, 2763662207l, 2772851011l, 2774027833l, 2803750770l, 2811003710l, 2865046885l, 2895108263l, 2903924223l, 2954397343l, 2956755993l, 3003658256l, 3035194724l, 3100356133l}));
		map.put("TCCAAGAACTTAA", new TLongArrayList(new long[] {52398564l, 88407160l, 99460658l, 158795514l, 170756687l, 181950612l, 279169999l, 280669705l, 282711720l, 299667253l, 346077172l, 353500758l, 362134560l, 386712956l, 404964428l, 405883572l, 421249997l, 453687230l, 464165844l, 497582881l, 514512210l, 517334232l, 553483921l, 568873170l, 581986133l, 591234496l, 597460657l, 617286569l, 618238523l, 638265981l, 672501822l, 673355059l, 718969372l, 720600207l, 723110121l, 755029008l, 792300130l, 799101836l, 807853520l, 827289107l, 830196825l, 833825651l, 849418633l, 856030222l, 883302704l, 889248113l, 906516512l, 914686598l, 920861838l, 949793938l, 958335880l, 1018993685l, 1091632813l, 1091704049l, 1109515528l, 1135325578l, 1146939121l, 1161442829l, 1168386655l, 1202167763l, 1204759944l, 1212836021l, 1237029101l, 1260379986l, 1265734281l, 1270950337l, 1275322641l, 1309387746l, 1311789506l, 1322984497l, 1340746808l, 1357633597l, 1360010674l, 1367427852l, 1405959476l, 1416778506l, 1417453223l, 1420890169l, 1446963883l, 1465008047l, 1485698631l, 1528475521l, 1545618908l, 1563562667l, 1615583789l, 1639473805l, 1659707017l, 1659965116l, 1682554271l, 1682709840l, 1684947254l, 1702521248l, 1707266750l, 1717099442l, 1772415652l, 1857480329l, 1880875074l, 1896396769l, 1905023327l, 1907475351l, 1967853125l, 1981522954l, 1998383037l, 2000573685l, 2016684995l, 2051574361l, 2134001095l, 2141941363l, 2157840106l, 2172542968l, 2187777961l, 2222332744l, 2228755579l, 2286248288l, 2304532194l, 2327867523l, 2339477447l, 2400116481l, 2469328443l, 2482128428l, 2503261875l, 2516015354l, 2542409040l, 2563614053l, 2568286393l, 2608211996l, 2611974329l, 2613400213l, 2627328344l, 2654488509l, 2657757250l, 2700579545l, 2759855666l, 2760274793l, 2763662208l, 2764854677l, 2772851012l, 2865046886l, 2888109799l, 2895108264l, 2903924224l, 2936616104l, 2954397344l, 2956755994l, 2964117860l, 2965605551l, 2987774212l, 3030054134l, 3100356134l}));
		map.put("CCAAGAACTTAAG", new TLongArrayList(new long[] {8620033l, 61608511l, 71349155l, 231400300l, 280669706l, 398256597l, 421249998l, 453687231l, 517334233l, 575689116l, 618238524l, 735093896l, 755029009l, 883302705l, 1018993686l, 1078248876l, 1091157156l, 1109515529l, 1131422067l, 1168386656l, 1202167764l, 1254413771l, 1309387747l, 1322984498l, 1328220091l, 1367427853l, 1370563429l, 1682554272l, 1684947255l, 1702521249l, 1717099443l, 1758446039l, 1800970090l, 1896396770l, 1906694433l, 1907475352l, 2050134689l, 2051574362l, 2133427874l, 2157840107l, 2303143650l, 2351651919l, 2355230922l, 2383344528l, 2552813124l, 2563614054l, 2618013217l, 2700579546l, 2749246121l, 2884198049l, 2888109800l, 2895108265l, 2912754968l}));
		map.put("CAAGAACTTAAGA", new TLongArrayList(new long[] {8620034l, 61608512l, 280669707l, 348473245l, 355394324l, 441803741l, 449436395l, 517334234l, 541609812l, 554855270l, 606246203l, 607362243l, 618238525l, 651567867l, 681701757l, 695859073l, 705907611l, 735093897l, 755029010l, 859294374l, 859454886l, 881843982l, 963008505l, 1006262588l, 1061042318l, 1105605261l, 1131422068l, 1141088600l, 1168386657l, 1178768204l, 1187676545l, 1202167765l, 1245164466l, 1309662753l, 1322984499l, 1367427854l, 1368018036l, 1370563430l, 1371121942l, 1507931238l, 1507990429l, 1527995986l, 1676859912l, 1684947256l, 1702521250l, 1713658057l, 1877474888l, 1896396771l, 1897387128l, 1907440373l, 1929121309l, 1936232954l, 1943885429l, 1969757153l, 1975188509l, 1995904404l, 2042967989l, 2133427875l, 2157840108l, 2166268835l, 2176736581l, 2179399836l, 2247754152l, 2280036158l, 2284115589l, 2290520890l, 2355230923l, 2403112187l, 2405561723l, 2416069591l, 2430547113l, 2456618582l, 2516855294l, 2520483854l, 2539192210l, 2547901763l, 2560987013l, 2563614055l, 2713594759l, 2730817489l, 2749246122l, 2815439549l, 2816926218l, 2847168878l, 2884198050l, 2888109801l, 2922432794l, 3016530471l, 3021774184l, 3057042295l}));
		map.put("AAGAACTTAAGAG", new TLongArrayList(new long[] {8620035l, 19081828l, 39044042l, 61608513l, 79036778l, 90584581l, 167079856l, 176026406l, 203311185l, 212352542l, 243786178l, 251659035l, 254945074l, 263669689l, 271940633l, 371479598l, 396182080l, 441803742l, 442374667l, 458195216l, 476510004l, 478458738l, 517334235l, 551212464l, 561317411l, 610038106l, 612135695l, 679361935l, 695859074l, 759551624l, 809400098l, 859454887l, 865800285l, 882514434l, 893477829l, 1003750326l, 1036097412l, 1105605262l, 1141088601l, 1163809447l, 1178768205l, 1188809035l, 1225878921l, 1254523155l, 1299259971l, 1309662754l, 1316104896l, 1325958739l, 1343071292l, 1370563431l, 1406637683l, 1407909905l, 1420437441l, 1503363589l, 1507990430l, 1550337661l, 1616683550l, 1651215872l, 1666331176l, 1678839572l, 1689775892l, 1702240979l, 1704714551l, 1717540080l, 1753925325l, 1798038523l, 1840583635l, 1852940682l, 1877474889l, 1919985002l, 1943577514l, 1975188510l, 2032730485l, 2042055383l, 2079120720l, 2136696819l, 2230495044l, 2257032365l, 2280036159l, 2282991981l, 2296100249l, 2357346605l, 2456618583l, 2467584704l, 2474314417l, 2512249122l, 2534959158l, 2547901764l, 2560987014l, 2573624196l, 2574594628l, 2654590782l, 2659746195l, 2713594760l, 2730817490l, 2800149350l, 2807475239l, 2816204904l, 2847700054l, 2854628285l, 2897812210l, 2906649172l, 2922432795l, 2926535236l, 2954232899l, 2990669649l, 2996147091l, 2998063339l, 3026853822l, 3051252141l, 3053528010l}));
		map.put("AGAACTTAAGAGT", new TLongArrayList(new long[] {4424874l, 18246342l, 23314256l, 32545968l, 69919991l, 79036779l, 103325700l, 176026407l, 243786179l, 250968282l, 254945075l, 255942076l, 271940634l, 277379449l, 287895560l, 312292322l, 326449420l, 330565528l, 371479599l, 379245138l, 385541571l, 393534817l, 397751456l, 410750563l, 478458739l, 517334236l, 562678859l, 642541947l, 679361936l, 732202171l, 861275198l, 895127019l, 914001888l, 915421613l, 921981497l, 931612844l, 1026152268l, 1044935531l, 1048768719l, 1105605263l, 1161415949l, 1163809448l, 1178768206l, 1194337482l, 1214692935l, 1309662755l, 1352191640l, 1364071799l, 1406637684l, 1407909906l, 1420437442l, 1430245366l, 1446197890l, 1459680468l, 1503363590l, 1542367791l, 1580203652l, 1582574540l, 1583733808l, 1586172477l, 1605233114l, 1638757131l, 1674605944l, 1675363832l, 1685789952l, 1702240980l, 1705785714l, 1772406261l, 1828400504l, 1852940683l, 1914479970l, 1919985003l, 1966630006l, 2032730486l, 2042055384l, 2124871615l, 2166791184l, 2195810817l, 2261485927l, 2263024770l, 2271147217l, 2278467348l, 2282991982l, 2296100250l, 2303967805l, 2404080854l, 2433281454l, 2438397602l, 2456618584l, 2467584705l, 2474314418l, 2512249123l, 2517061064l, 2528251227l, 2547901765l, 2564625187l, 2574594629l, 2626678511l, 2669377106l, 2721018045l, 2730817491l, 2736225671l, 2806402686l, 2811250166l, 2816204905l, 2847700055l, 2858799767l, 2906649173l, 2931309495l, 2971620575l, 2983761284l, 2996147092l, 3097353636l}));
		map.put("GAACTTAAGAGTA", new TLongArrayList(new long[] {4424875l, 69919992l, 88876767l, 103325701l, 118373358l, 169517582l, 254945076l, 323106078l, 323166125l, 365475879l, 371479600l, 389157140l, 401304580l, 575262516l, 642541948l, 660256954l, 846793371l, 915421614l, 925638660l, 931612845l, 975979226l, 1048768720l, 1079567052l, 1161415950l, 1214692936l, 1228316247l, 1352191641l, 1407909907l, 1446197891l, 1452356443l, 1458719812l, 1503363591l, 1507015692l, 1509864720l, 1519873400l, 1580208541l, 1582579429l, 1583738697l, 1625552318l, 1786722292l, 1798584828l, 1848840745l, 1914479971l, 1966630007l, 2040956617l, 2042055385l, 2058394300l, 2108530225l, 2123396377l, 2124871616l, 2140674307l, 2195810818l, 2271147218l, 2278467349l, 2404080855l, 2528251228l, 2558302962l, 2612247726l, 2721018046l, 2755622012l, 2811250167l, 2816204906l, 2918112611l, 2931997706l, 3035138638l, 3097358525l}));
		map.put("AACTTAAGAGTAT", new TLongArrayList(new long[] {4424876l, 68273695l, 77064653l, 97968633l, 103325702l, 114330607l, 142664087l, 142886981l, 143160534l, 162470935l, 170070536l, 192159340l, 204223979l, 272427124l, 288823340l, 317946983l, 389157141l, 427330859l, 454071340l, 454762322l, 462070958l, 568270237l, 575262517l, 643601796l, 660256955l, 669567798l, 774924820l, 785290024l, 798257860l, 863054339l, 906683692l, 919119816l, 975979227l, 981368277l, 986293058l, 988063508l, 1048768721l, 1085760518l, 1114830080l, 1138409690l, 1159153268l, 1185654527l, 1197752534l, 1214692937l, 1219992961l, 1244520828l, 1266722343l, 1278594781l, 1319908239l, 1358086841l, 1458222247l, 1507015693l, 1528537768l, 1534512294l, 1540520520l, 1580208542l, 1582579430l, 1583738698l, 1613767352l, 1652413714l, 1786722293l, 1845552691l, 1848840746l, 1914479972l, 1966630008l, 1997291753l, 2134381061l, 2190095374l, 2225383525l, 2237651216l, 2249575226l, 2271147219l, 2342683764l, 2416810517l, 2441675598l, 2486164942l, 2486385548l, 2610838012l, 2634853780l, 2636202261l, 2698571452l, 2748060115l, 2766694663l, 2798966714l, 2888472184l, 2920963859l, 2925088490l, 2965193716l, 3027774543l, 3035138639l, 3097358526l, 3098480210l, 3099863540l, 3101423341l}));
		map.put("ACTTAAGAGTATA", new TLongArrayList(new long[] {54281547l, 66100746l, 73307108l, 97968634l, 103325703l, 114330608l, 170070537l, 193470526l, 262032277l, 262873613l, 263865434l, 354566880l, 378996109l, 389157142l, 398226319l, 452455310l, 454071341l, 462070959l, 510788965l, 580573064l, 592313977l, 638187573l, 663986433l, 808729274l, 816821988l, 856550261l, 863054340l, 906683693l, 910259265l, 986293059l, 988063509l, 1007587426l, 1085760519l, 1112281945l, 1114830081l, 1286185328l, 1339760922l, 1507015694l, 1534512295l, 1567892789l, 1617316850l, 1630436190l, 1652413715l, 1688425545l, 1725166081l, 1739055429l, 1743379329l, 1774787706l, 1786722294l, 1821593455l, 2083296473l, 2118613905l, 2237651217l, 2253178018l, 2271147220l, 2290801453l, 2403391191l, 2408991176l, 2468216142l, 2472218128l, 2486164943l, 2610838013l, 2616712690l, 2634853781l, 2636202262l, 2718331015l, 2801261934l, 2807141419l, 2820344473l, 2871570510l, 2888472185l, 2890350608l, 2909645672l, 2925088491l, 3027774544l, 3054171479l, 3098480211l}));
		map.put("CTTAAGAGTATAA", new TLongArrayList(new long[] {29509758l, 66100747l, 78637871l, 103325704l, 114330609l, 170070538l, 220174021l, 262032278l, 263865435l, 278648344l, 317663983l, 378996110l, 398226320l, 402416473l, 408180346l, 509813056l, 510788966l, 527120330l, 537286028l, 578135002l, 610348728l, 617453174l, 638187574l, 663986434l, 673433682l, 677193748l, 706984538l, 715213363l, 737525759l, 776652697l, 808729275l, 816821989l, 909181422l, 910259266l, 968358313l, 972938803l, 987630242l, 988628986l, 1006435995l, 1009512199l, 1057193375l, 1085760520l, 1110990174l, 1249746090l, 1339760923l, 1447377263l, 1487513395l, 1500472522l, 1619119846l, 1629153461l, 1629153620l, 1630436191l, 1633993449l, 1652413716l, 1653285488l, 1688425546l, 1742378159l, 1747164293l, 1779097702l, 1897264200l, 1932067081l, 1941223571l, 1956098406l, 2049968774l, 2140943952l, 2143021348l, 2237651218l, 2245088108l, 2271147221l, 2290801454l, 2292201476l, 2486071997l, 2486164944l, 2486619436l, 2550950729l, 2567505280l, 2614481227l, 2636202263l, 2659741350l, 2732275834l, 2775511680l, 2801261935l, 2871570511l, 2993950686l, 3000270658l, 3019838537l, 3027774545l, 3098480212l}));
		map.put("TTAAGAGTATAAT", new TLongArrayList(new long[] {31751995l, 57409485l, 74230190l, 78637872l, 92657418l, 93524067l, 99386567l, 109184501l, 159364553l, 170070539l, 191911744l, 195686064l, 196357188l, 239129801l, 260247212l, 262032279l, 278648345l, 286901892l, 328527574l, 378996111l, 388915373l, 390474834l, 402179550l, 408180347l, 423469299l, 454713654l, 460239007l, 460892518l, 521682626l, 527120331l, 537286029l, 549126529l, 555010335l, 571776756l, 577857916l, 578135003l, 592713241l, 606483906l, 628334700l, 677193749l, 677494574l, 705807369l, 707303563l, 752978170l, 792374809l, 808055945l, 808729276l, 822311855l, 874129489l, 897481446l, 909181423l, 913828709l, 964857856l, 987630243l, 989266344l, 998450192l, 1053003585l, 1057193376l, 1085760521l, 1091033774l, 1110990175l, 1111427492l, 1111810852l, 1136355534l, 1158607046l, 1182197621l, 1194905156l, 1222475692l, 1249746091l, 1254698023l, 1257202023l, 1259984751l, 1262397569l, 1280429864l, 1337454551l, 1346445795l, 1351656001l, 1354164740l, 1447377264l, 1453687333l, 1457427801l, 1466951226l, 1487513396l, 1491025586l, 1492448822l, 1500472523l, 1505495614l, 1523593505l, 1524945419l, 1534969394l, 1554193377l, 1558271147l, 1559255886l, 1559495579l, 1616026958l, 1654656519l, 1658883240l, 1682173933l, 1684913296l, 1688425547l, 1747164294l, 1750472851l, 1791518714l, 1897185809l, 1918128528l, 1997227374l, 2020333375l, 2050419544l, 2105693456l, 2123423198l, 2123829339l, 2140943953l, 2147629300l, 2180023545l, 2182023143l, 2190246930l, 2190358866l, 2230840720l, 2237651219l, 2266937497l, 2268303112l, 2271147222l, 2332228521l, 2377359026l, 2387716755l, 2402333531l, 2481132340l, 2486071998l, 2486619437l, 2512153795l, 2556039896l, 2567505281l, 2628098872l, 2691680727l, 2732275835l, 2741435550l, 2800990602l, 2893172892l, 2905888528l, 2935326153l, 2961087570l, 2965434616l, 2993519119l, 2993950687l, 2996462730l, 3008692964l, 3011425631l, 3024949555l, 3026070646l, 3027774546l, 3098480213l}));
		map.put("TAAGAGTATAATA", new TLongArrayList(new long[] {14330001l, 87721104l, 92657419l, 112260154l, 119980130l, 159364554l, 178226658l, 187884060l, 195686065l, 244030832l, 260247213l, 262032280l, 269730502l, 378996112l, 388626290l, 388915374l, 409986092l, 435556700l, 442463939l, 521682627l, 537286030l, 565275421l, 570346600l, 571968040l, 577857917l, 578176655l, 581529758l, 598023769l, 629410057l, 652461196l, 677193750l, 707303564l, 722926112l, 752978171l, 787658735l, 800252722l, 800447218l, 806215624l, 808055946l, 808729277l, 817036120l, 855524132l, 893807136l, 897481447l, 913828710l, 948656096l, 987630244l, 989542174l, 990469429l, 1044321480l, 1057193377l, 1074358482l, 1100367498l, 1111427493l, 1111810853l, 1137620540l, 1257202024l, 1268174431l, 1301476781l, 1352113528l, 1354164741l, 1357774544l, 1389408299l, 1417043522l, 1417202791l, 1453687334l, 1457427802l, 1473753103l, 1491025587l, 1492448823l, 1505495615l, 1524945420l, 1529721873l, 1559255887l, 1570500316l, 1573171314l, 1612190480l, 1616026959l, 1682173934l, 1742354515l, 1747164295l, 1768085915l, 1781164031l, 1790619469l, 1791518715l, 1799169426l, 1820208915l, 1820260076l, 1843307320l, 1863763636l, 1920166682l, 1923310243l, 2024345875l, 2048375899l, 2074593272l, 2079233235l, 2123829340l, 2173676563l, 2175802062l, 2178139139l, 2186663932l, 2190246931l, 2190358867l, 2231660342l, 2237651220l, 2285918984l, 2367031262l, 2377359027l, 2402333532l, 2481132341l, 2486071999l, 2492179301l, 2556039897l, 2567505282l, 2583566115l, 2694271070l, 2741435551l, 2799070878l, 2856539776l, 2866736889l, 2957861922l, 2973641714l, 2993950688l, 3011425632l, 3012430501l, 3027757280l, 3027774547l, 3098480214l}));
		map.put("AAGAGTATAATAA", new TLongArrayList(new long[] {25517070l, 92657420l, 119980131l, 121271910l, 158198921l, 159364555l, 178226659l, 187884061l, 197251084l, 258319895l, 260247214l, 321306555l, 367650580l, 372816089l, 387126160l, 392648937l, 417764143l, 422449430l, 433714356l, 458130985l, 545096931l, 559611565l, 570346601l, 571968041l, 578176656l, 581529759l, 605762664l, 647455533l, 661459150l, 722926113l, 745106467l, 751141185l, 751207308l, 758032505l, 776660512l, 781570402l, 781986636l, 789953016l, 793450189l, 832342734l, 838241802l, 850203696l, 852223508l, 855524133l, 880313274l, 891100904l, 893807137l, 913828711l, 938776327l, 941673205l, 963289253l, 985537399l, 987630245l, 1043472759l, 1044321481l, 1057193378l, 1074358483l, 1078429277l, 1113074243l, 1118045628l, 1145192076l, 1148920205l, 1158781326l, 1204539335l, 1220819275l, 1257202025l, 1270339727l, 1301476782l, 1404729357l, 1404975925l, 1417202792l, 1420488528l, 1444648651l, 1457427803l, 1473753104l, 1491025588l, 1497996346l, 1505495616l, 1529721874l, 1621879388l, 1641450825l, 1757829489l, 1761172724l, 1770547095l, 1783079050l, 1825808205l, 1833235798l, 1877611365l, 1895355854l, 1923310244l, 1930143285l, 1981638469l, 1982812495l, 1992631803l, 2014581035l, 2018401654l, 2024345876l, 2031085890l, 2031446908l, 2051168990l, 2051846820l, 2052173930l, 2057603014l, 2116290147l, 2135889851l, 2138907225l, 2160101245l, 2175802063l, 2178139140l, 2186663933l, 2191059047l, 2237651221l, 2244606192l, 2264570829l, 2270733124l, 2284707555l, 2290071037l, 2353481545l, 2371652494l, 2377359028l, 2402333533l, 2474663628l, 2556039898l, 2559948691l, 2567505283l, 2610564251l, 2623470903l, 2668407107l, 2703738017l, 2704204117l, 2713151255l, 2717850685l, 2798727581l, 2809190914l, 2813209682l, 2813236525l, 2856539777l, 2891950690l, 2894702529l, 2909476786l, 2937557460l, 2949222322l, 2961458163l, 2967656682l, 2968794679l, 2973641715l, 2977327787l, 2983028712l, 2993950689l, 2997881268l, 3027774548l, 3030490433l, 3098480215l}));
		map.put("AGAGTATAATAAT", new TLongArrayList(new long[] {25517071l, 81710820l, 96407915l, 96530666l, 104099170l, 110675024l, 116533032l, 159364556l, 195615394l, 197264176l, 225779708l, 260247215l, 287148535l, 320571602l, 321306556l, 333349536l, 334049967l, 373797268l, 392114906l, 392648938l, 393259543l, 399391801l, 406170691l, 408413951l, 410879728l, 415454713l, 430436799l, 442280220l, 456436702l, 480836414l, 490191379l, 501471727l, 507807446l, 545096932l, 557465339l, 559611566l, 576938378l, 591727685l, 594241669l, 597841342l, 610466930l, 625783805l, 646108375l, 650108446l, 655575923l, 661459151l, 683867058l, 705334165l, 714094829l, 721846280l, 722926114l, 752453661l, 756074428l, 781652148l, 793450190l, 798383392l, 800834171l, 833532104l, 842298065l, 855524134l, 871439381l, 877476179l, 880313275l, 893807138l, 923226794l, 931146804l, 931208767l, 931457741l, 953656257l, 983478717l, 985537400l, 992957600l, 1001717576l, 1004319852l, 1043472760l, 1101085652l, 1113074244l, 1161513147l, 1167370571l, 1187873372l, 1191618430l, 1191867499l, 1218903237l, 1245483400l, 1248328925l, 1251037811l, 1270339728l, 1272238859l, 1285489133l, 1302787760l, 1404193783l, 1409342491l, 1416788764l, 1420488529l, 1428980284l, 1429428777l, 1450965034l, 1465608436l, 1465716159l, 1473753105l, 1490073943l, 1505495617l, 1510497330l, 1564267875l, 1616795473l, 1619598045l, 1643753870l, 1646537650l, 1648753665l, 1657692896l, 1708753893l, 1709239755l, 1757829490l, 1758950452l, 1791131886l, 1833235799l, 1839314327l, 1865634081l, 1896858275l, 1917579088l, 1929304176l, 1929304214l, 1929304251l, 1969643858l, 1970834123l, 1972908635l, 1974513452l, 2024345877l, 2025281125l, 2037329913l, 2037782694l, 2057603015l, 2068607304l, 2126092277l, 2138907226l, 2146806471l, 2160101246l, 2170966611l, 2175802064l, 2193213617l, 2229657519l, 2247942828l, 2260684750l, 2270733125l, 2280176291l, 2285858741l, 2295647861l, 2350851975l, 2351805435l, 2353481546l, 2363083824l, 2371652495l, 2389680419l, 2417096044l, 2456364694l, 2469680240l, 2520044219l, 2567916186l, 2619193979l, 2645544843l, 2646859933l, 2647290670l, 2655722968l, 2731580591l, 2774027845l, 2807605722l, 2808439941l, 2813209683l, 2856895105l, 2914356961l, 2922222052l, 2947561444l, 2949222323l, 2952089220l, 2968794680l, 2977327788l, 2993950690l, 2997272047l, 3019492534l, 3030490434l, 3059293168l}));
		map.put("GAGTATAATAATA", new TLongArrayList(new long[] {25517072l, 67321052l, 75742258l, 81710821l, 96407916l, 99585905l, 104099171l, 110675025l, 161045997l, 197264177l, 203573790l, 206602316l, 215747464l, 225779709l, 283752392l, 296402237l, 300944545l, 320571603l, 334049968l, 392648939l, 399391802l, 406170692l, 408413952l, 410879729l, 415454714l, 441495178l, 442280221l, 443418870l, 456436703l, 480836415l, 484289883l, 489506404l, 490191380l, 507341039l, 511783582l, 517243575l, 548371216l, 557465340l, 559611567l, 569303840l, 576938379l, 594241670l, 602122487l, 610466931l, 625783806l, 628337581l, 646108376l, 650108447l, 683867059l, 705334166l, 714094830l, 722926115l, 735699982l, 769311324l, 798347594l, 800834172l, 803997882l, 833532105l, 842298066l, 855524135l, 855904340l, 871439382l, 877476180l, 893807139l, 923226795l, 931146805l, 931208768l, 936740865l, 953656258l, 985537401l, 987360609l, 992957601l, 1000346542l, 1001717577l, 1003493451l, 1064326337l, 1070889959l, 1100702783l, 1113074245l, 1119094242l, 1144573280l, 1161513148l, 1167370572l, 1191867500l, 1195946702l, 1204901356l, 1206007529l, 1218903238l, 1242723572l, 1245483401l, 1255035830l, 1265940390l, 1275222702l, 1302787761l, 1314806097l, 1369248937l, 1409342492l, 1429428778l, 1450965035l, 1465608437l, 1502454298l, 1505495618l, 1506728304l, 1515565140l, 1561103325l, 1564267876l, 1568469234l, 1576700774l, 1619598046l, 1643753871l, 1646537651l, 1648753666l, 1653266237l, 1657692897l, 1741570573l, 1758950453l, 1759460831l, 1778901541l, 1791131887l, 1861753837l, 1865634082l, 1896858276l, 1917579089l, 1929304177l, 1929304215l, 1929304252l, 1945355640l, 1968682676l, 1969643859l, 1970834124l, 1972908636l, 1995852892l, 2021906721l, 2024453931l, 2025281126l, 2037329914l, 2037782695l, 2041856421l, 2057603016l, 2068607305l, 2133320063l, 2138907227l, 2144832107l, 2146806472l, 2156951050l, 2160101247l, 2227863991l, 2229657520l, 2247942829l, 2260684751l, 2270733126l, 2286127914l, 2291661818l, 2363083825l, 2377621064l, 2401329400l, 2401330643l, 2417096045l, 2420045586l, 2466524417l, 2469680241l, 2477168677l, 2551701535l, 2556193833l, 2557318565l, 2561132082l, 2567916187l, 2645544844l, 2646859934l, 2647798153l, 2655722969l, 2726087574l, 2727430177l, 2728081266l, 2731580592l, 2738604838l, 2757797090l, 2758934046l, 2774027846l, 2804065615l, 2807605723l, 2822692027l, 2856895106l, 2877627542l, 2914356962l, 2928036608l, 2947561445l, 2952089221l, 2968794681l, 2970748296l, 2981649716l, 2997272048l, 3006982822l, 3009742985l, 3013774084l, 3019492535l, 3030490435l, 3040209631l, 3059293169l, 3063963095l}));
		map.put("AGTATAATAATAA", new TLongArrayList(new long[] {-9223372036854767985l}));
		map.put("GTATAATAATAAT", new TLongArrayList(new long[] {-9223372036854770339l}));
		map.put("TATAATAATAATA", new TLongArrayList(new long[] {-9223372036854769130l}));
		map.put("ATAATAATAATAA", new TLongArrayList(new long[] {-9223372036854725005l}));
		map.put("TAATAATAATAAT", new TLongArrayList(new long[] {-9223372036854735632l}));
		map.put("AATAATAATAATA", new TLongArrayList(new long[] {-9223372036854727213l}));
		
		Map<Integer, TLongList> map2 = TiledAlignerUtil.getTiles(map, "CATGTATCCAAGAACTTAAGAGTATAATAATAATAATA", 13, false);
		assertArrayEquals(new long[] {2563614047l}, map2.get(NumberUtils.getTileCount(9, 0)).toArray());
		
		/*
		 * create a TARecord 
		 */
		TARecord taRec = new TARecord("ATTAACTAATGGGCAAAATAACCAGTCAGCATCATAATG", map2);
		int [] maxTileCounts = taRec.getTopNCounts(2, 3);
		assertArrayEquals(new int[] {458752,589824}, maxTileCounts);
		maxTileCounts = taRec.getTopNCounts(3, 3);
		assertArrayEquals(new int[] {393216, 458752,589824}, maxTileCounts);
		
		
		TLongList bestStartPositions = taRec.getStartPositions(12, true, 10);
		System.out.println("bestStartPositions: " + bestStartPositions.toString());
		assertEquals(true, bestStartPositions.contains(2774027828l));
	}
	
	@Test
	public void convertLongDoubleArrayToMap2() {
		//[[468349696, 468465329], [468349697], [468349698, 476879994], [468349699], [468349700, 474433020], [468349701, 474955810], 
		//[412951324, 468349702, 600881863, 669102997, 1173339001], [468349703, 949919689, 1100688211, 1173339002, 1971729085], [430806892, 468349704, 483562144, 527480019, 538881786], [468349705, 718569128, 949919691, 1465841807, 2563923173], [468349706, 468456928, 518302224, 718569129, 1012215599], [468349707], [382633241, 468349708, 2302263166, 2669507711], [165675197, 195757033, 468349709, 819168003], [468349710, 2375073053], [468349711, 559402306, 1403796911, 2375073054], [468349712], [468349713, 535356324, 2198033423, 2299777492], [468349714], [468349715, 551879994], [468349716], [433458879, 446785008, 468349717, 494243216], [433458880, 443185041, 468349718, 624530452], [407027871, 409581534, 419802124, 443185042, 461561409, 468349719, 487853598], [419746101, 468349720, 516548824, 519217773], [429318665, 468349721, 503456237], [419746103, 468349722, 476153903, 516457133], [361857773, 419746104, 468349723, 516457134, 681603336, 749135912, 1059432192, 1166646996], [321764029, 329854941, 353302906, 376221812, 456847670, 468349724, 511258514, 516457135, 660685009, 689383656, 692040517], [403626999, 414401819, 456847671, 468349725, 516457136, 547841074, 689383657, 802634393, 803641725], [468349726, 481209945, 516457137, 541996553, 547841075], [47226371, 440805414, 450321506, 468349727, 514348111, 541996554, 547841076, 596605493, 599027172, 629439729, 652498006, 671475806, 672735930, 684566568, 706281885, 766574683], [58463424, 251423126, 252623228, 253020929, 257495940, 268032852, 363754626, 413938427, 423760846, 441399943, 449912867, 468349728, 510008571], [392743866, 448016523, 457539598, 468349729, 509312434, 589822718, 594006664, 602809119], [291683940, 468349730, 505808029, 540927428], [10827345, 103399775, 211446740, 271266371, 274063389, 389817552, 396781086, 407436232], [19505994, 163434370, 172261067, 175630132, 182601354, 182602452, 195403318, 211446741], [19505995, 61037264, 113539602, 163434371, 198899729, 218850354, 461606678, 505916026], [58115562, 165524926, 196607988, 198899730, 418840445, 577922138, 578105762, 603032542], [12341352, 165524927, 170831349, 198899731, 418864343, 421200234, 521477579, 577922139, 605123826, 610794609], [34353035, 51482545, 56690490, 80302984, 170831350, 212876404, 217329695, 218054786], [213653915, 256146597, 390321495, 546537677, 567748798, 573119873, 675573219], [18133123, 239725354, 241198392, 293050485, 515602712, 546537678, 607091318, 647054569, 736859333, 755687090], [468354005, 534331226, 607091319, 647054570, 736859334, 739212701, 755687091], [468354006, 497841111, 570703664, 647054571, 730637206, 755687092, 941427503], [383840938, 430797104, 468354007, 508621408], [262007740, 430797105, 468354008], [468354009, 575812985, 651206615, 718537434, 723113109, 733712469, 755210479, 818556765, 843526201, 925749374, 1029273224, 1052946433, 1062695904], [468354010, 575812986, 629515561, 644092118, 723113110, 778970070, 843526202, 953508248, 953613863, 1011825035, 1109020073, 1128033946], [404982273, 408622781, 417519327, 426959230, 460334628, 468354011, 473523638, 487654369, 511834938, 575812987, 614617834, 643896032], [468354012, 473523639, 488837561, 489262153, 513310520, 521864043, 614617835, 655689196, 684599743, 807975982, 814637933, 913438267], [468354013, 517618016, 528838967, 533100427, 614617836, 625783339, 661341799, 712203083, 720411718, 744689658, 770892383], [468354014, 494687845, 494817322, 533100428, 544269184, 556895488, 605425401, 610577000, 626953408, 649543305, 665962072], [468354015], [468354016, 510276736, 555462963, 733445529, 733985341, 736151145, 788379026, 817242049, 828084471, 854333589, 971157831, 1040352702], [422617755, 468354017, 486014649, 539862183, 548660486, 555462964, 602916567, 661893440, 692902920, 697497049], [468354018, 670798275, 702874457, 706186078, 712148196, 723991231, 725516684, 756421631, 759165774, 767464560, 785803944, 811602412, 1271216584], [468354019, 533255773, 642733996, 652816763, 654726449, 660586815, 675612559, 697187741, 712148197, 785405379, 813613369, 819903085, 1336019567], [468354020, 562887761, 617302136, 659199143, 675612560, 716846160, 744017008, 758449495, 794156938, 801360052, 850835373, 854333593, 1009280173], [468354021], [468354022], [468354023, 498752891, 501380960, 520492331, 559203487, 565409553, 598073775, 616474631, 672432065, 706651613, 755892589, 781104650, 828233233, 966735687, 998204812, 1013687962, 1041956077], [468354024, 469258879], [468354025, 478899051, 501380962, 506723878, 533289863, 538366944, 553573688, 565409555, 601313184, 607455223, 632417699, 636989806, 637547197, 651150062, 678482144, 680726836, 695295215], [468354026, 469793909, 478899052, 601313185], [324867177, 327256423, 407014187, 408453024, 415327072, 436518791, 444612483, 445154766, 468354027, 478899053, 511917326, 573644560, 581030615], [444612484, 468354028, 478899054, 482545369, 2642173678], [334308180, 337862480, 363222311, 371393684, 374256377, 391290281, 392114933, 394914586, 407014189, 411709275, 413090407, 468354029, 477127212, 511917328], [7298409, 322728767, 337862481, 351757046, 414160437, 418717038, 426836280, 441886296, 444066976, 458941007, 468354030, 470538520], [63882256, 261945490, 270926866, 322436204, 331275977, 351757047, 407014191, 441886297, 453102745, 468354031, 470538521, 820885802, 958647111], [2892505, 52623884, 103011372, 114209888, 114936676, 225313062, 225359207, 256490377, 388256892, 409824298, 453102746, 456338048, 463784940, 464988356, 468354032, 468933181, 518589665], [409824299, 449662953, 453102747, 455843535, 463784941, 464988357, 468354033, 468933182, 470015558, 515761450], [62177439, 174929656, 183017903, 192602027, 408035775, 423045008, 443778789, 455843536, 464988358, 468354034, 473005757, 546494902, 655891275, 666640895, 706026151, 723296007, 743246211], [341046419, 357991189, 361910621, 383776759, 397376082, 408035776, 468354035, 484550917, 494816604, 553585739, 594051618], [468354036, 593571847], [37759059, 468354037, 490546539, 593571848, 1271884766, 1615282376, 1671757189, 1713898379, 2105174288, 2642941643, 2904579919]]
		long [][] array = new long[76][];
		array[0] = new long[] {468349696, 468465329};
 
		 array[1] = new long[] {468349697};
		 array[2] = new long[] {468349698, 476879994};
		 array[3] = new long[] {468349699};
		 array[4] = new long[] {468349700, 474433020};
		 array[5] = new long[] {468349701, 474955810};
		 array[6] = new long[] {412951324, 468349702, 600881863, 669102997, 1173339001};
		 array[7] = new long[] {468349703, 949919689, 1100688211, 1173339002, 1971729085};
		 array[8] = new long[] {430806892, 468349704, 483562144, 527480019, 538881786};
		 array[9] = new long[] {468349705, 718569128, 949919691, 1465841807, 2563923173l};
		 array[10] = new long[] {468349706, 468456928, 518302224, 718569129, 1012215599};
		 array[11] = new long[] {468349707};
		 array[12] = new long[] {382633241, 468349708, 2302263166l, 2669507711l};
		 array[13] = new long[] {165675197, 195757033, 468349709, 819168003};
		 array[14] = new long[] {468349710, 2375073053l};
		 array[15] = new long[] {468349711, 559402306, 1403796911, 2375073054l};
		 array[16] = new long[] {468349712};
		 array[17] = new long[] {468349713, 535356324, 2198033423l, 2299777492l};
		 array[18] = new long[] {468349714};
		 array[19] = new long[] {468349715, 551879994};
		 array[20] = new long[] {468349716};
		 array[21] = new long[] {433458879, 446785008, 468349717, 494243216};
		 array[22] = new long[] {433458880, 443185041, 468349718, 624530452};
		 array[23] = new long[] {407027871, 409581534, 419802124, 443185042, 461561409, 468349719, 487853598};
		 array[24] = new long[] {419746101, 468349720, 516548824, 519217773};
		 array[25] = new long[] {429318665, 468349721, 503456237};
		 array[26] = new long[] {419746103, 468349722, 476153903, 516457133};
		 array[27] = new long[] {361857773, 419746104, 468349723, 516457134, 681603336, 749135912, 1059432192, 1166646996};
		 array[28] = new long[] {321764029, 329854941, 353302906, 376221812, 456847670, 468349724, 511258514, 516457135, 660685009, 689383656, 692040517};
		 array[29] = new long[] {403626999, 414401819, 456847671, 468349725, 516457136, 547841074, 689383657, 802634393, 803641725};
		 array[30] = new long[] {468349726, 481209945, 516457137, 541996553, 547841075};
		 array[31] = new long[] {47226371, 440805414, 450321506, 468349727, 514348111, 541996554, 547841076, 596605493, 599027172, 629439729, 652498006, 671475806, 672735930, 684566568, 706281885, 766574683};
		 array[32] = new long[] {58463424, 251423126, 252623228, 253020929, 257495940, 268032852, 363754626, 413938427, 423760846, 441399943, 449912867, 468349728, 510008571};
		 array[33] = new long[] {392743866, 448016523, 457539598, 468349729, 509312434, 589822718, 594006664, 602809119};
		 array[34] = new long[] {291683940, 468349730, 505808029, 540927428};
		 array[35] = new long[] {10827345, 103399775, 211446740, 271266371, 274063389, 389817552, 396781086, 407436232};
		 array[36] = new long[] {19505994, 163434370, 172261067, 175630132, 182601354, 182602452, 195403318, 211446741};
		 array[37] = new long[] {19505995, 61037264, 113539602, 163434371, 198899729, 218850354, 461606678, 505916026};
		 array[38] = new long[] {58115562, 165524926, 196607988, 198899730, 418840445, 577922138, 578105762, 603032542};
		 array[39] = new long[] {12341352, 165524927, 170831349, 198899731, 418864343, 421200234, 521477579, 577922139, 605123826, 610794609};
		 array[40] = new long[] {34353035, 51482545, 56690490, 80302984, 170831350, 212876404, 217329695, 218054786};
		 array[41] = new long[] {213653915, 256146597, 390321495, 546537677, 567748798, 573119873, 675573219};
		 array[42] = new long[] {18133123, 239725354, 241198392, 293050485, 515602712, 546537678, 607091318, 647054569, 736859333, 755687090};
		 array[43] = new long[] {468354005, 534331226, 607091319, 647054570, 736859334, 739212701, 755687091};
		 array[44] = new long[] {468354006, 497841111, 570703664, 647054571, 730637206, 755687092, 941427503};
		 array[45] = new long[] {383840938, 430797104, 468354007, 508621408};
		 array[46] = new long[] {262007740, 430797105, 468354008};
		 array[47] = new long[] {468354009, 575812985, 651206615, 718537434, 723113109, 733712469, 755210479, 818556765, 843526201, 925749374, 1029273224, 1052946433, 1062695904};
		 array[48] = new long[] {468354010, 575812986, 629515561, 644092118, 723113110, 778970070, 843526202, 953508248, 953613863, 1011825035, 1109020073, 1128033946};
		 array[49] = new long[] {404982273, 408622781, 417519327, 426959230, 460334628, 468354011, 473523638, 487654369, 511834938, 575812987, 614617834, 643896032};
		 array[50] = new long[] {468354012, 473523639, 488837561, 489262153, 513310520, 521864043, 614617835, 655689196, 684599743, 807975982, 814637933, 913438267};
		 array[51] = new long[] {468354013, 517618016, 528838967, 533100427, 614617836, 625783339, 661341799, 712203083, 720411718, 744689658, 770892383};
		 array[52] = new long[] {468354014, 494687845, 494817322, 533100428, 544269184, 556895488, 605425401, 610577000, 626953408, 649543305, 665962072};
		 array[53] = new long[] {468354015};
		 array[54] = new long[] {468354016, 510276736, 555462963, 733445529, 733985341, 736151145, 788379026, 817242049, 828084471, 854333589, 971157831, 1040352702};
		 array[55] = new long[] {422617755, 468354017, 486014649, 539862183, 548660486, 555462964, 602916567, 661893440, 692902920, 697497049};
		 array[56] = new long[] {468354018, 670798275, 702874457, 706186078, 712148196, 723991231, 725516684, 756421631, 759165774, 767464560, 785803944, 811602412, 1271216584};
		 array[57] = new long[] {468354019, 533255773, 642733996, 652816763, 654726449, 660586815, 675612559, 697187741, 712148197, 785405379, 813613369, 819903085, 1336019567};
		 array[58] = new long[] {468354020, 562887761, 617302136, 659199143, 675612560, 716846160, 744017008, 758449495, 794156938, 801360052, 850835373, 854333593, 1009280173};
		 array[59] = new long[] {468354021};
		 array[60] = new long[] {468354022};
		 array[61] = new long[] {468354023, 498752891, 501380960, 520492331, 559203487, 565409553, 598073775, 616474631, 672432065, 706651613, 755892589, 781104650, 828233233, 966735687, 998204812, 1013687962, 1041956077};
		 array[62] = new long[] {468354024, 469258879};
		 array[63] = new long[] {468354025, 478899051, 501380962, 506723878, 533289863, 538366944, 553573688, 565409555, 601313184, 607455223, 632417699, 636989806, 637547197, 651150062, 678482144, 680726836, 695295215};
		 array[64] = new long[] {468354026, 469793909, 478899052, 601313185};
		 array[65] = new long[] {324867177, 327256423, 407014187, 408453024, 415327072, 436518791, 444612483, 445154766, 468354027, 478899053, 511917326, 573644560, 581030615};
		 array[66] = new long[] {444612484, 468354028, 478899054, 482545369, 2642173678l};
		 array[67] = new long[] {334308180, 337862480, 363222311, 371393684, 374256377, 391290281, 392114933, 394914586, 407014189, 411709275, 413090407, 468354029, 477127212, 511917328};
		 array[68] = new long[] {7298409, 322728767, 337862481, 351757046, 414160437, 418717038, 426836280, 441886296, 444066976, 458941007, 468354030, 470538520};
		 array[69] = new long[] {63882256, 261945490, 270926866, 322436204, 331275977, 351757047, 407014191, 441886297, 453102745, 468354031, 470538521, 820885802, 958647111};
		 array[70] = new long[] {2892505, 52623884, 103011372, 114209888, 114936676, 225313062, 225359207, 256490377, 388256892, 409824298, 453102746, 456338048, 463784940, 464988356, 468354032, 468933181, 518589665};
		 array[71] = new long[] {409824299, 449662953, 453102747, 455843535, 463784941, 464988357, 468354033, 468933182, 470015558, 515761450};
		 array[72] = new long[] {62177439, 174929656, 183017903, 192602027, 408035775, 423045008, 443778789, 455843536, 464988358, 468354034, 473005757, 546494902, 655891275, 666640895, 706026151, 723296007, 743246211};
		 array[73] = new long[] {341046419, 357991189, 361910621, 383776759, 397376082, 408035776, 468354035, 484550917, 494816604, 553585739, 594051618};
		 array[74] = new long[] {468354036, 593571847};
		 array[75] = new long[] {37759059, 468354037, 490546539, 593571848, 1271884766, 1615282376, 1671757189, 1713898379, 2105174288, 2642941643l, 2904579919l};

		 Map<Integer, TLongList> counts = TiledAlignerUtil.convertLongDoubleArrayToMap(array, false);
		 assertEquals(2, counts.size());
		 int thirtyFive = NumberUtils.getTileCount(35, 0);
		 int thirtyThree = NumberUtils.getTileCount(33, 0);
		 assertEquals(true, counts.containsKey(thirtyFive));
		 assertEquals(true, counts.containsKey(thirtyThree));
		 assertArrayEquals(new long[]{468349696}, counts.get(thirtyFive).toArray());
		 /*
		  * the position in the sequence is now added to the long position
		  * and so 468354005 becomes 468354005 + 43 (position of start position in sequence) << 40
		  */
		 assertArrayEquals(new long[]{NumberUtils.addShortToLong(468354005l, (short)43, 40)}, counts.get(thirtyThree).toArray());
	}
	
	@Test
	public void convertLongDoubleArrayToMap3() {
		/*
		 * This test has some commonly occurring tiles in the middle
		 * How should this be handled? - The commonly-occurring tiles will be incorporated into the match count
		 */
		long [][] array = new long[33][];
		array[0] = new long[] {-1};
		array[1] = new long[] {-1};
		array[2] = new long[] {-1};
		array[3] = new long[] {1884596169};
		array[4] = new long[] {1884596170};
		array[5] = new long[] {1884596171};
		array[6] = new long[] {1884596172};
		array[7] = new long[] {1884596173};
		array[8] = new long[] {1884596174};
		array[9] = new long[] {1884596175};
		array[10] = new long[] {1884596176};
		array[11] = new long[] {1884596177};
		array[12] = new long[] {1884596178};
		array[13] = new long[] {1884596179};
		array[14] = new long[] {1884596180};
		array[15] = new long[] {1884596181};
		array[16] = new long[] {-1};
		array[17] = new long[] {-1};
		array[18] = new long[] {-1};
		array[19] = new long[] {-1};
		array[20] = new long[] {1884596186};
		array[21] = new long[] {1884596187};
		array[22] = new long[] {1884596188};
		array[23] = new long[] {1884596189};
		array[24] = new long[] {1884596190};
		array[25] = new long[] {1884596191};
		array[26] = new long[] {1884596192};
		array[27] = new long[] {1884596193};
		array[28] = new long[] {1884596194};
		array[29] = new long[] {1884596195};
		array[30] = new long[] {1884596196};
		array[31] = new long[] {1884596197};
		array[32] = new long[] {1884596198};
		assertEquals(NumberUtils.getTileCount(30, 0), TiledAlignerUtil.nonContinuousCount(array, 1884596169, 4));
	    Map<Integer, TLongList> counts = TiledAlignerUtil.convertLongDoubleArrayToMap(array, false);
		assertEquals(1, counts.size());
		assertEquals(true, counts.containsKey(NumberUtils.getTileCount(30, 0)));
	}
	
	@Test
	public void convertLongDoubleArrayToMap4() {
		/*
		 * This test has one mismatch in the middle
		 * How should this be handled? - This will appear as a '1' in the first 16 bits of the int (used to be commonly occurring tiles in there, but this has now been incorporated into the match count)
		 */
		long [][] array = new long[33][];
		array[0] = new long[] {1};
		array[1] = new long[] {2};
		array[2] = new long[] {3};
		array[3] = new long[] {4};
		array[4] = new long[] {5};
		array[5] = new long[] {6};
		array[6] = new long[] {7};
		array[7] = new long[] {8};
		array[8] = new long[] {9};
		array[9] = new long[] {10};
		array[10] = new long[] {1006};
		array[11] = new long[] {1884596177};
		array[12] = new long[] {1884596178};
		array[13] = new long[] {1884596179};
		array[14] = new long[] {1884596180};
		array[15] = new long[] {1884596181};
		array[16] = new long[] {1212341234};
		array[17] = new long[] {443263245};
		array[18] = new long[] {2146543563};
		array[19] = new long[] {1223563456};
		array[20] = new long[] {1884596186};
		array[21] = new long[] {1884596187};
		array[22] = new long[] {1884596188};
		array[23] = new long[] {24};
		array[24] = new long[] {25};
		array[25] = new long[] {26};
		array[26] = new long[] {27};
		array[27] = new long[] {28};
		array[28] = new long[] {29};
		array[29] = new long[] {30};
		array[30] = new long[] {31};
		array[31] = new long[] {32};
		array[32] = new long[] {33};
		assertArrayEquals(new int[]{33,1}, NumberUtils.splitIntInto2(TiledAlignerUtil.nonContinuousCount(array, 1, 1)));
	}
	
	@Test
	public void convertLongDoubleArrayToMap5() {
		/*
		 * This test has one mismatch in the middle
		 * How should this be handled?
		 */
		long [][] array = new long[33][];
		array[0] = new long[] {1};
		array[1] = new long[] {2};
		array[2] = new long[] {3};
		array[3] = new long[] {4};
		array[4] = new long[] {5};
		array[5] = new long[] {6};
		array[6] = new long[] {7};
		array[7] = new long[] {8};
		array[8] = new long[] {9};
		array[9] = new long[] {10};
		array[10] = new long[] {1006};
		array[11] = new long[] {1884596177};
		array[12] = new long[] {1884596178};
		array[13] = new long[] {1884596179};
		array[14] = new long[] {1884596180};
		array[15] = new long[] {1884596181};
		array[16] = new long[] {1212341234};
		array[17] = new long[] {443263245};
		array[18] = new long[] {2146543563};
		array[19] = new long[] {1223563456};
		array[20] = new long[] {1884596186};
		array[21] = new long[] {1884596187};
		array[22] = new long[] {1884596188};
		array[23] = new long[] {24};
		array[24] = new long[] {25};
		array[25] = new long[] {26};
		array[26] = new long[] {27};
		array[27] = new long[] {28};
		array[28] = new long[] {29};
		array[29] = new long[] {3000};
		array[30] = new long[] {3100};
		array[31] = new long[] {3200};
		array[32] = new long[] {3300};
		assertArrayEquals(new int[]{29,1}, NumberUtils.splitIntInto2(TiledAlignerUtil.nonContinuousCount(array, 1, 1)));
	}
	
	@Test
	public void convertLongDoubleArrayToMap() {
		long[][] array = new long[3][];
		array[0] = new long [] {-1};
		array[1] = new long [] {1};
		array[2] = new long [] {2};
		Map<Integer, TLongList> counts = TiledAlignerUtil.convertLongDoubleArrayToMap(array, false);
		assertEquals(true, counts.isEmpty());
		
		/*
		 * add a few more common tiles at beginning of array 
		 */
		array = new long[13][];
		array[0] = new long [] {-1};
		array[1] = new long [] {-2};
		array[2] = new long [] {-3};
		array[3] = new long [] {-4};
		array[4] = new long [] {-5};
		array[5] = new long [] {-5};
		array[6] = new long [] {-5};
		array[7] = new long [] {1,100,1000};
		array[8] = new long [] {2, 101, 1001};
		array[9] = new long [] {3, 102, 9999999};
		array[10] = new long [] {4, 103, 1239999999};
		array[11] = new long [] {5, 104, 12312391999999l};
		array[12] = new long [] {6, 105, 1231239999999l};
		counts = TiledAlignerUtil.convertLongDoubleArrayToMap(array, false);
		assertEquals(1, counts.size());
		assertArrayEquals(new long[] {NumberUtils.addShortToLong(1, (short)7, 40), NumberUtils.addShortToLong(100, (short)7, 40)}, counts.get(NumberUtils.getTileCount(6, 0)).toArray());
	}
	
	@Test
	public void shortcut() {
		long[][] array = new long[3][];
		array[0] = new long [] {1};
		array[1] = new long [] {2};
		array[2] = new long [] {3};
		TLongIntMap shortcuts = TiledAlignerUtil.getShortCutPositionsForSmithwaterman(array);
		assertEquals(1, shortcuts.size());
		assertEquals(1, shortcuts.keys()[0]);
		
		array[0] = new long [] {10001};
		array[1] = new long [] {10002};
		array[2] = new long [] {10003};
		shortcuts = TiledAlignerUtil.getShortCutPositionsForSmithwaterman(array);
		assertEquals(1, shortcuts.size());
		assertEquals(10001, shortcuts.keys()[0]);
		
		array = new long[334][];
		array[0] = new long[]{33467134l, 34535761l, 65320045l, 84127681l, 155449193l, 239141584l, 352246996l, 352811748l, 364392038l, 368259712l, 382226452l, 382227136l, 382231273l, 382231443l, 382231785l, 382232126l, 382233314l, 382235369l, 382238467l, 382239486l, 382245780l, 382254800l, 419454065l, 487841731l, 525067818l, 544469882l, 566937690l, 716343412l, 774073757l, 920229281l, 927993012l, 927994206l, 927995230l, 927996075l, 927996928l, 927997097l, 928004509l, 928006385l, 928007769l, 928019483l, 958315113l, 964260057l, 976800283l, 997007220l, 1020115672l, 1064172699l, 1121316128l, 1121317488l, 1121318334l, 1121320545l, 1121321391l, 1185861077l, 1212744499l, 1291633391l, 1294741154l, 1294741836l, 1294742689l, 1294746083l, 1294747108l, 1294751304l, 1294751474l, 1294752156l, 1295022643l, 1295024180l, 1295027407l, 1295627025l, 1295628040l, 1295628382l, 1295629062l, 1295629402l, 1295630080l, 1295632454l, 1295633474l, 1295633814l, 1295634998l, 1295636358l, 1295637548l, 1295639761l, 1295641969l, 1295642819l, 1295643501l, 1295644523l, 1295647930l, 1295648270l, 1295653560l, 1295653731l, 1295657833l, 1379879816l, 1387408098l, 1436566073l, 1436566244l, 1436566415l, 1436566925l, 1436569832l, 1436575356l, 1436582593l, 1436584135l, 1436585156l, 1436585327l, 1436586695l, 1436592791l, 1436593303l, 1436594832l, 1436596543l, 1436597542l, 1436604355l, 1436604845l, 1436605527l, 1436605918l, 1436607104l, 1436607449l, 1436611991l, 1436614207l, 1436614547l, 1436615057l, 1436615399l, 1439655470l, 1439655982l, 1439657511l, 1439660224l, 1439664306l, 1439668062l, 1439668552l, 1439669234l, 1439669625l, 1439671156l, 1439672508l, 1439675701l, 1439677918l, 1439678259l, 1439728218l, 1450251075l, 1508629648l, 1531062469l, 1605930483l, 1605942610l, 1605943460l, 1605944144l, 1605944315l, 1605944657l, 1605946705l, 1605947045l, 1605947380l, 1605948574l, 1605949427l, 1605949767l, 1605950108l, 1605950620l, 1605952667l, 1605953180l, 1605953522l, 1605954355l, 1605955714l, 1605963901l, 1605964412l, 1605964925l, 1605966974l, 1605967826l, 1605970210l, 1605971578l, 1605973628l, 1605975337l, 1605979261l, 1605981142l, 1605985400l, 1606478174l, 1608868583l, 1609121751l, 1609123633l, 1609135248l, 1609136098l, 1609136782l, 1609136953l, 1609137295l, 1609139341l, 1609139681l, 1609140017l, 1609142064l, 1609142404l, 1609142745l, 1609143257l, 1609143599l, 1609145305l, 1609145818l, 1609146160l, 1609146502l, 1609146996l, 1609148355l, 1609153639l, 1609154150l, 1609154663l, 1609156712l, 1609157564l, 1609159948l, 1609161316l, 1609163366l, 1609165075l, 1609169000l, 1722770980l, 1722771660l, 1722771999l, 1722772678l, 1722773524l, 1722773862l, 1722774877l, 1722775728l, 1722776403l, 1722777246l, 1722777756l, 1722778096l, 1722778432l, 1722779106l, 1722779617l, 1722781483l, 1722782500l, 1722782837l, 1723190479l, 1723190990l, 1732095612l, 1792580446l, 1864766475l, 1864767839l, 1864769533l, 1864769874l, 1864771578l, 1864771900l, 1864772490l, 1864772660l, 1864774372l, 1864775054l, 1864775225l, 1864776592l, 1864784972l, 1864786508l, 1864786849l, 1864788904l, 1864790610l, 1864791465l, 1864791636l, 1864793511l, 1864796141l, 1864796654l, 1864796824l, 1864798357l, 1864799382l, 1864799553l, 1864800066l, 1864800578l, 1864801091l, 1864804505l, 1864804676l, 1864805870l, 1864806382l, 1864807913l, 1864808767l, 1866668465l, 1866669153l, 1866671378l, 1866671890l, 1866674622l, 1866675305l, 1866676082l, 1866677099l, 1866677779l, 1866679316l, 1866679486l, 1866686539l, 1866687218l, 1866689595l, 1866690783l, 1877625826l, 1885213331l, 1928367338l, 1930377440l, 1985747575l, 1985748254l, 1985750129l, 1985750469l, 1985751322l, 1985751836l, 1985752349l, 1985753195l, 1985753536l, 1985753877l, 1985754390l, 1985755070l, 1985755621l, 1985755959l, 1985756300l, 1985756640l, 1985757320l, 1985757660l, 1985759193l, 1985760045l, 1985760420l, 1985761100l, 1985761440l, 1985761779l, 1985764665l, 1988906522l, 1988923544l, 1988923715l, 1988928762l, 1988953612l, 1989042558l, 1997669587l, 2066268735l, 2071515200l, 2138183139l, 2168091604l, 2183211700l, 2283943838l, 2288993052l, 2375583286l, 2401246921l, 2445101834l, 2526981507l, 2556105062l, 2573771237l, 2684047915l, 2684049788l, 2684049958l, 2684050299l, 2684050811l, 2684052684l, 2684052854l, 2684053195l, 2684053707l, 2684055580l, 2684055750l, 2684056091l, 2684056603l, 2684058476l, 2684058646l, 2684058987l, 2684059499l, 2684061541l, 2684061882l, 2684062394l, 2684064095l, 2684064606l, 2684065117l, 2684066989l, 2684067159l, 2684067500l, 2684068012l, 2684069884l, 2684070054l, 2684070395l, 2684072950l, 2684073120l, 2684073461l, 2684076017l, 2687176342l, 2687176682l, 2687177010l, 2687177349l, 2687179050l, 2687179390l, 2687179730l, 2687180070l, 2687180750l, 2687181769l, 2687182788l, 2687183808l, 2687187623l, 2687200177l, 2687200519l, 2687200690l, 2687202881l, 2687207045l, 2687208499l, 2687209523l, 2687211919l, 2687213940l, 2687222213l, 2687223405l, 2694733527l, 2744832797l, 2744832966l, 2744837050l, 2744837389l, 2744841443l, 2744843307l, 2744845939l, 2744846278l, 2744849326l, 2744850506l, 2744852703l, 2744853209l, 2744854230l, 2744854899l, 2744860132l, 2744861666l, 2744862854l, 2744864516l, 2744866218l, 2744866558l, 2744867920l, 2744870433l, 2744871971l, 2744874533l, 2744875045l, 2744875557l, 2744876753l, 2744877436l, 2744878290l, 2744879473l, 2744884594l, 2744891287l, 2758577153l, 2776436344l, 2897991128l, 2918362545l, 2939581674l, 2939582526l, 2939584726l, 2939586932l, 2939587781l, 2939588119l, 2939589132l, 2939589468l, 2939589806l, 2939590316l, 2939590996l, 2939591329l, 2942787351l, 2942788128l, 2942789830l, 2942791873l, 2942792724l, 2942793917l, 2942794431l, 2942795454l, 2942796134l, 2942796645l, 2942798446l, 2942801337l, 2942846334l, 2942848183l, 2942848351l, 2942849548l, 2942849719l, 2942852280l, 2942852963l, 2942853649l, 2942853820l, 2942853991l, 2942856040l, 2942856382l, 2942857064l, 2942857573l, 2942857744l, 2942860133l, 2942864059l, 2942877196l, 2942878564l, 2942880015l, 2942880186l, 2988673834l, 3024261320l};
		array[333] = new long[]{346235213, 349342109, 656710173, 667326247, 713987780, 721195839, 761285138, 928021248, 1154273523, 1171459401, 1246849779, 1295624467, 1295625147, 1295625656, 1295626678, 1295627358, 1347538083, 1361547612, 2389244384l, 2923310518l, 3014634950l};
		shortcuts = TiledAlignerUtil.getShortCutPositionsForSmithwaterman(array);
		assertEquals(1, shortcuts.size());
		assertEquals(1295627025, shortcuts.keys()[0]);
	}
	
	@Test
	public void shortcutWithBuffer() {
		long[][] array = new long[3][];
		array = new long[68][];
//		array[0] = new long[]{2843153l, 12681925l, 55525982l, 99383873l, 99399090l, 116571131l, 119904844l, 209925742l, 242446648l, 243893607l, 246311740l, 249573822l, 252683662l, 256214025l, 262214726l, 286959752l, 304187696l, 312333811l, 354392966l, 370329904l, 378625309l, 506273721l, 520511223l, 538556960l, 619665717l, 659988865l, 691133798l, 725968824l, 731441637l, 753001157l, 777260203l, 778793794l, 821596918l, 828394955l, 862170300l, 883290075l, 884037102l, 887264280l, 920530252l, 921981731l, 924023762l, 953213399l, 980104050l, 986602508l, 997623927l, 1041701286l, 1042229577l, 1091640131l, 1124574950l, 1124586492l, 1127969878l, 1128890105l, 1176804192l, 1196036104l, 1202219346l, 1204258486l, 1220724666l, 1253915192l, 1280888957l, 1281352391l, 1281442135l, 1285525163l, 1289630315l, 1359338403l, 1383097840l, 1392426699l, 1392547836l, 1464972230l, 1477577882l, 1489077751l, 1491351171l, 1520464905l, 1550573692l, 1551772295l, 1582833571l, 1604725156l, 1628593406l, 1630304350l, 1631921365l, 1648677864l, 1665283524l, 1687008419l, 1817364991l, 1851067968l, 1873007361l, 1900414444l, 1937715635l, 1956099333l, 1997839906l, 2009110291l, 2011701014l, 2026706753l, 2032131270l, 2049441972l, 2067146988l, 2083990378l, 2130774141l, 2135428001l, 2136797511l, 2171276400l, 2174144390l, 2235291710l, 2259154471l, 2264427895l, 2284494275l, 2286766979l, 2288056310l, 2303155066l, 2304612210l, 2332977171l, 2368487213l, 2381325787l, 2411647626l, 2432657581l, 2439650710l, 2475696344l, 2485494102l, 2495613978l, 2515342764l, 2531231498l, 2539748425l, 2539976941l, 2548845301l, 2551179560l, 2623982814l, 2625338657l, 2638600915l, 2645474445l, 2649704168l, 2676289191l, 2748002703l, 2749224009l, 2759600781l, 2777188202l, 2778231005l, 2798298738l, 2818440215l, 2828180663l, 2857915225l, 2918263870l, 2919383391l, 3005877509l, 3023678259l};
		array[0] = new long[]{1176804192l};
		array[67] = new long[]{90351255, 439695611, 777771917, 1094002331, 1167523024, 1176804877, 1228579535, 1354039040, 1561128813, 1856882536, 1870698140, 1890031905, 2113951585, 2617800701l, 2683547413l, 2742508068l, 2770451401l};
		TLongIntMap shortcuts = TiledAlignerUtil.getShortCutPositionsForSmithwaterman(array, 500000);
		assertEquals(1, shortcuts.size());
		assertEquals(1176804192, shortcuts.keys()[0]);
		
		array[0] = new long[]{1176804192l};
		array[67] = new long[]{90351255, 439695611, 777771917, 1094002331, 1167523024, 1176804877};
		shortcuts = TiledAlignerUtil.getShortCutPositionsForSmithwaterman(array, 500000);
		assertEquals(1, shortcuts.size());
		assertEquals(1176804192, shortcuts.keys()[0]);
		
		array[0] = new long[]{1176804192l};
		array[67] = new long[]{1176804877, 1228579535, 1354039040, 1561128813, 1856882536, 1870698140, 1890031905, 2113951585, 2617800701l, 2683547413l, 2742508068l, 2770451401l};
		shortcuts = TiledAlignerUtil.getShortCutPositionsForSmithwaterman(array, 500000);
		assertEquals(1, shortcuts.size());
		assertEquals(1176804192, shortcuts.keys()[0]);
	}
	
	@Test
	public void shortcutWithBuffer2() {
		long[][] array = new long[3][];
		
		array = new long[146][];
		array[0] = new long[]{150675826l, 224969540l, 235402251l, 350574988l, 362140009l, 366104660l, 374838852l, 406023020l, 499466387l, 562670576l, 570691276l, 587138623l, 726845374l, 726925484l, 768374811l, 812204404l, 877860117l, 896460260l, 926621236l, 954150533l, 1016517040l, 1088933751l, 1111996240l, 1128693716l, 1135850329l, 1278575514l, 1308759513l, 1319501472l, 1328594083l, 1332465721l, 1356506118l, 1364818331l, 1416734167l, 1458563273l, 1617357804l, 1647796311l, 1693177251l, 1718741599l, 1742299733l, 1857743031l, 1961340912l, 2070305177l, 2073704158l, 2132687497l, 2181360223l, 2247209116l, 2254814229l, 2343155286l, 2622434862l, 2649485036l, 2688377034l, 2694023666l, 2717197396l, 2755240549l, 2812789442l, 2896463243l, 2917200654l, 2917344301l, 2918359696l, 2944974164l};
		array[145] = new long[]{149546458l, 150816667l, 166989116l, 169452613l, 179929922l, 183124815l, 189158451l, 189463693l, 191306170l, 192311894l, 194590397l, 196011303l, 209927290l, 210389718l, 213059238l, 213611323l, 213720202l, 225440398l, 227530933l, 227531755l, 229523541l, 237674416l, 253695170l, 254660463l, 258463646l, 262765894l, 262993326l, 263196966l, 270991805l, 285730423l, 289221966l, 290141699l, 290829635l, 291919889l, 295057496l, 305721242l, 305968290l, 312312004l, 320614553l, 327820529l, 330707115l, 330890763l, 340989796l, 356426013l, 357831312l, 361229761l, 387419291l, 387639353l, 387797436l, 389795641l, 398399896l, 403182743l, 415916045l, 416456584l, 427614008l, 428386555l, 428744430l, 429654863l, 431541567l, 447850846l, 455219890l, 461054494l, 462788231l, 463380211l, 474089208l, 475288377l, 478705556l, 480448954l, 497935602l, 497953020l, 546092288l, 549106897l, 549679541l, 553012329l, 555704585l, 571924443l, 575489424l, 588234345l, 589757449l, 591349654l, 595980730l, 598661308l, 610794361l, 624243094l, 638786897l, 638920690l, 640330394l, 640410786l, 641474480l, 644937079l, 645159310l, 652524665l, 655608537l, 661992266l, 667588270l, 672559633l, 676340207l, 678746602l, 678876650l, 687053802l, 688864462l, 693090282l, 698563196l, 700342559l, 701676992l, 703025738l, 704622187l, 708639020l, 725109224l, 736115417l, 736221369l, 738003575l, 744687055l, 749520698l, 752432271l, 753665805l, 754650239l, 755705989l, 760054146l, 760429722l, 763576875l, 772308682l, 774744267l, 780637865l, 781774321l, 781938924l, 783856523l, 789645113l, 796064158l, 800540381l, 806042096l, 810353138l, 811047152l, 813438337l, 816125648l, 828353280l, 833798403l, 845165066l, 847381532l, 848689474l, 850090307l, 856712052l, 858758607l, 862367203l, 865593008l, 872784469l, 882081557l, 886183585l, 889517272l, 895345009l, 903377885l, 909627874l, 910033693l, 911045115l, 916694424l, 926574274l, 932283564l, 952979388l, 953303767l, 966424216l, 969904304l, 973089941l, 973478629l, 975883875l, 975936602l, 978385852l, 981130575l, 981657425l, 981685605l, 982744065l, 985406677l, 987271753l, 997092558l, 1002719671l, 1005147620l, 1007206331l, 1009985901l, 1021979824l, 1030564028l, 1042590751l, 1048315770l, 1051964070l, 1071232489l, 1074792622l, 1080023590l, 1087879023l, 1090254341l, 1095555249l, 1103460725l, 1117297028l, 1125763260l, 1127417953l, 1130973190l, 1132307256l, 1134245086l, 1134684232l, 1134949138l, 1141175572l, 1142370011l, 1143861529l, 1144335811l, 1152432463l, 1156391430l, 1156565792l, 1157610615l, 1160718771l, 1166083955l, 1166818874l, 1175714385l, 1180574211l, 1181616410l, 1186638146l, 1187116253l, 1190571212l, 1194958785l, 1204584373l, 1220257705l, 1238103644l, 1252965734l, 1289606167l, 1300790665l, 1309064370l, 1309975738l, 1312827723l, 1313639961l, 1318594362l, 1319501613l, 1322980283l, 1323787362l, 1328411075l, 1332575375l, 1334092490l, 1352313628l, 1355797413l, 1357171226l, 1357409219l, 1360795710l, 1374001110l, 1393749669l, 1396391636l, 1398010290l, 1401522193l, 1404100356l, 1407140770l, 1407770250l, 1424321475l, 1431709997l, 1434786048l, 1444768043l, 1445225320l, 1445678796l, 1453395363l, 1453848977l, 1454391576l, 1455743057l, 1464824276l, 1471777142l, 1472023274l, 1475526898l, 1476262989l, 1484720384l, 1502527348l, 1503354943l, 1518344974l, 1518503915l, 1519353305l, 1524474994l, 1527221474l, 1546858621l, 1550063253l, 1551194166l, 1551272645l, 1552100244l, 1558459553l, 1561901821l, 1565169334l, 1567526880l, 1578294906l, 1617888569l, 1618497576l, 1628297146l, 1630791232l, 1632165409l, 1634446814l, 1644191501l, 1661601987l, 1682158555l, 1686777986l, 1689170206l, 1689655767l, 1690082741l, 1693539957l, 1702857022l, 1706969486l, 1709395828l, 1711148767l, 1713566761l, 1730844524l, 1735102289l, 1735813608l, 1737360988l, 1747832797l, 1748072979l, 1767088119l, 1772348278l, 1772521826l, 1776308308l, 1788537312l, 1790500155l, 1791489690l, 1792175440l, 1792438692l, 1802319080l, 1802850031l, 1812942444l, 1837939788l, 1840733552l, 1842192476l, 1842517729l, 1845417947l, 1847125760l, 1854570347l, 1857412354l, 1857412462l, 1864834023l, 1864980538l, 1871552370l, 1873680423l, 1882310654l, 1886789069l, 1889864302l, 1895142848l, 1897495437l, 1897638913l, 1903222120l, 1905509062l, 1905695723l, 1913385423l, 1920041820l, 1920636320l, 1932693660l, 1946137987l, 1967540128l, 1972447586l, 1973119865l, 1973743334l, 1980302230l, 1981465491l, 1996866419l, 2003240737l, 2006627257l, 2012206312l, 2016623473l, 2018790825l, 2020857609l, 2023579469l, 2030284932l, 2030425573l, 2034691680l, 2042091467l, 2045718315l, 2050441162l, 2069076170l, 2078317551l, 2082028244l, 2120474150l, 2131363297l, 2134162967l, 2137183665l, 2140478702l, 2142461589l, 2146873549l, 2148034273l, 2148263826l, 2148857252l, 2149191774l, 2154234728l, 2156702422l, 2156882210l, 2166304443l, 2167567536l, 2168418391l, 2172168775l, 2177278274l, 2180438407l, 2189695616l, 2193729991l, 2194704885l, 2197464562l, 2225966826l, 2229469248l, 2235996591l, 2236319647l, 2241828840l, 2242483499l, 2244215845l, 2250756837l, 2255261490l, 2264043239l, 2282305363l, 2283386103l, 2284702339l, 2284831652l, 2286724027l, 2306709401l, 2327628101l, 2328634700l, 2333710344l, 2335108735l, 2343983640l, 2359524075l, 2362022430l, 2363904068l, 2366175101l, 2375458006l, 2402191984l, 2408463901l, 2442554319l, 2461917711l, 2463236784l, 2468207859l, 2468327806l, 2470216638l, 2470533250l, 2472398675l, 2473256551l, 2484145096l, 2486638126l, 2511029258l, 2515938432l, 2516008645l, 2520756064l, 2521882674l, 2527754404l, 2532883606l, 2539535883l, 2542741234l, 2546436714l, 2546556755l, 2548957586l, 2549322005l, 2550966631l, 2558964681l, 2586257365l, 2592764986l, 2605088481l, 2605376648l, 2608722301l, 2612752845l, 2617282201l, 2619405731l, 2631057548l, 2631756442l, 2643000971l, 2643354322l, 2643430557l, 2643811650l, 2644131617l, 2649086011l, 2650806775l, 2651736904l, 2659358075l, 2661817103l, 2669310368l, 2681904925l, 2683552774l, 2687392605l, 2688304794l, 2691041149l, 2691763292l, 2693928243l, 2700238584l, 2716653340l, 2726347925l, 2732068670l, 2737563946l, 2739770723l, 2740773143l, 2749448273l, 2751909597l, 2758309458l, 2759368356l, 2776759319l, 2798694733l, 2803067637l, 2812457962l, 2816541486l, 2847024226l, 2867230805l, 2886596462l, 2889792820l, 2892232668l, 2895260446l, 2906892629l, 2909191908l, 2916489194l, 2917702646l, 2918694000l, 2920766360l, 2927067131l, 2937445050l, 2953291766l, 2953368873l, 2962383184l, 2971820284l, 2972370253l, 2974433422l, 2977140412l, 2979834664l, 2982159656l, 2997324882l};
		TLongIntMap shortcuts = TiledAlignerUtil.getShortCutPositionsForSmithwaterman(array, 500000);
		
		for (long key : shortcuts.keys()) {
			System.out.println("key: " + key + ", value: " + shortcuts.get(key));
		}
		assertEquals(16, shortcuts.size());
		assertEquals(224969540, shortcuts.keys()[0]);
	}
	
	@Test
	public void getSW() {
		String ref = "ACTGGTCTCGAACCCCTAACCTCAAGTGATTCACCCACCTTGGCCTCCCAAATTGCTGGGATTACAGGCGTGAGCCAGTATGCCTGGCCACAAGTCATACTTTAAATCACATATGATATTACTTTTAATTACTTTTTTTT";
		String sequence = "ATTACAGGCGGGAGCCACTACTCCTGGCCACAAGTCATACTTTAAATCACATATGATATTACTTTTAATTACTTTTTTTT";
		int maxBlockCount = 5;
		boolean preferStrict = false;
		float maxMisMatchCount = 10;
		String [] blat = TiledAlignerUtil.getIntelligentSwDiffs(ref, sequence, maxMisMatchCount, maxBlockCount, preferStrict);
		/*
		 * ATTACAGGCGTGAGCCAGTATGCCTGGCCACAAGTCATACTTTAAATCACATATGATATTACTTTTAATTACTTTTTTTT
||||||||||.||||||.||..||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
ATTACAGGCGGGAGCCACTACTCCTGGCCACAAGTCATACTTTAAATCACATATGATATTACTTTTAATTACTTTTTTTT
		 */
		assertEquals(3, blat.length);
		assertEquals("ATTACAGGCGTGAGCCAGTATGCCTGGCCACAAGTCATACTTTAAATCACATATGATATTACTTTTAATTACTTTTTTTT", blat[0]);
		assertEquals("||||||||||.||||||.||..||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", blat[1]);
		assertEquals("ATTACAGGCGGGAGCCACTACTCCTGGCCACAAGTCATACTTTAAATCACATATGATATTACTTTTAATTACTTTTTTTT", blat[2]);
	}

	@Test
	public void shortcutWithBuffer3() {
		long[][] array = new long[156][];
		array[0]   = new long[]{2134658876l, 2136467589l, 2136488151l, 2136778431l, 2138315155l};
		array[155] = new long[]{640328772l, 649207738l, 686209323l, 695044635l, 751704976l, 839732924l, 875931157l, 957910939l, 2136488292l, 2267904068l, 2298108581l, 2390066189l, 2390442781l, 2392170172l, 2393049279l, 2401080690l};
		TLongIntMap shortcuts = TiledAlignerUtil.getShortCutPositionsForSmithwaterman(array, 500000);
		
		for (long key : shortcuts.keys()) {
			System.out.println("key: " + key + ", value: " + shortcuts.get(key));
		}
		assertEquals(3, shortcuts.size());
		assertEquals(2136467589, shortcuts.keys()[0]);
	}
	
	@Test
	public void getIntFromTile() {
		assertEquals(0, NumberUtils.convertTileToInt("AAAAAAAAAAAAA"));
		assertEquals(1, NumberUtils.convertTileToInt("CAAAAAAAAAAAA"));
		assertEquals(2, NumberUtils.convertTileToInt("GAAAAAAAAAAAA"));
		assertEquals(3, NumberUtils.convertTileToInt("TAAAAAAAAAAAA"));
		assertEquals(-1, NumberUtils.convertTileToInt("NAAAAAAAAAAAA"));
		assertEquals(-1, NumberUtils.convertTileToInt("XAAAAAAAAAAAA"));
		assertEquals(4, NumberUtils.convertTileToInt("ACAAAAAAAAAAA"));	// 1 << 2
		assertEquals(8, NumberUtils.convertTileToInt("AGAAAAAAAAAAA"));	// 1 << 2
		assertEquals(12, NumberUtils.convertTileToInt("ATAAAAAAAAAAA"));	// 1 << 2
		assertEquals(-1, NumberUtils.convertTileToInt("ANAAAAAAAAAAA"));	// 1 << 2
	}
	
	@Test
	public void decipherInts() {
		assertEquals("10001", Integer.toBinaryString(NumberUtils.convertTileToInt("CAC")));
		assertEquals("100010", Integer.toBinaryString(NumberUtils.convertTileToInt("GAG")));
		assertEquals("11111111111111111111111111111111", Integer.toBinaryString(NumberUtils.convertTileToInt("NGC")));
		assertEquals("11000", Integer.toBinaryString(NumberUtils.convertTileToInt("AGC")));
	}
	
	@Test
	public void longFromTileRealLife() {
		assertEquals(63887556, NumberUtils.convertTileToInt("ACATAGCTGTATT"));
		assertEquals(25883904, NumberUtils.convertTileToInt("AAAACCTTGGAGC"));
		assertEquals(-1, NumberUtils.convertTileToInt("AAAACCTTGGNGC"));
		System.out.println("309104660 as binary: " + Integer.toBinaryString(309104660));
		assertEquals("0", Integer.toBinaryString(NumberUtils.convertTileToInt("AAAA")));
		assertEquals("100000000", Integer.toBinaryString(NumberUtils.convertTileToInt("AAAAC")));
		assertEquals("10100000000", Integer.toBinaryString(NumberUtils.convertTileToInt("AAAACC")));
		assertEquals("11010100000000", Integer.toBinaryString(NumberUtils.convertTileToInt("AAAACCT")));
		assertEquals("1111010100000000", Integer.toBinaryString(NumberUtils.convertTileToInt("AAAACCTT")));
		assertEquals("101111010100000000", Integer.toBinaryString(NumberUtils.convertTileToInt("AAAACCTTG")));
		assertEquals("10101111010100000000", Integer.toBinaryString(NumberUtils.convertTileToInt("AAAACCTTGG")));
		assertEquals("1010101111010100000000", Integer.toBinaryString(NumberUtils.convertTileToInt("AAAACCTTGGG")));
		assertEquals("11111111111111111111111111111111", Integer.toBinaryString(NumberUtils.convertTileToInt("AAAACCTTGGN")));
	}
	
	@Test
	public void getSubString() {
		String bufferedRef 	= "AAACTCCAGCCTATGGTTCTTCAACTCAGTGAAACTGTGGCTTTTTTGTCATAGCTTTAACCCTCTTGTTCTAGAAGTGGGTCTTGGGCTATGATCTATATCAAAGGCAAAAAACTACACAATGAGAAAGTCACCCTGGTTATTCCAAGTGTCAGCTGCCTTCCAGTTTCTGCCTAGTTTTGCTCACTGCCCAGTGCTCTCAGGGAATCGTTACTCATGCTTTGTCCAGCATCTGTGGTTGTCACCAGAAGCCAGAAGTCCACACCATCTCATTTCACCTCTGCATGGGATGAGCATATGGACACTCAGAGAGGTGAAGCAAAGCACCCAGTGCTTCCCAGCTGTGATGAGCTTCTTAGAAATATTTGCTGAGTGTCTACATCCTGCCAGGCACTGTGCTGGGTCCTGGCAACACAGCCATGAGCTACTTCGACAAAGTCCTTCCACCCAGGGTACTTACATACTGGTAGCAAAATTGGATGATAAGCTAGTAAACCCTCTAATAAATAGGATAACCATGGAGGATGGTAAGTAGGCCAGGATACGACTGTGAGGGAGAGGAGACAGCTTTGGTTTGGTGGTCAGGCAGGTGACATTTTAGATGAAATAAGAATGAAGTGAAGGGATGAACCTGTGGATTTCTAGGGAAAAGCTTTCCGTGCAGAACACCATCCAGAGCAAGGCTATACGAGGGACAAGTTTGGATTGCTGCATTCAAGGAAGAAGGAGGAGGTCTGTGTGGCTGCAGCCGTGTGAGCCAGGGCGAGAGGAAGGACATGGAGCAGGCAGGGACAGACGCTTTCCTCTCTGATATGGTTTGGCTGTGTCCCCACCCAAATCTCATTTTGAATTGTAGTTCCCATAATCTTCACATGTCGTGGGAGGGACCCAGTGGGAGGTAATTGAATCATGGGGGCAGGTTTTTCCTGTGCTGTTCTCGTGATAGTGAATAAGTCTCATGAGATCTGATGGTTTTATCAAGGGCAGTTCCCCTGCACACGCTCTGTTGCCTGCCACCATGTGGGACATGTCTTTGTTCCTCCTTCACCTTCCACCATGATTGTGAGGCCTCCCCAGCTATGTGGAACTGTGAATCCATTAAACCTCTTTTTCTTTGTAAATTGCTCAGTCTTGGGTGTGTCTTTATTAGCAATGTGAGAACAGGCTAAAACAACCTCCTTCCTCTACAGCTTCTCTGTGCTCCCACTCCTAGAACTTATCGCCTTCCCAGCTGCACCCAACCCCAAGGACCACTTTTGCAGCAACCAAGTGAAGATTTAGGAGCCTGGAGAATCTGATGGCTTGAATCTTTGAGCTCCTCCTCTCTTTCTAAGCCCATAGAGAAGGTTGAGAGAATTGAATGAGACAACACACGTCAGGCACTAAGAACGTATGTGTTTAAAAAGTCAGTACAACAATAGATGCTGGAGAAGATGTGGAGAAATAGGAATGCTTTTACACTGCTGGTGGGAGTGTAAATTAATTCAACCATTGTGGAAGACAGTGTGGTGATTCCTCAAGGATCTAGAACCAGAAATACCATTTGACTCAGCAATCCCACTATGGGTATATACCCAAAGGATTATAAATCATTCTACTATAAAGACACATGCACATGTATGTTTATTGCAGCACTGTTCACAATAGCAAAGAGTTGGAACCAATCCAAATGCCCATCAATGATAGACTGGATAAAGAAAATGTGGCACATATACACCATGGAATACTATGCAGCCTTAAAAAAGGATGAGTTCATGTCCTTCGCAGGGACATGGTTGAAACTGAGAAACCATCGTTCTCAGCAACCTAAAACAAGAACAGAAAACCAAACACCACATGTTCTCACTCACAAGTGGGAGTTGAACAATGAGAACACATGGACACAGGGAGGGGAACATCACACACCAGGGCCTATCAGGGAGTAGGGGGCTAGGGTTGATGGGTACAGCAAACCACCATGGCACGTGTATACCTATGTAACAAACCTGCACATTCTGCACATGTATCCAAGAACTTAGAGTATAATAATAATAATAATAATAATAAAAGAATGTATGTGCTGAATATTCCTTGGTGCACTTTACATTTGCAAGCTAATATAATCCTAGCAATAACCCTCTGGAGTGGGCATTATTATTACTGTTGTTTCATTAGCTTATTTCACAAATAAGGAAACCAAGACTCAGAGAGGCTAGGTGGCTTGTCCAGGGCCACAAAGCTAGAAAAGAACTGGGGGCCGGGCACAGTGGCTCATGCCTGTAATCCCAGGACAGTGGGAGGCCAAGGCGGGTGGATCGCTTGAGGCCTGGAGTTTGAAACCAGCCTGGTCAACGTGGCAAAACTCTGTCTCTACAAAAAATACAAAAATTAGTCAGGTATAGTGGTGCTCGTCTATAGTCCCAGCTACTCTGGAGGCTGAGGTGGGAGGATTGCTTAAGCCTGAGAGGTCCAGGCTGCAGTGAGCCGTGATTGCGCCACTGCACTCCAGGCTGGGTGACAGAGTGAGACCCTGTCTCAAACAAACAAACAAACAAACAAACAAAGATTGGGATTTGAACTCAGGCTAATTTTACCACTGTACTTTATTGGCTCTTCAATCAAGACCCAGCATATCATAAGCTAATAAGTATATTAATTCTAAGTCTGAGCTAATGTGTTTATTGCCTTAAAAATTGACATGATAGGAAGACATTCTCCTGCACTATGAAACAAAAGAGAAGGAAAAAATTTAACATGACATTTCCATTCAACTCAACACTGTGTTTATGCTGTGACTTCAAACCCCTTAAGGCATACACCCAACCCCCAGGCCCTTAGAACAGGGGGTTCAAACTAGAACCCATGAACCCAATCCGGCCTTCCTCCTGCTTTTATAAATCAGCTTTTACAGAATATGGCTATGCCTGTTTGTTTCTGGATTGCCTGTGGCCTCTGGTTGCTGCCACAATGACAGAATTGAGCAGTTGCATGGGACATATCTATACTAAAAAAATTATTTATGGCTTATCTGACATTCAGATCTAACTGGCTTCCCGTATTTTCTTTGACAACACTGCCAAGGTGTGAATTCCCAGGCAGAGAGAGGAAGAGTCCTGCAGGGACTTATGACAGCCAGACTTTTTCACGAGGGTGGGTCAGGGGACCACAGCCCAAAGAGAAGGCTTCAAATGCCCCAGATGACTTTATGGCAGGATATGCTCCCAGCACCTGAACAAAGGTGAGTCTCTATTTTCTAAGGGAGCACCCTAGAGTCTAATCTTGGAATCTAGGGTCTGCAGTTGTAACGCAGCTGGGAAATATATATACATTTTTAATTTTTTGATTGTTGTCATTTTGTTGTGTTTGTGTGGCTCACAAGCTGAAGAGGTCTGGTTTTCCCATCCAAGATCTTTTTGCAGTTGTTTTCTTCTCGAGGTCTTCCTGCCTCACCCTCTCTGGCTCTTGCTGTCTTTCTCCTTTACATTGCGTGCTCAGGGAATGGTTCAAGAGATCCAATGCCTTCTGACAGGTGACAAGACAGAGTGAACAGTGCAGTGGGTTTGGGGCCATAATCCAGGTGGCAGAAGGAGGAGCCACGAGGCTTAGAAGGAAACAAAACAGAGTCTGCTGCCGAAGAGGCCCCAAACCAAGGGAGGCCCTGGAAGGCTCAAAACTAGGAGAGGCCCAGGGAGGCCCCAAACCAGGGGAAGCCCTGGGAGGCCAAGGGAGGCCCAAAACCAGGGGTTGCAGCTCTCTTTAGATTTTTAAAATAATTATTAGGGGGCATTATTCTCAGATATGGGGCTGCATGGCTGAGTGGAACCGACACCAGCTTCTTTTTTTTTTTTTTTTTTTTTTTTTTGAGGCAGAGTCTCGCTCTGTGGCCCAGGCTGGAGTGCAGTGGCACGATCTCGGCTCACTGCAAGCTCCGCCTCCCTGGGTTCTCACCATTCTCCTGCCTCAGCCTCCCGACTAGCTGGGACTACAGGTGCCCGCCACCATGCCCGGCTAATTTTTTTGTATTTTTTGTAGAGACGGGGTTTCACCGTGTTAGCCAGG";
		String swDiff 		= "CATGTATCCAAGAACTT-AGAGTATAATAATAATAATA";
		String seq 			= "CATGTATCCAAGAACTTAAGAGTATAATAATAATAATA";
		
		assertEquals(-1, StringUtils.indexOfSubStringInString(bufferedRef, swDiff));
		assertEquals(-1, StringUtils.indexOfSubStringInString(bufferedRef, seq));
		assertEquals(2000 - 1, StringUtils.indexOfSubStringInString(bufferedRef, swDiff.replaceAll("-", "")));
	}
	
	@Test
	public void getBestStartPosition2() {
		/*
		 * CAGGGTTCTCTAGAGGGACAGAACCTATAGGAC
		 */
		
		Map<String, TLongList> map = new HashMap<>();
		map.put("CAGGGTTCTCTAG", new TLongArrayList(new long[] {-9223372036854774962l}));
		map.put("AGGGTTCTCTAGA", new TLongArrayList(new long[] {-9223372036854774962l}));
		map.put("GGGTTCTCTAGAG", new TLongArrayList(new long[] {-9223372036854774962l}));
		map.put("GGTTCTCTAGAGG", new TLongArrayList(new long[] {-9223372036854774962l}));
		map.put("GTTCTCTAGAGGG", new TLongArrayList(new long[] {-9223372036854774962l}));
		map.put("TTCTCTAGAGGGA", new TLongArrayList(new long[] {-9223372036854774962l}));
		map.put("TCTCTAGAGGGAC", new TLongArrayList(new long[] {-9223372036854774962l}));
		map.put("CTCTAGAGGGACA", new TLongArrayList(new long[] {-9223372036854774962l}));
		map.put("TCTAGAGGGACAG", new TLongArrayList(new long[] {-9223372036854774962l}));
		map.put("CTAGAGGGACAGA", new TLongArrayList(new long[] {-9223372036854774962l}));
		map.put("TAGAGGGACAGAA", new TLongArrayList(new long[] {-9223372036854774962l}));
		map.put("AGAGGGACAGAAC", new TLongArrayList(new long[] {-9223372036854774962l}));
		Map<Integer, TLongList> map2 = TiledAlignerUtil.getTiles(map, "CAGGGTTCTCTAGAGGGACAGAAC", 13, false);
		assertEquals(true, map2.isEmpty());
		map.put("GAGGGACAGAACC", new TLongArrayList(new long[] {1825104, 36705710, 41958144, 48159016, 117254513, 143240681, 225228697, 228958655, 253180746, 255001755, 286295391, 292020183, 344813194, 361288452, 403803121, 430679205, 451613441, 503168192, 521133451, 599557575, 606474596, 692981379, 703505814, 755043781, 832600275, 836707885, 843425380, 865606218, 877156033, 1036083851, 1055349167, 1100618024, 1129341187, 1132758616, 1135775311, 1146126997, 1150385505, 1169401419, 1196981567, 1211992123, 1237889631, 1344861702, 1386838351, 1424733943, 1429116967, 1440327766, 1526738176, 1537195229, 1543726675, 1621295813, 1640494112, 1692228394, 1695132429, 1710090332, 1727385550, 1744718298, 1793225499, 1795801243, 1822887708, 1900339542, 1913656852, 1941627856, 1954494293, 1956599590}));
		map2 = TiledAlignerUtil.getTiles(map, "CAGGGTTCTCTAGAGGGACAGAACC", 13, false);
		assertEquals(true, map2.isEmpty());	// need more than 1..
		map.put("AGGGACAGAACCT", new TLongArrayList(new long[] {75765291, 85286073, 99249849, 230921629, 255001756, 264122761, 368490478, 388000734, 403538580, 468448693, 494357716, 505596948, 544747435, 591289370, 732793121, 743716627, 763370268, 788228702, 862334305, 865606219, 935803044, 989010175, 1097828406, 1146126998, 1173463496, 1211992124, 1279712518, 1326781769, 1330844343, 1429116968, 1446207034, 1451115574, 1543726676, 1727385551, 1744718299, 1795524616, 1827714195, 1933885487, 1977994403, 1997345602}));
		map2 = TiledAlignerUtil.getTiles(map, "CAGGGTTCTCTAGAGGGACAGAACCT", 13, false);
		assertEquals(true, map2.isEmpty());	// need more than 1..
		map.put("GGGACAGAACCTA", new TLongArrayList(new long[] {14757191, 75765292, 204680550, 255001757, 259085515, 377889668, 384618430, 720440933, 732793122, 743716628, 788228703, 964181144, 989010176, 1146126999, 1211992125, 1326781770, 1429116969, 1679131147, 1727385552, 1744718300, 1783602053, 1795524617, 1798016615, 1808224193, 1827714196, 1933885488}));
		map.put("GGACAGAACCTAT", new TLongArrayList(new long[] {75765293, 252352569, 384618431, 493447509, 576429637, 1078140728, 1126178594, 1199390115, 1211992126, 1216880641, 1783602054, 1824857273}));
		map.put("GACAGAACCTATA", new TLongArrayList(new long[] {240085378, 713147939, 721664141, 760998246, 766699927, 819625291, 961405967, 979085294, 1153951375, 1193858084, 1199390116, 1211992127, 1323168911, 1372989770, 1418825357, 1693540188, 1702097469, 1824857274}));
		map.put("ACAGAACCTATAG", new TLongArrayList(new long[] {70159035, 107551221, 167070268, 197226043, 240085379, 292596126, 447729384, 545841946, 576814663, 746319277, 1010084625, 1065956843, 1134800044, 1157163887, 1190598256, 1197772690, 1211992128, 1267742449, 1311442740, 1312437141, 1319046180, 1370440310, 1419363501, 1443115878, 1456445302, 1530058642, 1739520015, 1961483020, 1964317543}));
		map.put("CAGAACCTATAGG", new TLongArrayList(new long[] {32324742, 107551222, 110681055, 188907361, 197226044, 240085380, 244008567, 292596127, 326448735, 472138010, 495787300, 542995738, 549420278, 746319278, 1027933316, 1051756746, 1078896281, 1148473114, 1211992129, 1319046181, 1338322397, 1371610388, 1419363502, 1443115879, 1642523089, 1778730457, 1781665742, 1863331753, 1964317544}));
		map.put("AGAACCTATAGGA", new TLongArrayList(new long[] {32324743, 107551223, 187752890, 188907362, 197226045, 197605953, 240085381, 245747958, 292596128, 326448736, 332014839, 542995739, 555352939, 588358487, 715428085, 746319279, 788672531, 1089051613, 1119633563, 1148473115, 1187082805, 1211992130, 1252988464, 1419363503, 1443115880, 1466283432, 1778730458, 1863331754, 1952380292, 1964317545}));
		map.put("GAACCTATAGGAC", new TLongArrayList(new long[] {112137907, 145978911, 147520644, 187752891, 188907363, 197484253, 326448737, 348818128, 391391905, 542995740, 715428086, 784531043, 1211992131, 1419363504, 1482911620, 1542594794, 1837993831, 1871553322}));
		map2 = TiledAlignerUtil.getTiles(map, "CAGGGTTCTCTAGAGGGACAGAACCTATAGGAC", 13, false);
		assertEquals(false, map2.isEmpty());	// need more than 1..
		List<Integer> keys = new ArrayList<>(map2.keySet());
		keys.sort(null);
		for (int i = keys.size() - 1; i >= 0 ; i--) {
			System.out.println("key: " + keys.get(i) + ", counts: " + Arrays.toString(NumberUtils.splitIntInto2(keys.get(i))) + ", positions: " + map2.get(keys.get(i)).toString());
		}
		/*
		 * we don't take common tiles into account at beginning of sequence, but we do at the end...
		 */
		assertArrayEquals(new long[] {13195351525435l}, map2.get(NumberUtils.pack2IntsInto1(9, 0)).toArray());
	}
	
	@Test
	public void getBestStartPosition() {
		/*
		 * ATTAACTAATGGGCAAAATAACCAGTCAGCATCATAATG
		 */
		Map<String, TLongList> map = new HashMap<>();
		map.put("ATTAACTAATGGG", new TLongArrayList(new long[] {89266037, 100886305, 110690353, 163961462, 194197024, 208161472, 269911080, 334346319, 379579117, 400211609}));
		map.put("TTAACTAATGGGC", new TLongArrayList(new long[] {100886306, 163961463, 208171514, 269911081, 332722121, 379579118, 433534056, 495738839, 511682963, 863154682}));
		map.put("TAACTAATGGGCA", new TLongArrayList(new long[] {74653988, 89506531, 100886307, 163961464, 175782473, 185399215, 213374351, 220606361, 246362226, 253578782, 269911082, 272508348, 284701971, 315369799, 379579119, 433534057, 441411423, 459791770, 476131365}));
		Map<Integer, TLongList> map2 = TiledAlignerUtil.getTiles(map, "ATTAACTAATGGGCA", 13, false);
		assertEquals(0, map2.size());

		/*
		 * add some more tiles and positions
		 */
		map.put("AACTAATGGGCAA", new TLongArrayList(new long[] {20330815,47196097,66119746,69883256,72894698,75870471,83188468,94601743,95226113,96264855,100886308,102605048,109086571,110401685,115904631,147329066,157266096,163961465,170540408,173000738,179665557,181853437,199604066,207763895,213806980,220606362,222321205,227663677,247297496,254649471,269911083,283944286,290534935,298722012,299362024,299837961,301371166,303141373,312986280,315369800,322122628,333833763,348911202,351804835,354476473,366991826,369814365,379579120,388806218l}));
		map.put("ACTAATGGGCAAA", new TLongArrayList(new long[] {20330816,35353898,47196098,66119747,69883257,72894699,75870472,94601744,95226114,96264856,102605049,109086572,110401686,111454523,115904632,147329067,157266097,163961466,170540409,173000739,179665558,181853438,199604067,207763896,213806981,220606363,227663678,242334784,247297497,254649472,261653812,268778753,269911084,283944287,290534936,298722013,299362025,299837962,301371167,303141374,312986281,315369801,320779602,322122629,333833764,348911203,351804836,354476474,366991827,369814366,379579121,388806219,397192667,398431831}));
		map.put("CTAATGGGCAAAA", new TLongArrayList(new long[] {-9223372036854775303l}));
		map.put("TAATGGGCAAAAT", new TLongArrayList(new long[] {-9223372036854775303l}));
		map.put("AATGGGCAAAATA", new TLongArrayList(new long[] {6001666,9891720,15975021,17613674,20330819,35942864,47196101,50476886,54815924,57387126,59045581,68575525,69883260,70984251,72894702,75403673,75870475,85607205,85976126,86539739,89537198,91578583,91992886,93150053,95161863,95226117,96264859,97499155,101287596,102605052,105376154,105593257,109086575,110401689,114139268,115904635,119209474,119277234,120006272,120118592,145070989,147329070,147749993,157266100,157633506,158503963,158836590,163961469,166467351,170540412,173000742,174474176,175398594,178305230,179665561,180802407,181853441,187090972,188469297,190299440,194192697,197538236,199604070,199613982,205084351,207763899,209265964,213806984,219819805,220606366,222107973,227663681,232501536,238801255,241126653,242334787,244566513,247297500,254100094,254649475,259306220,264173032,264658115,264709085,267216050,268541725,269911087,270163861,271547486,275153392,280317288,281266552,281599890,288003788,290534939,298722016,299591953,300915175,301371170,303141377,306842423,306891831,308756037,309347010,312986284,313101032,315369804,320322012,322065613,322122632,326946156,333833767,336172452,345696914,348911206,351804839,351817009,354476477,354557748,360216598,360487249,362477603,365424105,366991830,369814369,373958956,374970100,379536749,379579124,379651069,388273349}));
		map.put("ATGGGCAAAATAA", new TLongArrayList(new long[] {-9223372036854775303l}));
		map.put("TGGGCAAAATAAC", new TLongArrayList(new long[] {-9223372036854775303l}));
		map.put("GGGCAAAATAACC", new TLongArrayList(new long[] {-9223372036854775303l}));
		map.put("GGCAAAATAACCA", new TLongArrayList(new long[] {-9223372036854775303l}));
		map.put("GCAAAATAACCAG", new TLongArrayList(new long[] {-9223372036854775303l}));
		
		map2 = TiledAlignerUtil.getTiles(map, "ATTAACTAATGGGCAAAATAACCAG", 13, false);
		
		/*
		 * still zero
		 * commonly occurring tiles ( the -ve ones here) are only added to the tally score if there are fewer commonly occurring tiles than there are matching tiles
		 * This is not the case here.
		 */
		assertEquals(2, map2.size());
		List<Integer> keys = new ArrayList<>(map2.keySet());
		keys.sort(null);
		for (int i = keys.size() - 1; i >= 0 ; i--) {
			System.out.println("key: " + keys.get(i) + ", counts: " + Arrays.toString(NumberUtils.splitIntInto2(keys.get(i))) + ", positions: " + map2.get(keys.get(i)).toString());
		}
		assertArrayEquals(new long[] {163961462, 269911080, 379579117}, map2.get(NumberUtils.pack2IntsInto1(13, 0)).toArray());
		/*
		 * add some more tiles and positions
		 */
		map.put("CAAAATAACCAGT", new TLongArrayList(new long[] {49717858, 50512040, 84488408, 86551467, 88813839, 103294135, 146649282, 153328901, 167285249, 175744936, 175963480, 207371375, 225560633, 228785691, 247387147, 261064621, 269911093, 298791283, 298960184, 310514481, 314454599, 318099739, 318165214, 328194892, 351804845, 360718986, 367166183, 373817277, 379579130, 383305679}));
		map2 = TiledAlignerUtil.getTiles(map, "ATTAACTAATGGGCAAAATAACCAGT", 13, false);
		assertEquals(3, map2.size());
		keys = new ArrayList<>(map2.keySet());
		keys.sort(null);
		for (int i = keys.size() - 1; i >= 0 ; i--) {
			System.out.println("key: " + keys.get(i) + ", counts: " + Arrays.toString(NumberUtils.splitIntInto2(keys.get(i))) + ", positions: " + map2.get(keys.get(i)).toString());
		}
		assertArrayEquals(new long[] {163961462}, map2.get(NumberUtils.pack2IntsInto1(13, 0)).toArray());
		assertArrayEquals(new long[] {269911080, 379579117}, map2.get(NumberUtils.pack2IntsInto1(14, 0)).toArray());
		map2 = TiledAlignerUtil.getTiles(map, "ATTAACTAATGGGCAAAATAACCAGTCAGCATCATAATG", 13, false);
		assertEquals(3, map2.size());
		keys = new ArrayList<>(map2.keySet());
		keys.sort(null);
		for (int i = keys.size() - 1; i >= 0 ; i--) {
			System.out.println("key: " + keys.get(i) + ", counts: " + Arrays.toString(NumberUtils.splitIntInto2(keys.get(i))) + ", positions: " + map2.get(keys.get(i)).toString());
		}
		assertArrayEquals(new long[] {163961462}, map2.get(NumberUtils.pack2IntsInto1(13, 0)).toArray());
		assertArrayEquals(new long[] {269911080, 379579117}, map2.get(NumberUtils.pack2IntsInto1(14, 0)).toArray());
		
		/*
		 * create a TARecord 
		 */
		TARecord taRec = new TARecord("ATTAACTAATGGGCAAAATAACCAGTCAGCATCATAATG", map2);
		int [] maxTileCounts = taRec.getTopNCounts(3, 3);
		assertArrayEquals(new int[] {NumberUtils.pack2IntsInto1(11, 0), NumberUtils.pack2IntsInto1(13, 0), NumberUtils.pack2IntsInto1(14, 0)}, maxTileCounts);
		
		TLongList bestStartPositions = taRec.getStartPositionsForCount(maxTileCounts);
		assertEquals(6, bestStartPositions.size());
		assertEquals(true, bestStartPositions.contains(269911080));
		assertEquals(true, bestStartPositions.contains(379579117));
		assertEquals(true, bestStartPositions.contains(163961462));
		
		TLongList bestStartPositionsUpdated = ListUtils.removeAdjacentPositionsInList(bestStartPositions);
		assertEquals(true, bestStartPositionsUpdated.contains(269911080));
		assertEquals(true, bestStartPositionsUpdated.contains(379579117));
		assertEquals(true, bestStartPositionsUpdated.contains(163961462));
	}
	
	@Test
	public void getBlocks2() {
		String [] swDiffs = new String[] {"","|||||||||| |||||",""};
		List<Range<Integer>> ranges = TiledAlignerUtil.getBlockStartPositions(swDiffs);
		assertEquals(2, ranges.size());
		assertEquals(0, ranges.get(0).getMinimum().intValue());
		assertEquals(9, ranges.get(0).getMaximum().intValue());
		assertEquals(11, ranges.get(1).getMinimum().intValue());
		assertEquals(15, ranges.get(1).getMaximum().intValue());
	}
	
	@Test
	public void getBlocks3() {
		String [] swDiffs = new String[] {"","||||||||||  |||||",""};
		List<Range<Integer>> ranges = TiledAlignerUtil.getBlockStartPositions(swDiffs);
		assertEquals(2, ranges.size());
		assertEquals(0, ranges.get(0).getMinimum().intValue());
		assertEquals(9, ranges.get(0).getMaximum().intValue());
		assertEquals(12, ranges.get(1).getMinimum().intValue());
		assertEquals(16, ranges.get(1).getMaximum().intValue());
	}
	
	@Test
	public void getBlocks4() {
		String [] swDiffs = new String[] {"","||||||||||  ||||| ||",""};
		List<Range<Integer>> ranges = TiledAlignerUtil.getBlockStartPositions(swDiffs);
		assertEquals(3, ranges.size());
		assertEquals(0, ranges.get(0).getMinimum().intValue());
		assertEquals(9, ranges.get(0).getMaximum().intValue());
		assertEquals(12, ranges.get(1).getMinimum().intValue());
		assertEquals(16, ranges.get(1).getMaximum().intValue());
		assertEquals(18, ranges.get(2).getMinimum().intValue());
		assertEquals(19, ranges.get(2).getMaximum().intValue());
	}
	
	@Test
	public void getBlocks5() {
		String [] swDiffs = new String[] {"","||||||||||  ||||| || |",""};
		List<Range<Integer>> ranges = TiledAlignerUtil.getBlockStartPositions(swDiffs);
		assertEquals(4, ranges.size());
		assertEquals(0, ranges.get(0).getMinimum().intValue());
		assertEquals(9, ranges.get(0).getMaximum().intValue());
		assertEquals(12, ranges.get(1).getMinimum().intValue());
		assertEquals(16, ranges.get(1).getMaximum().intValue());
		assertEquals(18, ranges.get(2).getMinimum().intValue());
		assertEquals(19, ranges.get(2).getMaximum().intValue());
		assertEquals(21, ranges.get(3).getMinimum().intValue());
		assertEquals(21, ranges.get(3).getMaximum().intValue());
	}
	@Test
	public void getBlocksRealLife() {
		String [] swDiffs = new String[] {"TATGTGAGGGAGAAACAGTCAGAACCCAATAGCAGTGTTCTGGAATCCTATGTGACGGACATACATGTAGACCCC"
				,"|||||||||||||||||...||||||.|..|||.|||||||||||||||.||.|..||||||||||||||||.||"
				,"TATGTGAGGGAGAAACAAGTAGAACCTATCAGCTGTGTTCTGGAATCCTGTGGGGGGGACATACATGTAGACACC"};
		List<Range<Integer>> ranges = TiledAlignerUtil.getBlockStartPositions(swDiffs);
		assertEquals(1, ranges.size());
		assertEquals(0, ranges.get(0).getMinimum().intValue());
		assertEquals(74, ranges.get(0).getMaximum().intValue());
	}
	
	@Test
	public void getBlocksRealLife2() {
		String [] swDiffs = new String[] {"CTCAGAAACCTGCAGCAATGTTCTGCAATCCTATGGGAGGGACAAACACTCAGAACCCAGCCACTGTGTACTGGA"
				,"||||||||.|.|||..|.||||.|||||||||||||||||||| ||||.|||     || || || ||||...||"
				,"CTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGAC-AACATTCA-----CA-CC-CT-TGTAGCAGA"};
		List<Range<Integer>> ranges = TiledAlignerUtil.getBlockStartPositions(swDiffs);
		assertEquals(6, ranges.size());
		assertEquals(0, ranges.get(0).getMinimum().intValue());
		assertEquals(42, ranges.get(0).getMaximum().intValue());
		assertEquals(44, ranges.get(1).getMinimum().intValue());
		assertEquals(51, ranges.get(1).getMaximum().intValue());
		assertEquals(57, ranges.get(2).getMinimum().intValue());
		assertEquals(58, ranges.get(2).getMaximum().intValue());
		assertEquals(60, ranges.get(3).getMinimum().intValue());
		assertEquals(61, ranges.get(3).getMaximum().intValue());
		assertEquals(63, ranges.get(4).getMinimum().intValue());
		assertEquals(64, ranges.get(4).getMaximum().intValue());
		assertEquals(66, ranges.get(5).getMinimum().intValue());
		assertEquals(74, ranges.get(5).getMaximum().intValue());
	}
	
	@Test
	public void getBufferedCP() {
		long l = 4611694817313131386l;
		int matches = 34 + 12;
		int seqLength = 68;
		ChrPosition cp = TiledAlignerUtil.getBufferedChrPosition(l, seqLength, matches, pcpm, 20);
		assertEquals("chr21", cp.getChromosome());
		assertEquals(11122420, cp.getStartPosition());
	}
	
	@Test
	public void getBufferedCP2() {
		long l = NumberUtils.addShortToLong(130, (short)30, TiledAlignerUtil.POSITION_OF_TILE_IN_SEQUENCE_OFFSET);
		int matches = 40 - 12;
		int seqLength = 100;
		ChrPosition cp = TiledAlignerUtil.getBufferedChrPosition(l, seqLength, matches, pcpm, 20);
		assertEquals("chr1", cp.getChromosome());
		assertEquals(79, cp.getStartPosition());
		assertEquals(219, cp.getEndPosition());
	}
	
	@Test
	public void getInsertionCountAgain() {
		assertEquals(0, TiledAlignerUtil.getInsertionCount("", ' '));
		assertEquals(0, TiledAlignerUtil.getInsertionCount("||||||", ' '));
		assertEquals(0, TiledAlignerUtil.getInsertionCount("||||||", ' '));
		assertEquals(0, TiledAlignerUtil.getInsertionCount("||||||.|", ' '));
		assertEquals(1, TiledAlignerUtil.getInsertionCount("||||||.|||||| ||||", ' '));
		assertEquals(1, TiledAlignerUtil.getInsertionCount("||||||.||||||    ||||", ' '));
		assertEquals(17, TiledAlignerUtil.getInsertionCount("|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||   |||    | ||  |    |||.||        ||    |.|| |.|||        |||||||   || ||||| ||| |.||||   ||.|||.|.||||.|   |||.|||  ||  .|||||", ' '));
		assertEquals(10, TiledAlignerUtil.getInsertionCount("|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||   |||    | ||  |    |||.||        ||    |.|| |.|||        |||||||   || ||||| ||| |.||||   ||.|||.|.||||.|   |||.|||  ||  .|||||", '.'));
	}
	
	@Test
	public void reverseStrand() {
		System.out.println(SequenceUtil.reverseComplement("ATCCACTCCCTACCCTCCTA"));
		System.out.println(SequenceUtil.reverseComplement("GGGTAAAATGAGTTTTTT"));
		System.out.println(SequenceUtil.reverseComplement("CCCCGGGTAAAATGAGTTTTTTGGTCCAATCTTTTAATCCACTCCCTACCCTCCTAGCAAG"));
		
		System.out.println(SequenceUtil.reverseComplement("tctttctgtcttttgttttttaaaagcttgagcatttgggagaatttggaaagattgtggagtaagtgcaaagaaggaatttgctaaaaaaaattatataGGGTAAAATGAGTTTTTTccaggttagaaaatATCCACTCCCTACCCTCCTAcattcctttcccatggttaagaagaggaaaaaacaaaggcctcttggtgagcagtggtgacttaggcaatttcttagaaatattctagaagacatagtca".toUpperCase()));
	}
	
	@Test
	public void trimChrPositionsRealLife() {
		/*
		 * chr1, startPosition=21227687, endPosition=21227721, name=TTTGGAAACAATTTATTTTATAAAGCATGGCAGA
		 * chr1, startPosition=21234987, endPosition=21235020, name=GGAAACAATTTTTGATGTGTTACATCAAAAATT
		 * seq: TTTAATTTTTTGGAAACAATTTTTTTTCAATTTTTTTTTTCTTTNCNCCNCCT
		 */
		ChrPosition cp1 = new ChrPositionName("chr1", 21227687, 21227721, "TTTGGAAACAATTTATTTTATAAAGCATGGCAGA");
		ChrPosition cp2 = new ChrPositionName("chr1", 21234987, 21235020, "GGAAACAATTTTTGATGTGTTACATCAAAAATT");
		String seq = "TTTAATTTTTTGGAAACAATTTTTTTTCAATTTTTTTTTTCTTTNCNCCNCCT";
		List<ChrPosition> originalList = Arrays.asList(cp1, cp2);
		List<ChrPosition>  updatedList = TiledAlignerUtil.checkForOverlappingSequence(originalList, seq);
		assertEquals(0, updatedList.size());
	}
	
	@Test
	public void trimChrPositionsRealLife2() {
		/*
		 * chr16, startPosition=34181312, endPosition=34181338, name=ATTCCATCTGATGATGATTCCATTCG
		 * chr22, startPosition=16853368, endPosition=16853392, name=ATGGAATAGAAAGGAATCATCAAA
		 * seq: CATTTGATGATTATTCCATTCGGTTACATTTGATGATTCCTTTCTATTCCATCTGATGATGATTCCATTCGTTTACATTAGATGTTTCAATGTGATTCTATTC
		 * 
		 * Here we lose the second cp as it is on the opposite strand to the first record
		 */
		ChrPosition cp1 = new ChrPositionName("chr16", 34181312, 34181338, "ATTCCATCTGATGATGATTCCATTCG");
		ChrPosition cp2 = new ChrPositionName("chr21", 16853368, 16853392, "ATGGAATAGAAAGGAATCATCAAA");
		String seq = "CATTTGATGATTATTCCATTCGGTTACATTTGATGATTCCTTTCTATTCCATCTGATGATGATTCCATTCGTTTACATTAGATGTTTCAATGTGATTCTATTC";
		List<ChrPosition> originalList = Arrays.asList(cp1, cp2);
		List<ChrPosition>  updatedList = TiledAlignerUtil.checkForOverlappingSequence(originalList, seq);
		assertEquals(1, updatedList.size());
		assertEquals(cp1, updatedList.get(0));
	}
	
	@Test
	public void trimChrPositionsRealLife3() {
		/*
		 *  chr14, startPosition=19273834, endPosition=19273857, name=GGATTCCAGAACTCTGCTACAAG
		 *	chr14, startPosition=19286796, endPosition=19286822, name=TTGTCCCTCACACAGGATTCCAGAAC
		 *	chr14, startPosition=19301236, endPosition=19301262, name=TTGTCCCTCACACAGGATTCCAGAAC
		 *	seq: TTGTCCCTCACACAGGATTCCAGAAC, sequence: AGAACACTGCTGTGAGGGTCTGCATGTTTGTCCCTCAGATAGGATTCCTGAACAATCCTGCAGTGGTCTGAATGTTTGTCCCTCACACAGGATTCCAGAACTCTGCTACAAGGGTGTGAATGTTGTCCCTCCCATAGGATTGCAAAACACTAATGCTGTTTTCTGAG
		 * 
		 * Here we lose the second cp as it is on the opposite strand to the first record
		 */
		ChrPosition cp1 = new ChrPositionName("chr14", 19273834, 19273857, "GGATTCCAGAACTCTGCTACAAG");
		ChrPosition cp2 = new ChrPositionName("chr14", 19286796, 19286822, "TTGTCCCTCACACAGGATTCCAGAAC");
		ChrPosition cp3 = new ChrPositionName("chr14", 19301236, 19301262, "TTGTCCCTCACACAGGATTCCAGAAC");
		String seq = "AGAACACTGCTGTGAGGGTCTGCATGTTTGTCCCTCAGATAGGATTCCTGAACAATCCTGCAGTGGTCTGAATGTTTGTCCCTCACACAGGATTCCAGAACTCTGCTACAAGGGTGTGAATGTTGTCCCTCCCATAGGATTGCAAAACACTAATGCTGTTTTCTGAG";
		List<ChrPosition> originalList = Arrays.asList(cp1, cp2, cp3);
		List<ChrPosition>  updatedList = TiledAlignerUtil.checkForOverlappingSequence(originalList, seq);
		assertEquals(1, updatedList.size());
		assertEquals(cp1, updatedList.get(0));
	}
	
	@Test
	public void getInsertionCount() {
		assertEquals(0, TiledAlignerUtil.getInsertionCount("ABCD"));
		assertEquals(0, TiledAlignerUtil.getInsertionCount("ABCD-XYZ"));
		assertEquals(1, TiledAlignerUtil.getInsertionCount("ABCD-XYZ", '-'));
		assertEquals(0, TiledAlignerUtil.getInsertionCount("ABCD--XYZ"));
		assertEquals(1, TiledAlignerUtil.getInsertionCount("ABCD--XYZ", '-'));
		assertEquals(0, TiledAlignerUtil.getInsertionCount("ABCD---XYZ"));
		assertEquals(1, TiledAlignerUtil.getInsertionCount("ABCD---XYZ", '-'));
		assertEquals(0, TiledAlignerUtil.getInsertionCount("ABCD------XYZ"));
		assertEquals(1, TiledAlignerUtil.getInsertionCount("ABCD------XYZ", '-'));
		assertEquals(0, TiledAlignerUtil.getInsertionCount("ABCD------XYZ-123"));
		assertEquals(2, TiledAlignerUtil.getInsertionCount("ABCD------XYZ-123",'-'));
	}
	
	@Test
	public void getChrPositionWithReference() {
		String seq = "TCCTGGCCTGGGCGGATGCACTGGCAGTGGCAATGCTGGCCGTCTGGCAACTTTT";
//		PositionChrPositionMap headerMap = new PositionChrPositionMap();
//		headerMap.loadMap(PositionChrPositionMap.grch37Positions);
		ChrPosition cp = PositionChrPositionMap.getChrPositionFromLongPosition(1670562876, pcpm);
		boolean forwardStrand = "F".equals(((ChrPositionName)cp).getName());
		String ref = ("tccacatgatTCCTGGCCTGGGCGGATGCACTGGCAGTGGCAATGCTGGCCGTCTGGCAACTTTTctggggggag").toUpperCase();
		Optional<ChrPosition> optionalCP = TiledAlignerUtil.getChrPositionWithReference(cp.getChromosome(), cp.getStartPosition(), forwardStrand ? seq : SequenceUtil.reverseComplement(seq), ref);
		assertEquals(true, optionalCP.isPresent());
		assertEquals("chr9", optionalCP.get().getChromosome());
		assertEquals(131403163, optionalCP.get().getStartPosition());
	}
	
	@Test
	public void getChrPositionWithReference2() {
		String seq = "AAACTACACACACACACACACACACACACACACACACACACACACACACA";
		boolean forwardStrand = true;
		String ref = "TGTATTTTGAAAACTACACACACACACACACACACACACACACACACACACACACACACACACACCATAC";
		Optional<ChrPosition> optionalCP = TiledAlignerUtil.getChrPositionWithReference("chr2", 3240987, forwardStrand ? seq : SequenceUtil.reverseComplement(seq), ref);
		assertEquals(true, optionalCP.isPresent());
		assertEquals("chr2", optionalCP.get().getChromosome());
		assertEquals(3240987, optionalCP.get().getStartPosition());
	}
	
	@Test
	public void getChrPositionWithReference3() {
		/*
		 * this needs to pass
		 */
		String seq = "AAAGAATGTAATTATATCTAGTGCTGCAGAAAGGCCTTTAGAAATAAGAGGGCCATATGACGTGGCAAATCTAGGCTTGCTGTTTGGGCTCTCTGAAAGTGACGCCAAGGCTGCGGTGTCCACCAACTGCCGAGCAGCGCTTCTCCATGGAGAAACTAGAAAAACTGCTTTTGGAATTATCTCTACAGTGAAGAAACCTCGGCCATCAGAAGGAGATGAAGATTGTCTTCCAGCTTCCAAGAAAGCCAAGTGTGAGGGCTGAAAAGAATGCCCCAGTCTCTGTCAGCACC";
		boolean forwardStrand = true;
		String ref = "GCCTTTAGAAATAAGAGGGCCATATGA";
		Optional<ChrPosition> optionalCP = TiledAlignerUtil.getChrPositionWithReference("chr10", 92655635, forwardStrand ? seq : SequenceUtil.reverseComplement(seq), ref);
		assertEquals(true, optionalCP.isPresent());
		assertEquals("chr10", optionalCP.get().getChromosome());
		assertEquals(92655635, optionalCP.get().getStartPosition());
	}
	
	@Test
	public void getSWDiffs_splitcon_chr10_127633807_chr15_34031839IntelligentSW() {
		String seq = "TTCGGCGTTGCTCACACTGGGAGCTGTAGACCGGAGCTGTTCCTATTCGGCCATCTTGGCTCCTCCCCCTATAGTGTTATTTCATTTTCCAAGGATACCTGCATTTCCACCAGAAAATATTTAAGGGGTTACACATTTCCCGTTTTGGTTAACCTGGATAAATGCGCGTATTTTATTTCTGTTTTCAG";
		String ref = "TTAGTTCAATCCCCTGTCTTCATGCCAGGCAGAAAACAGTTTGTATGTTCTTAGAGATTCCACAGTCCTCCAAGGGCTAATTCTACTCTCTAGCAGCCCCAGTTTTCATCTCAAAAAAATACTTTAACTGAAAACCATAGTTAAAGTATTACCATCTTAATTTGGTATTGCTTCCTCTGCAAGCCTTTGCTGCCAGCTGGATACTGGCTTTGAAGAGGCATTATTGATATCACTCAATAAGCTCACTTTTACCTCTCAAATCTGTGGGATTTTTCTTGGAGGACATGGATCACACCTGCTGGGATGGAAACATTACTGGTAACTTCTGCCCTCTACTGGCGAGATGTGAAACTGCTGTAAAGTCACTGGGGTGTGAGAGAGGGGAGAGGGAGCGGGCACGGGGAGTGGGGGCAAGGAAACAACGGGTAGTAATTGACGAGAGAAAATCTTCAGACCCACGACTTGCAGCCCACCATCCTCTCCCCATATCAGCATCCCCCAAAGATCTTCCAGAATTACAAGCAAAGGTCCCAGAAGAAATTATTTCCACCCCTGACTGGCTAGAACAGCTCACAGTGGCTACTTTCAGAAGGTAGCACTTTCTGGTGTGAACTAGAAACGGCTCCTCTCCATTTCCTAGTAACTGCTAGGGGGCACATTAGGAGGCATAAGAATTAATCAGGCAGATCCGCTCAGGCTCAAGCTGACTGTTCCCAGCTTGAGAGCAGACTGTTCCCAGCGGTGTTTGAAGGGCCTCTTTGTAGACAGCCCAGCTGTTTCGCATGTTTCATTCTCATGGTCTCTGCTTACTACTTGATTCTCTCCTGCATGTTTTTGATGCCTGTGGACTTTCTCTATGCCACCCCGCTGGTCTGTCCTGTTCTGCACCTCCCAGCTTCTGACGAATCACTATGAACAGTGTTGGAAGTATTACTGCCTGCCTTCAGGATGGGGGAGCTACGGGCTAGCTGTGGAAGAAGAGCTGCACCTAACGGAGAAGCTTTTCTGGGGGATTTTTGACTCGCTCTCCCATAAGGTAATGACAGTACTTTCTGAACAAAAAGAGAGCATCTCAGTGCTCCAGCATCTACAGATAATAACAGCCGTCATCTGTTTAGCATTCCATTTGCCAGGACCTGTGCTAAGTACTTCACAAGCATATTACGCCAATCCTTGCCCATCTCTCTGAAATGGAAACTCTCAAAATCCTTATTTTACAGGTGAAGAAAAGCCTCAGAGTAGCTGAATAAATTTTCACATTCACAAAGCTGTACGAGGGAAAGTGACTACCAGAGTGAATTCCACACAGATCATCTGATGTCAGTCTTTGATGTCTTACCTCCCCATTCGTTTCCCCCTGATTTGGTGTGGCTCCTGTCTGCCAACCTTCACTAGGCTCGAGCCAAGAGGAAAAGTCCTGACATCTGCTGTGATGGTGGGACAGGGGATTTCCAGAAGACCTTAAGCCATTCTGGGAGAGGTTCTTTGCAAGCACTCATTTGAGGAGGCTTCGAGTGAGAACTGAGAGCCTCTGAATCCCAGGCCTTACTTGAACGGTGTGATTGAAGTAGAGCTCTGACTCTTAGACTTTGCTCCACTTCCCCTAACCCAGTTTGTGAGGTCAGGAGCTTTAAAGGTAGAAAATGAGTAGGTCTGGTTTTCTTAGAGAAATCTAGAACATGCACATAGCTTGTTCACCTGCACTTAAATTTTCTTTACCCCTGGATTTCGTTGGTCTAGTATAAGCAGATCAAAAGCTCTTCCCAACCCCATGCCATTTGACTGAAATTCATTTCTGGCTGGGTTCAAGAGAGAATGATGGATATTGAGCAGCCTGCTGATGATGTCAACATATGACCCATATCAGCTACTGCAGAGCTTGGCACAGCTTACTGTGCCCTCTCCAGTTATAAGTTGGGTCCGTTTCTGTGACCATCCTTAGCAGACAAGTTTATAGTCACCTTCTGGCCTAGCGCCTAGTCACTTTAACCCTTAGGTAGTCTTGAAATTAGTCATTTAGGAGATATTGATTTAAGCCTGTTTTAAGATTTTTCAACTTAAAGCAAATGGTGACTTGAGGATTTATAGTGTTATTTCATTTTCCAAGGATACCTGCATTTCCACCAGAAAATATTTAAGGGGTTACACATTTCCCGTTTTGGTTAACCTGGATAAATGCGCGTATTTTATTTCTGTTTTCAGCTGATTGGTGATTGGTTCTGTCTAAAGGCATGGTTCTGCTTTCTCTACTAATGTGGCCTTGTTTTTCCCTCACAGAAATATGACCCAGATCTTTTCCGAATGGCCCTGCCTTGTCTCAGTGCTATAGCTGGGGCCTTGCCACCAGATTATTTAGATACCAGAATCACAGCCACGTTGGAGAAACAGATCTCAGTGGATGCGGATGGCAACTTTGACCCAAAACCTATTAACACCATGAAGTGAGTCCAGAATCATCTCTGAGCTGGTGCTGTATTTTGTCCAATAGCCAATGTTTTCTTCCAGAGGGTAGCAAGAAATGTGAGCTTTACCTCTTTCCCTCCTGCCAACACTGTTCATCATTTCTCTTGATGTGTCAAGTCCCATCAGGCACAAGGTTTAATCCATACATATCTGTATTATTATATTCTGGGTTTTTGGTGGGGGAGGAAAGGGTTGGTTTATTTTTTACCAGAGATAGACGTTCCCACACATAAATATCTCCTGAGGCACTGAGAGAACTACCCTGACAAATTATGCAATTAATTTATTAATGAGCTTTTTGACAATATCTTTGCTCATGGTGAATTAGGCTCATATGGTTCTAATAGCATCATACATCACAACAGCTCCATAAATAACACTCAGCTGTGTCCTGGCAAGGCTGCGGTGTGATGGCAGAACAGTGTGGGGTCCTCACTGGAAAAGCTGGACCTGCTCTTTGCCATGCCGAGGGATGCTGGAGCTTCAGAATAGCCCTACCATTGCACCTTTTACTTTCTCCCTGTAATTTTCCAGAATTTCTCACTGGTGTTGACTAGGCCATGGAGGTGTGCTTATCCCTTGGGCAAAATATTGCTAAGTTTTGGCTTGTGGTAGTTCTGCCCAGTTATGAATATGCGCTGTAGGGTATACAGTCAGCTCCAGGTGCATTTTAAATGAAGAGCTCTAAAACTGCTTCAGAGTGAGCAGGGAAAGTAAGCCTGAGCCTATATGAGCCCCTTGGACCTGTCCTTCATGGCAGTAGTTCTCAAATGAAAGCCTGAACCCTTCCCAGGGGGACTGTCTGCTTTGATCATGTGTAACATTCGTCTTTGGGACAATTAAACACACATTCCGTTGGAAAGAGCTTTGAGCTGTGGGGATGGTGAGACAGAATTGAAACTGCTGTTAAGTAAGAGGTAAGAAGCATGGTGAACCATCAAGCTTGGGCCAAAGAAGGCAGGTGCTGACTTGGGAGGGCTCTGCCTATAAAAAGGGAACAGTGCTAAAGAAAGACAAAGCAAATGGCGTAGTAACTTGGATGCTTTTGAAAACGTTCTGAGAAAACATTATACTCTAGCAACTGTGTGTTAATGGCTCTGTGTTATTTTGAGAGTTCAGATTTATTCCAGTGTACCTGTGACATCAACATAGTTCCTTGAGGAATGTGAGGAATGGAGACTAACCCTGGCTTAAGGAGAAAAGCACCTTATTGCAAGAATATGGGGTCATTATCAAGACCTAGTGAAAGGCCAACCTGGCCTTAGCACGCATAGTCACCAGGGAAGGACTGCAATCAGGCACAGGGAGGAAATCGACAATCTTCAGGTGTCCCCATTGGGTAAATCACCTTGAAGAATTTACTGCCCTAGTTTCACCCAACTCAAGACTTAAATTCCGTGGAGAGAAAGTCTGATTTGCCCAGTCATATGCCCATCCTTGGTGACAGTTCACATAACACTGCATGCAATATAAGACTGTGCAATGCAAAGGGAATGTAGGTGCTGATACCAACAGAAGGGACAAGAGCTGTTTTCTGGGAAAACAGAAATAGCAGGTGTCTACTGTACTGCCAAAATTCTAGTTTTGTTTTGTTTTGTTTTGTTTTGTTTTTTTGAGATGGAGTCTTACTCTGTCACCCAGGCTGGAGTGCAGTGGTGCCATCTCAACTCACTGCAAGCTCCACCTCCTGGGTTCACGTCATTCTCCTGCCTCAGCCTCCTGAGTAGCTGGGACCACAGGCACCAGCCACTACGCCCGGCTAATTTTTTTGTATTTTTAGTAGAGACGGGGTTTCACCGTGTTAGCCAGGATGGTCTCGATTTCCTGACCTCATGATCCATCCACCTCGGCCTCCCAAAGTGCTGGGATTACAGGCGTGAGCCACAGCGCCCGGCCCCAAAATTCGAGTATTTTACCATGAGCCACTGAGCCCCAAAAGGTAGAAAACCACTATTTCATAACATACGGCTCTCTGGCTACCCATTTCTACCATTTCCAGATTGTAGCCAGAGGATGACAGGCCATTTACCTTGGATTCTCGCTGTCTAACCAAGACAGGTCTGGCCCAGGAGCCAAGAGA";
		String [] swDiffs = TiledAlignerUtil.getIntelligentSwDiffs(ref, seq);
		
		assertEquals("TATAGTGTTATTTCATTTTCCAAGGATACCTGCATTTCCACCAGAAAATATTTAAGGGGTTACACATTTCCCGTTTTGGTTAACCTGGATAAATGCGCGTATTTTATTTCTGTTTTCAG", swDiffs[0]);
		assertEquals("|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", swDiffs[1]);
		assertEquals("TATAGTGTTATTTCATTTTCCAAGGATACCTGCATTTCCACCAGAAAATATTTAAGGGGTTACACATTTCCCGTTTTGGTTAACCTGGATAAATGCGCGTATTTTATTTCTGTTTTCAG", swDiffs[2]);
	}
	
	@Test
	public void getSWDiffs_chr7_100866833IntelligentSW() {
		String seq = "TGGAAAGAAAAAGAAGAAAACCCGAGGTGATCATTTTAAACTTCGCTTCCGAAAAAAACTTTCAGGCCCTGTTGGAGGAGCAGAACTTGAGTGTGGCCGAGGGCCCTAACTACCTGACGGCCTGTGCGGGACCCCCATCGCGGCCCCAGCGCCCCTTCTGTGCTGTCTGTGGCTTCCCATCCCCCTACACCTGTGTCAGCTGCGGTGCCCGGTACTGCACTGTGCGCTGTCTGGGGACCCACCAGGAGACCAGGTGTCTGAAGTGGACTGTGTGAGCCTGGGCATTCCCAGAGAGGAAGGGCCGCTGTGCACTGCCCGGCCTTCAGAAAGACAGAATTTCATCACCCAATGCAGGGGGAGCTCTTCCTGGACCAAGGGAGGAGCCGCTCATTCACCCG";
		String ref = "AGGCCCTGTTGGAGGAGCAGGTGAGAGGAGGGTCGGCCTGGGAGGACCCCACAGGGAAGGGGTGAGCCTGGCCCGGGCAGGTGTTCGCTGCGTGGGTGGGCGGAGGAGTTCTAGAGCCGGCCCCTTGTCTCTGCAGAACTTGAGTGTGGCCGAGGGCCCTAACTACCTGACGGCCTGTGCGGGACCCCCATCGCGGCCCCAGCGCCCCTTCTGTGCTGTCTGTGGCTTCCCATCCCCCTACACCTGTGTCAGCTGCGGTGCCCGGTACTGCACTGTGCGCTGTCTGGGGACCCACCAGGAGACCAGGTGAGCATGAGACCTGCTGTCCACTCCCACTCCCTCCTTCCCACAGCCTCCCCAGACCTCTCTCCCCTCATCCTGGCTTCCCCTCTGTCTGCAGGTGTCTGAAGTGGACTGTGTGAGCCTGGGCATTCCCAGAGAGGAAGGGCCGCTGTGCACTGCCCGGCCTTCAGAAAGACAGAATTTCATCACCCAATGCAGGGGGAGCTCTTCCTGGACCAAGGGAGGAGCCGCTCATTCACCCAACAAAACTGTGTCTTATCTGCCAGGAAAGACCAGCCTCACTCCTGGGAACTGTCTGGCAGGTAGGCTGGGCCCCCCAGTGCTGTTAGAATAAAAAGCCTCGTGCCGGAAGCCTTCCTGTTTGGTCGTGGTGTGTTTGAGGTGATGGTAATGGGTCACCCGTCTCTCCTG";
		String [] swDiffs = TiledAlignerUtil.getIntelligentSwDiffs(ref, seq);
		assertEquals("CCGGCCC-CTTGTCTCTGCAGAACTTGAGTGTGGCCGAGGGCCCTAACTACCTGACGGCCTGTGCGGGACCCCCATCGCGGCCCCAGCGCCCCTTCTGTGCTGTCTGTGGCTTCCCATCCCCCTACACCTGTGTCAGCTGCGGTGCCCGGTACTGCACTGTGCGCTGTCTGGGGACCCACCAGGAGACCAGGTGAGCATGAGACCTGCTGTCCACTCCCACTCCCTCCTTCCCACAGCCTCCCCAGACCTCTCTCCCCTCATCCTGGCTTCCCCTCTGTCTGCAGGTGTCTGAAGTGGACTGTGTGAGCCTGGGCATTCCCAGAGAGGAAGGGCCGCTGTGCACTGCCCGGCCTTCAGAAAGACAGAATTTCATCACCCAATGCAGGGGGAGCTCTTCCTGGACCAAGGGAGGAGCCGCTCATTCACCC", swDiffs[0]);
		assertEquals("|.||||| .|||.....|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||                                                                                              |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", swDiffs[1]);
		assertEquals("CAGGCCCTGTTGGAGGAGCAGAACTTGAGTGTGGCCGAGGGCCCTAACTACCTGACGGCCTGTGCGGGACCCCCATCGCGGCCCCAGCGCCCCTTCTGTGCTGTCTGTGGCTTCCCATCCCCCTACACCTGTGTCAGCTGCGGTGCCCGGTACTGCACTGTGCGCTGTCTGGGGACCCACCAGGAGAC----------------------------------------------------------------------------------------------CAGGTGTCTGAAGTGGACTGTGTGAGCCTGGGCATTCCCAGAGAGGAAGGGCCGCTGTGCACTGCCCGGCCTTCAGAAAGACAGAATTTCATCACCCAATGCAGGGGGAGCTCTTCCTGGACCAAGGGAGGAGCCGCTCATTCACCC", swDiffs[2]);
		
		seq = "ATTTTAAACTTCGCTTCCGAAAAAACTTTCAGGCCCTGTTGGAGGAGCAGAACTTGAGTGTGGCCGAGGGCCCTAACTACCTGACGGCCTGTGCGGGACCCCCATCGCGGCCCCAGCGCCCCTTCTGTGCTGTCTGTGGCTTCCCATCCCCCTACACCTGTGTC";
		swDiffs = TiledAlignerUtil.getIntelligentSwDiffs(ref, seq);
		assertEquals("CCGGCCC-CTTGTCTCTGCAGAACTTGAGTGTGGCCGAGGGCCCTAACTACCTGACGGCCTGTGCGGGACCCCCATCGCGGCCCCAGCGCCCCTTCTGTGCTGTCTGTGGCTTCCCATCCCCCTACACCTGTGTC", swDiffs[0]);
		assertEquals("|.||||| .|||.....||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", swDiffs[1]);
		assertEquals("CAGGCCCTGTTGGAGGAGCAGAACTTGAGTGTGGCCGAGGGCCCTAACTACCTGACGGCCTGTGCGGGACCCCCATCGCGGCCCCAGCGCCCCTTCTGTGCTGTCTGTGGCTTCCCATCCCCCTACACCTGTGTC", swDiffs[2]);
	}
	
	@Test
	public void getSWDiffs_chr3_52245566IntelligentSW() {
		String seq = "CTGTTGTCCACTGCCCCAGCCACATCATCCCTGTGCGGGTTGCAGATGCTGCTAAAAACACAGAAGTCTGTGATGAACTAATGAGCAGACATAACATCTACGTGCAAGCAATCAATTACCCTACGGTGCCCCGGGGAGAAGAGCTCCTACGGATTGCCCCCACCCCTCACCACACACCCCAGATGATGAACTACTTCCTTGGTGAGTACCTGGGGAGCTGCTGGTGCCTCACTGAGGAGTTGCATAAAGCTGTCTTTGCAGTGTTTATAATTGAAGCCCTTCGGAGGGCTTCAGATTTGTTTCTTCTTCTTTTTTTATTTTTTTTTTTTTTTCCATTATTTTCGTTCTTTTTTCCCTTCCTTGGTTTTTTTTGCCCAATCCCT";
		String ref = "ACCATGGTATTTGTGTATCTAAACATACCTAAACATAGAAAAGGTACAGTAAAAATACAGTATTATAATCTTATGGGACCACCATCATATATGTGGTCGTCATTGACTGAGACATCATTAATGTGGTGCATGACTACTCCAATCAGTCCAGGAACAAATTAAAAAGATAAGGAGAAAAGTCAGTGCTTTGAGGCTCCACAACACCTTGCTGTGTCCATTTAGAGCAATTTACAGCTGTTGCTGTAATTAATGAAGCTATCTCCTCCCAGGCAAAGCCTTTGGTTGTGTTGGAGGGTACATCGCCAGCACGAGTTCTCTGATTGACACCGTACGGTCCTATGCTGCTGGCTTCATCTTCACCACCTCTCTGCCACCCATGCTGCTGGCTGGAGCCCTGGAGTCTGTGCGGATCCTGAAGAGCGCTGAGGGACGGGTGCTTCGCCGCCAGCACCAGCGCAACGTCAAACTCATGAGACAGATGCTAATGGATGCCGGCCTCCCTGTTGTCCACTGCCCCAGCCACATCATCCCTGTGCGGGTAATGGCCTGTCTCTGATTGGACTTGCCGTGGGGTGTGCCTCTACACATGATGTACGGATGTTCTGCTTCATACCTTCCTGAAGTTGGGCTTGAGCGGGGTGACTGCCAGGGCAGGGGTTGTAGCCAGCCACCCTCTGTCATGTTTCCGCCATTGGCTGACTTCACCAAGAGAAGAAAGCCTTTGAACCCAGCAGGCTGGGGCAGAAGTTCCCTCTCCGGAGCACTGACCTTAACAGGGTAAACACAGAGCTTGTATCTAGAAAGCTCCAGAAGCCTGAGCTTGGCCAGCTTTGAAGTATGGCTTTCTACTTAGTAAATTTCAAAATAGGTTTTGCCCTTCCCACTACAAATGGTAGCACTGTTGATGTCACAGTTGAATTAGTGTAATGAATACAGCTAGTATAACTGAATCTAGATTATACATCGTGGGTATGAGAGTCTGCTGGTACGAACAGAACCAGTGTTTTCTGATTAAAAATGTATTTCTTTTTAATAAGGTTTTGGTTCCCTGGTGTTCACGAAACAACACTGGCTTCTTTTAAATGACAGGTGTTTGGGCAGCGCTTTCCCTCTGCCCCAAGCTTGCATGTGTTGCTACAGTCTGGTCTTGAGCCTGAGCGTTGTGGGGACTGCGTTCGTTAGGATCTCTGCTAAGAGGTAGTCCTTCCTGTTGTGACCTTACCTTCTGCTCTCATTGAACTTAGGTTGCAGATGCTGCTAAAAACACAGAAGTCTGTGATGAACTAATGAGCAGACATAACATCTACGTGCAAGCAATCAATTACCCTACGGTGCCCCGGGGAGAAGAGCTCCTACGGATTGCCCCCACCCCTCACCACACAC";
		String [] swDiffs = TiledAlignerUtil.getIntelligentSwDiffs(ref, seq);
		assertEquals("GGTTGCAGATGCTGCTAAAAACACAGAAGTCTGTGATGAACTAATGAGCAGACATAACATCTACGTGCAAGCAATCAATTACCCTACGGTGCCCCGGGGAGAAGAGCTCCTACGGATTGCCCCCACCCCTCACCACACAC", swDiffs[0]);
		assertEquals("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", swDiffs[1]);
		assertEquals("GGTTGCAGATGCTGCTAAAAACACAGAAGTCTGTGATGAACTAATGAGCAGACATAACATCTACGTGCAAGCAATCAATTACCCTACGGTGCCCCGGGGAGAAGAGCTCCTACGGATTGCCCCCACCCCTCACCACACAC", swDiffs[2]);
	}
	
	@Test
	public void stipStrandFromLong() {
		long l = 1;
		assertEquals(false, NumberUtils.isBitSet(l, TiledAlignerUtil.REVERSE_COMPLEMENT_BIT));
		l = NumberUtils.setBit(l, TiledAlignerUtil.REVERSE_COMPLEMENT_BIT);
		assertEquals(true, NumberUtils.isBitSet(l, TiledAlignerUtil.REVERSE_COMPLEMENT_BIT));
		l = 4611686020646594429l;
		assertEquals(true, NumberUtils.isBitSet(l, TiledAlignerUtil.REVERSE_COMPLEMENT_BIT));
		l = NumberUtils.stripBitFromLong(l, TiledAlignerUtil.REVERSE_COMPLEMENT_BIT);
		assertEquals(false, NumberUtils.isBitSet(l, TiledAlignerUtil.REVERSE_COMPLEMENT_BIT));
	}

}
