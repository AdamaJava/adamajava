version = '1.0'
apply plugin: 'application'

mainClassName = 'org.qcmg.qprofiler.QProfiler'
def scriptname = 'qprofiler'
def isExecutable = true

dependencies {
    configurations.compile.transitive = true

    compile project(':qcommon')
    compile project(':qpicard')
    compile project(':qio')
    compile project(':qvisualise')

	compile 'org.apache.commons:commons-math3:3.3'
	compile 'com.github.samtools:htsjdk:2.14.1'
	compile 'net.sf.jopt-simple:jopt-simple:4.6'
//	testCompile 'junit:junit:4.10'
	
	
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.1.0'
}

task findbugs.doLast(dependsOn: build)  {
	def outputFileName = project.name
    ant {
        taskdef(name:'findbugs', classname:'edu.umd.cs.findbugs.anttask.FindBugsTask', classpath: 'build/deps/findbugs-1.3.9/lib/findbugs.jar')

        findbugs(home: 'build/deps/findbugs-1.3.9/lib', output:'xml', outputFile:'findbugs_' + "${outputFileName}-${version}" + '.xml') {
                sourcePath(path: 'src')
                "class"(location: 'build/lib/qprofiler-' + "$version" + '.jar')
        }
    }
}

task fatJar(type: Jar ) {
	baseName = project.name + '-all'
	version = "$version"
	from { configurations.compile.collect { it.isDirectory() ? it :  zipTree(it) } }
	with jar
	
	manifest {
		attributes 'Implementation-Title': baseName,
				   'Implementation-Version': "$version ($revision)",
				   'Built-By': System.properties['user.name'],
				   'Date': new java.util.Date().toString(),
				   'Main-Class' :mainClassName,
				   'Class-Path' : "${baseName}-${version}.jar"
				  
	 }
	exclude 'META-INF/.RSA', 'META-INF/.SF','META-INF/*.DSA'
}

artifacts { archives fatJar }


