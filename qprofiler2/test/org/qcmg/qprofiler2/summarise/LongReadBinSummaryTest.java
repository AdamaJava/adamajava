package org.qcmg.qprofiler2.summarise;

import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.qcmg.common.util.XmlElementUtils;
import org.qcmg.qprofiler2.bam.BamSummarizer;
import org.qcmg.qprofiler2.bam.BamSummaryReport;
import org.qcmg.qprofiler2.util.XmlUtils;
import org.w3c.dom.Element;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class LongReadBinSummaryTest {
	
	@Rule
	public TemporaryFolder testFolder = new TemporaryFolder();
	private String UNPAIRED_READ = "unPaired";
	
	private  void checklength(Element root, String metricName, String pairName,int readCount, int cycle, String[] values, int[] counts) throws Exception {
		if (counts.length != values.length) {
			throw new Exception("error: values size must be same to counts size");
		}
			
		// eg. <sequenceMetrics name="seqBase"><variableGroup name="firstReadInPair">
		List<Element> elements = XmlElementUtils.getOffspringElementByTagName(root, XmlUtils.VARIABLE_GROUP).stream()
			.filter(e -> e.getAttribute(XmlUtils.NAME).equals(pairName)
					&& e.getAttribute(ReadGroupSummary.READ_COUNT).equals(readCount+"")
					&& ((Element) e.getParentNode()).getAttribute(XmlUtils.NAME).equals(metricName)).collect(Collectors.toList());
		Assert.assertEquals(elements.size(), 1);
		
		// eg, <baseCycle cycle="1">
		Element ele = XmlElementUtils.getOffspringElementByTagName(elements.get(0), XmlUtils.BASE_CYCLE).stream()
			.filter(e -> e.getAttribute(XmlUtils.CYCLE).equals(cycle + "")).findFirst().get();
		//assertEquals(values.length, ele.getChildNodes().getLength());
			
		// eg   QprofilerXmlUtils.seqLength + "_"+  QprofilerXmlUtils.FirstOfPair;
		for (int i = 0; i < values.length; i ++) {

			String v =  (metricName.contains("qual"))? ((byte) values[i].toCharArray()[0]-33) + ""  : (String)values[i];
			String c = counts[i] + "";
			long count = XmlElementUtils.getChildElementByTagName(ele, XmlUtils.TALLY).stream()
					.filter(e -> e.getAttribute(XmlUtils.VALUE).equals(v)
							&& e.getAttribute(XmlUtils.COUNT).equals(c)).count();
			assertTrue(count == 1);
		}	 
	}
	
	@Test
	public void getBaseByCycleTest() throws Exception {
 		Element root = getSummarizedRoot();
 		checklength(root, XmlUtils.SEQ_BASE , UNPAIRED_READ,2, 1000, new String[] {"A","C","G","T"}, new int[] {214,344,413,241});
		checklength(root, XmlUtils.SEQ_BASE , UNPAIRED_READ,2, 2000, new String[] {"A","C","G","T"}, new int[] {46,69,101,42});
 	}
	
	@Test
	public void getQualityByCycleTest() throws Exception {
 		Element root = getSummarizedRoot();
		 //S = 83 = BQual of 50 (ASCII - 33)
		 //A = 65 = BQual of 32 (ASCII - 33)
		 //# = 37 = BQual of 4 (ASCII - 33)
		 //( = 40 = BQual of 7 (ASCII - 33)
 		checklength(root,  XmlUtils.QUAL_BASE , UNPAIRED_READ, 2,1000, new String[] {"S","A","%"}, new int[] {163,22,3});
		checklength(root,  XmlUtils.QUAL_BASE , UNPAIRED_READ, 2,2000, new String[] {"S","A","("}, new int[] {27,5,3});
	}

	private Element getSummarizedRoot() throws Exception {
		String input = LongReadBinSummaryTest.createInputFile(testFolder);
		Element root = XmlElementUtils.createRootElement("qProfiler", null);
		BamSummarizer bs = new BamSummarizer(1000, null, false, true);
		BamSummaryReport sr = (BamSummaryReport) bs.summarize(input);
		sr.toXml(root);
		Assert.assertEquals(sr.getRecordsInputed(), 3);
		return root; 	
	}
	
	
	/**
	 * To create a new random file under current specified TemporaryFolder
	 * @return new file name with full path
	 * @throws IOException
	 */
	public static String createInputFile(TemporaryFolder testFolder) throws IOException {
		List<String> data = new ArrayList<String>();
		data = new ArrayList<>();
		data.add("@HD\tVN:1.6\tSO:coordinate");
		data.add("@SQ\tSN:chr22\tLN:50818468");
		data.add("@RG\tID:COLO829_BL.28464\tPL:ONT\tSM:COLO829_BL");

		//Read length 301 - Supplementary alignment
		data.add("12b013c5-a784-4448-9eca-140d6db89e1c\t2048\tchr22\t20164189\t1\t11M3D72M6D11M3I35M1I1M2I37M3D20M6I46M3D9M4I2M2I26M2D13M3713H\t*\t0\t0\tCCACCACCATCACCACCACCACCACCAGCAGCATCACCACCAATACCACCACCACCACCAGCATCACCATCAACACCACCATCACCACCACCATCACCACCAGCACCACCAGCACCACCACCATCACCACCAGCATCACCACCAACACCACCATCACCACCAGCATCAGCACCACCACCACCACCACCACCACTACCGTCACCACCACCACCACCACCACCACCATCACCACCACCACCACCAGCAGCATCACCACCAATACCACCACCACCACCAGCATCACCATCAACACCACCATCAC\t/6:<BEGGKJFOHKHIHOHLLKHGDCBEHGDJIF?>>7201FEGHIIHD=>CCCBCLKHSDDFHGKSJJQJPKJSMSMKNNIJSHFRGGIIFGGFILHJHHIGHFFCIHHHHHFFFPLKQMSMSLHQHHISODECDBIIKJPMIKOJJILKLJKGRJFOGHIGIIFLFHEMHLLIIGISSJJJILIGGGFHHHGHJH<;;;<CGHFNJKLINRSQMJJMKJPIKKIGHFFJGJSJHLSLJKJNJKMJILJHSKIPLFPIHHJNJIOOLKLHOLLHSCBBB?EFEHGIJJIMILSISSHOLG\ts1:i:40\ts2:i:0\tSA:Z:chr1,110120463,+,2357S1655M2I,60,48;chr21,43335930,+,202S1716M2I2094S,1,305;chr21,43335930,+,724S1700M16D1590S,60,299;\tMD:Z:11^ACT19C2C5T2C8T8C0A1C8C10^ATCAGA16T3T4C26T2C2T3T10C5C2T1^GTT4T5T5T17T5T3T13T5T1^GTT1C14T5T2C11^CC5T7\tRG:Z:COLO829_BL.28464\tML:B:C,3,16,0,2,5,18,6,28,3,4,4,1,1,12,5,8,12,2,11,3,18,3,33,17,1,17,2,1,2,5,2,1,3,4,5,36,5,2,38,9,10,125,14,15,8,13,1,14,5,9,8,10,252,239,255,253,250,237,248,227,252,3,2,254,254,243,251,247,243,253,244,252,237,252,222,238,3,238,1,254,4,250,253,254,252,11,7,43,7,5,30,16,21,52,241,240,19,17,254,241,250,15,17,20\tMM:Z:C+h?,108,444,3,1,3,5,3,11,3,5,32,10,167,1,14,3,10,31,37,244,11,17,7,20,19,17,78,15,44,13,9,16,0,96,35,46,22,15,25,4,1,11,2,0,7,9,47,1,32,38,34,5;C+m?,108,444,3,1,3,5,3,11,3,5,32,10,167,1,14,3,10,31,37,244,11,17,7,20,19,17,78,15,44,13,9,16,0,96,35,46,22,15,25,4,1,11,2,0,7,9,47,1,32,38,34,5;\tNM:i:67\tAS:i:260\tde:f:0.1463\trl:i:1308\tcm:i:3\tnn:i:0\ttp:A:P\tms:i:287\tqs:i:22");

		//Read length 1258
		data.add("e0ea8507-83a9-4e00-bb0c-b0a27f9ed0a4\t0\tchr22\t20178190\t60\t138M1I201M2D67M2D14M1D6M1I5M1D25M1D163M1I426M1D77M1I132M\t*\t0\t0\tGGGCACGTCTCTTCCCAGTGAACCTCAGATCCCTCGGGCGCCCACGCTCCCCACTGAGGGCCTGGGGCCACAGCACTCTGCCTGTGAGGGGTGGGCCCTTGGAGGCTTGGGAAGGCGCGCGCCCACAGGCACGTGGGGTAGAGCGCGCTGAGCGCTGTCTCAGTGATGGTTCCCCACACTGGCCCCTGACATGGGGCTTGGTGTGGCAGCTTGTTGGGGAGGTGGTGCGTGGAGCAGGATGGGGACCGGGAGGTGGTTGCTGTGGGCTCTGCGGGGCGTGAGGGCCGGTGTTTGCCCCAAGCTCAGTGCCTGCCTGTGACCACACCAGCTCATAAGCGACCGGGGTGGCCCAGGGGTGAGCGGAGAGGGGACCTGAGCAGGCAACACGGGCCTGGAGAGGAGCTTTGTCTCTAGGAGAAGGAGCCTGCTGCTGTACACCTGGTATCACGCCACCCCAAGCAAGCCCCGCAGAGCCCTCGGGAGCTCCACTCGGAGATGGAGACGCGCTTCCCTGTGTCGGGGCTTCGCTCAGAACATTTTTATGGGCTGTTAATTGTTATGCTTTCATTTAATTCTGGGTGTCATTCCATGTCAGCCAAGCCCGACAGGCTGGGATTTATGTCTTCCAAATTATGGGGCTCGGGCTGTTCAGAGGTAAAACAATTACCCATCAATCAGCCACCAACCGGCTTGTGCTGGGGCTGGCAGCCCCATTAGCGGGCGTGGGCAGCCATGGCCCAGCAAGACCCCTTGAGGGACAGGACTGCCTTCGAGGGCAAGGCAGTCTGGGTGAAGTCTCGCCCCAGGTTGGCCCTGTGCTGTGGCAGGGCGCAGCTCTCTGGGGAGGCGGCCGCTCAGGGAAGGACCCCAGGGTCCACATTCACACCCAACTGGCTCCAGTGCTGCAGCCCTCGGCCTCCCATATGATGGTGTGACCCTAGGTGGGCTGAGGGTGACCCGCCGGAAGACGCTGCAGCATCAAGGTGGGGGGACCATGGGTCCCATATGCTGGGGCCTGGGGAGCCTTGGCCAGCCATGGTCACTCAGTGGAGGGGCAGGGTCACCTGCCTCCTGAGCACCCCATCCCCAGGAGGGAGGAACCAGGTGTGACCCACTTCACAGGGAGGGGAAGCCTTGGCTGTCAGAGGGGACACTGCGTCTCTCACTGGGAGGACCTCCCGGCCTGGGCTTGAGGCCCACCTGGATCTGTGCAAACGTAGATGTGGGTAGGGTGGGGCAGGGGAGGGGAGGTGGGCAG\tts1:i:1139\ts2:i:0\tMD:Z:111G1C0A0T27C0T190T3^CT1T65^TC14^C7C3^C0C1G22^G3G585^G50G158\tRG:Z:COLO829_BL.28464\tML:B:C,2,5,1,1,1,2,10,12,1,6,6,1,4,15,29,194,5,2,9,0,3,3,0,16,1,6,7,2,15,8,12,3,6,1,2,13,22,6,2,0,77,49,67,28,9,3,7,254,254,254,253,13,243,254,14,14,254,9,36,31,60,7,5,20,2,252,251,254,19,254,13,248,240,31,16,27,11,249,252,253,235,220,12,253,255,145,39,56,33,13\tMM:Z:C+h?,26,11,5,69,2,0,16,14,1,7,12,11,15,2,11,7,10,14,3,2,0,5,3,2,2,20,10,11,0,11,4,3,12,9,28,2,0,6,2,0,0,28,0,2,3;C+m?,26,11,5,69,2,0,16,14,1,7,12,11,15,2,11,7,10,14,3,2,0,5,3,2,2,20,10,11,0,11,4,3,12,9,28,2,0,6,2,0,0,28,0,2,3;\tNM:i:25\tAS:i:2366\tde:f:0.0182\trl:i:0\tcm:i:204\tnn:i:0\ttp:A:P\tms:i:2368\tqs:i:20");

		//Read length 212
		data.add("ee9f0c60-5af7-495b-9c3b-d4b30971c3d2\t0\tchr22\t20173734\t60\t212M\t*\t0\t0\tCAAGGACTCCCCGCAGCCCAGTGTCTGTGGAGTGGGGCGTGAGGTGCTGCCTCCCATGTTGCTGCTTAGAAGGACGCAGCCCTGGAAACCCTCACTGTGGAGTCTCTGAGCCCCTCATCCGCAGAGCAGCAGTTGCTGCTGTTTGCACAGACAGCAAATCCGGGGCATGTTTGTTTAGTAAGATTACCTCTGCTGGGGCCTGGCCCAAGGGA\t9EISNSRSMHDEJGJJSLJSSNLSSPLPNMSJNNSSMKSMNSQSSJSNSSKSHSKJKNOSJSJSSMRMSSSLPNMSMLECCB?::>??B988;HKD@=4444:767;?IFHHEEFDQKISSMNPLSSPSKLLSSLSKSSSSKPLJMNSKKOQSJOKSLSJKIB;FDMOQISMSAA@AAJJSNNORPSMJMKNLKSSJHNMMOJJGHKPSLOJ\ts1:i:211\ts2:i:0\tMD:Z:212\tRG:Z:COLO829_BL.28464\tML:B:C,2,27,23,3,3,9,27,17,7,252\tMM:Z:C+h?,17,10,9,11,11;C+m?,17,10,9,11,11;\tNM:i:0\tAS:i:424\tde:f:0.0\trl:i:0\tcm:i:41\tnn:i:0\ttp:A:P\tms:i:424\tqs:i:21");
        // create a new fresh file with a random name under the temporary folder.
		File fl = testFolder.newFile();
        try(BufferedWriter out = new BufferedWriter(new FileWriter(fl))) {
			for (String line : data)  out.write(line + "\n");        
		}
        
        return fl.getAbsolutePath();
	}	
	
}
