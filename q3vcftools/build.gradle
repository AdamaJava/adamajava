version = '0.1'

def mainclass = 'au.edu.qimr.vcftools.Merge'
def scriptname = 'q3vcftools'
def isExecutable = true

configurations {
	sshAntTask
}

repositories {
	//jcenter()
	
		flatDir {
			dirs '/Users/oliverh/devel/sf/trunk/adamajava/lib'
			dirs '/Users/oliverh/devel/sf/trunk/adamajava/qcommon/build/lib'
			dirs '/Users/oliverh/devel/sf/trunk/adamajava/qio/build/lib'
			dirs '../lib'
			dirs '../../../adamajava/qcommon/adama/build/lib/'
			dirs '../../../adamajava/qio/adama/build/lib/'
		}
		mavenCentral()
    //flatDir(dirs:"$projectDir/../lib")
}


dependencies {
    configurations.compile.transitive = true

    compile group: 'net.sf.jopt-simple',name: 'jopt-simple', version: '4.6'
    	compile name: 'htsjdk', version: '1.140'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile name: 'qcommon', version: '0.4'
    compile name: 'qio', version: '0.1.1'
	compile name: 'trove', version: '3.1a1'
	// https://mvnrepository.com/artifact/com.jcraft/jsch
	compile group: 'com.jcraft', name: 'jsch', version: '0.1.54'
	
	sshAntTask 'org.apache.ant:ant-jsch:1.10.4'

    testCompile name: 'junit', version: '4.10'
}

jar.doFirst {

  def classpath = configurations.runtime.collect { it.name }.join(' ')
  jar {
     manifest {
        attributes 'Implementation-Title': project.name,
                   'Implementation-Version': "$version ($svnVersion)",
                   'SVN-Version': svnVersion,
                   'Built-By': System.properties['user.name'],
                   'Date': new java.util.Date().toString(),
                   'Main-Class' : mainclass,
                   'Class-Path' : classpath
     }
  }
}

build.doLast {
    //jarname = project.name
//    ant {
//       copy(file: "bin/${scriptname}", todir: "build/bin")
//       replace(file: "build/bin/${scriptname}", token: "VERSION", value: "${version}")
//       chmod(file: "build/bin/${scriptname}", perm: "a+rwx")
//    }
    ant {
       echo(file: "build/flat/${scriptname}", message: "#!/bin/bash\njava -jar ${project.name}-${version}.jar \$@")
       chmod(file: "build/flat/${scriptname}", perm: "u+rwx")
    }
    copy {
       from configurations.compile
       from 'build/lib'
       into file('build/flat')
    }
}

task update {
	doLast {
	description = 'Update files on remote server.'
 
	// Get passphrase from user input.
	def console = System.console()
	def passphrase = console.readPassword('%s: ', 'Please enter the passphrase for the keyfile')
		 
	// Redefine scp Ant task, with the classpath property set to our newly defined
	// sshAntTask configuration classpath.
	ant.taskdef(name: 'scp', classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
			classpath: configurations.sshAntTask.asPath)
			 
	// Invoke the scp Ant task. (Use gradle -i update to see the output of the Ant task.)
	ant.scp(todir: 'oliverH@10.10.58.11:/mnt/backedup/home/oliverH',
			keyfile: '${user.home}/.ssh/id_rsa',
			//passphrase: passphrase as String, // Use phassphrase entered by the user.
			password:passphrase as String, // Use phassphrase entered by the user.
			verbose: 'true') {
		fileset(dir: 'build') {
			include(name: '**/**')
		}
		trust="true"
	}
}
}

task findbugs(dependsOn: build) << {
	def outputFileName = project.name
    ant {
        taskdef(name:'findbugs', classname:'edu.umd.cs.findbugs.anttask.FindBugsTask', classpath: 'build/deps/findbugs-1.3.9/lib/findbugs.jar')

        findbugs(home: 'build/deps/findbugs-1.3.9/lib', output:'xml', outputFile:'findbugs_' + "${outputFileName}-${version}" + '.xml') {
                sourcePath(path: 'src')
                "class"(location: 'build/lib/qprofiler-' + "$version" + '.jar')
        }
    }
}
