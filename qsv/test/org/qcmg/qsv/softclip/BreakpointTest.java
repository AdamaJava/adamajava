package org.qcmg.qsv.softclip;

import static org.easymock.EasyMock.createMock;
import static org.easymock.EasyMock.expect;
import static org.easymock.EasyMock.replay;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.OptionalInt;
import java.util.Set;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.qcmg.common.model.BLATRecord;
import org.qcmg.qsv.QSVException;
import org.qcmg.qsv.QSVParameters;
import org.qcmg.qsv.assemble.ConsensusRead;
import org.qcmg.qsv.splitread.UnmappedRead;
import org.qcmg.qsv.util.QSVUtil;
import org.qcmg.qsv.util.TestUtil;

public class BreakpointTest {
	
	Breakpoint breakpoint;
	
	@Rule
    public TemporaryFolder testFolder = new TemporaryFolder();

	@Test
	public void testDefineBreakpointPassesFilterWithSomaticRight() throws Exception {
		breakpoint = TestUtil.getBreakpoint(false, false, 20, false);
		assertTrue(breakpoint.defineBreakpoint(3, false, null));
		assertFalse(breakpoint.isGermline());
		assertEquals("somatic", breakpoint.getType());
		assertEquals(QSVUtil.MINUS, breakpoint.getStrand());
		assertEquals("chr10_89700299_false_-", breakpoint.getName());
		assertEquals("CCCTGCCCTAAGAGCAGCAAATTGCTGAACTCCTCTGGTGGACCTCTTACACAAAGTATAATCTC", breakpoint.getMateConsensus());
	}
	
	@Test
	public void testDefineBreakpointPassesFilterWithGermlineLeft() throws Exception {
		breakpoint = TestUtil.getBreakpoint(true, true, 20, false);
		assertTrue(breakpoint.defineBreakpoint(3, false, null));
		assertTrue(breakpoint.isGermline());
		assertEquals("germline", breakpoint.getType());
		assertEquals(QSVUtil.PLUS, breakpoint.getStrand());
		assertEquals("chr10_89712341_true_+", breakpoint.getName());
		assertEquals("AAAGATCAACCTGTCCTAAGTCATATAATCTCTTTGTGTAAGAGATTATACTTTGTGTA", breakpoint.getMateConsensus());
	}
	
	@Test
	public void getClipString() {
		Set<Clip> clips = TestUtil.getLeftClips(false);
		assertEquals(1439, Breakpoint.getClipString(clips).length());
	}
	
	@Test
	public void parseMatchingSplitReads() {
		String header = "";
		List<UnmappedRead> splitReadsList = new ArrayList<>();
		Breakpoint.parseMatchingSplitReads(header, splitReadsList);
		assertEquals(0, splitReadsList.size());
		try {
			Breakpoint.parseMatchingSplitReads(header, null);
			fail("Should have thrown an IAE");
		} catch (IllegalArgumentException iae) {}
		try {
			Breakpoint.parseMatchingSplitReads(null, splitReadsList);
			fail("Should have thrown an IAE");
		} catch (IllegalArgumentException iae) {}
		try {
			Breakpoint.parseMatchingSplitReads(null, null);
			fail("Should have thrown an IAE");
		} catch (IllegalArgumentException iae) {}
		
		header += "what a great header";
		splitReadsList.add(new UnmappedRead("column1,what a really great header,column2,3,column4", true));
		Breakpoint.parseMatchingSplitReads(header, splitReadsList);
		assertEquals(0,splitReadsList.size());
		splitReadsList.add(new UnmappedRead("column1,what a really great header,column2,3,column4", true));
		splitReadsList.add(new UnmappedRead("column1,what a really really great header,column2,3,column4", true));
		Breakpoint.parseMatchingSplitReads(header, splitReadsList);
		assertEquals(0, splitReadsList.size());
		splitReadsList.add(new UnmappedRead("column1,what a really great header,column2,3,column4", true));
		splitReadsList.add(new UnmappedRead("column1,what a really really great header,column2,3,column4", true));
		splitReadsList.add(new UnmappedRead("column1,what a great header,column2,3,column4", true));
		Breakpoint.parseMatchingSplitReads(header, splitReadsList);
		assertEquals(0, splitReadsList.size());
		/*
		 * need "split_ to precede the header...
		 */
		splitReadsList.add(new UnmappedRead("column1,what a really great header,column2,3,column4", true));
		splitReadsList.add(new UnmappedRead("column1,what a really really great header,column2,3,column4", true));
		splitReadsList.add(new UnmappedRead("column1,what a great header,column2,3,column4", true));
		header += "split_what a great header";
		Breakpoint.parseMatchingSplitReads(header, splitReadsList);
		assertEquals(1, splitReadsList.size());
		
		splitReadsList.add(new UnmappedRead("column1,what a great header,column2,3,column4", true));
		splitReadsList.add(new UnmappedRead("column1,what a great header,column2,3,column4", true));
		splitReadsList.add(new UnmappedRead("column1,what a great header,column2,3,column4", true));
		Breakpoint.parseMatchingSplitReads(header, splitReadsList);
		assertEquals(4, splitReadsList.size());
	}
	
	@Test
	public void matchBreakpoint() throws Exception {
		/*
		 * Breakpoint [consensusLength=20, breakpoint=165002, isLeft=true, minInsertSize=50, reference=GL00
0219.1, isGermline=true, tumourClips=[ST-E00129:529:HF5FTALXX:2:2202:30614:42042:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,-,left,ACTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACA
ACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGAC,ACTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCT
GTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGAC
, ST-E00104:642:HF55MALXX:5:1202:1621:35133:00587a9e-66fc-4fd2-a972-eee4cbaf9613,GL000219.1,165002,+,left,TTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACAT
TCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGTT,TTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCT
GAGGGACAAACATGCAGACCCTCACAGCAGTGTT
, ST-E00104:642:HF55MALXX:2:2205:28747:49988:a7408e63-f751-46d8-b0ec-849c8b653631,GL000219.1,165002,-,left,AGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATT
CAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGTTCT,AGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTG
AGGGACAAACATGCAGACCCTCACAGCAGTGTTCT
, ST-E00104:642:HF55MALXX:5:2215:28381:35819:00587a9e-66fc-4fd2-a972-eee4cbaf9613,GL000219.1,165002,+,left,CTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGT
GTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACC,CTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGT
TCAGGAATCCTATCTGAGGGACAAACATGCAGACC
, ST-E00129:529:HF5FTALXX:2:2103:20446:28330:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,+,left,CAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGAC
AAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCA,CAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCA
, ST-E00104:642:HF55MALXX:8:2115:26047:18942:3ae5af45-d754-4534-80f3-e08252df172b,GL000219.1,165002,-,left,AAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCAC,AAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCAC
, ST-E00129:529:HF5FTALXX:2:1205:18284:22018:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,-,left,AGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTC,AGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTC
, ST-E00129:529:HF5FTALXX:2:1124:5507:35643:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,+,left,AGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTC,AGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTC
, ST-E00129:529:HF5FTALXX:2:2102:16163:65459:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,+,left,CATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTG,CATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTG
, ST-E00129:529:HF5FTALXX:3:2223:31314:6724:8c954e28-d035-4a28-806e-b8837caab052,GL000219.1,165002,-,left,AGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGTTCT,AGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGTTCT
, ST-E00129:529:HF5FTALXX:2:2121:16701:57565:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,+,left,CATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTG,CATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTG
, ST-E00129:529:HF5FTALXX:2:2118:14367:57600:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,+,left,AAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACA,AAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACA
, ST-E00129:529:HF5FTALXX:2:1124:20994:51746:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,-,left,ACTCAGAAAACATCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCGTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGAC,ACTCAGAAAACATCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCGTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGAC
, ST-E00129:529:HF5FTALXX:2:2117:26606:15373:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,+,left,CAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCA,CAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCA
, ST-E00104:642:HF55MALXX:8:1115:25560:25798:3ae5af45-d754-4534-80f3-e08252df172b,GL000219.1,165002,-,left,AAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCAC,AAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCAC
, ST-E00104:642:HF55MALXX:2:2223:6248:2680:a7408e63-f751-46d8-b0ec-849c8b653631,GL000219.1,165002,-,left,TCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCC,TCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCC
, ST-E00104:642:HF55MALXX:2:2208:3447:10697:a7408e63-f751-46d8-b0ec-849c8b653631,GL000219.1,165002,-,left,TAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGTTC,TAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGTTC
, ST-E00104:642:HF55MALXX:5:2216:17066:61503:00587a9e-66fc-4fd2-a972-eee4cbaf9613,GL000219.1,165002,+,left,AGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGGAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTC,AGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGGAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTC
, ST-E00104:642:HF55MALXX:8:1123:24353:62523:3ae5af45-d754-4534-80f3-e08252df172b,GL000219.1,165002,+,left,ATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACC,ATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACC
, ST-E00129:529:HF5FTALXX:2:1106:19928:34500:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,+,left,GAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCA,GAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCA
, ST-E00104:642:HF55MALXX:8:2108:23794:21895:3ae5af45-d754-4534-80f3-e08252df172b,GL000219.1,165002,-,left,CACTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGA,CACTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGA
], normalClips=[ST-E00129:529:HF5FTALXX:5:1115:15483:5458:71b40638-002b-4c7b-8a66-3b6209527a93,GL000219.1,165002,-,left,AACACTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCA,AACACTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCA
, ST-E00129:529:HF5FTALXX:5:1122:26646:26659:71b40638-002b-4c7b-8a66-3b6209527a93,GL000219.1,165002,-,left,AAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCAC,AAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCAC
, ST-E00129:529:HF5FTALXX:5:1223:11038:57706:71b40638-002b-4c7b-8a66-3b6209527a93,GL000219.1,165002,+,left,CAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCA,CAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCA
, ST-E00129:529:HF5FTALXX:4:2109:20689:25411:4ea3b900-5fd2-4e6e-bb7d-2f2fbec977bd,GL000219.1,165002,+,left,GCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGT,GCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGT
, ST-E00129:529:HF5FTALXX:5:1218:28696:13931:71b40638-002b-4c7b-8a66-3b6209527a93,GL000219.1,165002,+,left,AACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAG,AACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAG
, ST-E00129:529:HF5FTALXX:5:2116:17939:10767:71b40638-002b-4c7b-8a66-3b6209527a93,GL000219.1,165002,+,left,CTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACC,CTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACC
, ST-E00129:529:HF5FTALXX:4:2110:5061:26255:4ea3b900-5fd2-4e6e-bb7d-2f2fbec977bd,GL000219.1,165002,-,left,ATCAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGT,ATCAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGT
, ST-E00129:529:HF5FTALXX:4:2119:32167:23319:4ea3b900-5fd2-4e6e-bb7d-2f2fbec977bd,GL000219.1,165002,-,left,AAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACA,AAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACA
], tumourSplitReads=[], normalSplitReads=[], positiveStrand=true, mateReference=null, mateBreakpoint=0, matePositiveStrand=false, referenceKey=null, blatRecord=null, consensusRead=>clipContigFor,fullclip_ST-E00104:642:HF55MALXX:8:2115:26047:18942:3ae5af45-d754-4534-80f3-e08252df172b,fullclip_ST-E00129:529:HF5FTALXX:2:2102:16163:65459:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,fullclip_ST-E00104:642:HF55MALXX:5:1202:1621:35133:00587a9e-66fc-4fd2-a972-eee4cbaf9613,fullclip_ST-E00129:529:HF5FTALXX:5:1223:11038:57706:71b40638-002b-4c7b-8a66-3b6209527a93,fullclip_ST-E00104:642:HF55MALXX:2:2223:6248:2680:a7408e63-f751-46d8-b0ec-849c8b653631,fullclip_ST-E00104:642:HF55MALXX:8:1123:24353:62523:3ae5af45-d754-4534-80f3-e08252df172b,fullclip_ST-E00129:529:HF5FTALXX:2:1106:19928:34500:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,fullclip_ST-E00104:642:HF55MALXX:2:2208:3447:10697:a7408e63-f751-46d8-b0ec-849c8b653631,fullclip_ST-E00129:529:HF5FTALXX:2:2103:20446:28330:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,fullclip_ST-E00129:529:HF5FTALXX:2:2118:14367:57600:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,fullclip_ST-E00129:529:HF5FTALXX:2:2117:26606:15373:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,fullclip_ST-E00129:529:HF5FTALXX:5:2116:17939:10767:71b40638-002b-4c7b-8a66-3b6209527a93,fullclip_ST-E00104:642:HF55MALXX:2:2205:28747:49988:a7408e63-f751-46d8-b0ec-849c8b653631,fullclip_ST-E00129:529:HF5FTALXX:2:1205:18284:22018:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,fullclip_ST-E00129:529:HF5FTALXX:2:2121:16701:57565:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,fullclip_ST-E00129:529:HF5FTALXX:4:2109:20689:25411:4ea3b900-5fd2-4e6e-bb7d-2f2fbec977bd,fullclip_ST-E00129:529:HF5FTALXX:5:1122:26646:26659:71b40638-002b-4c7b-8a66-3b6209527a93,fullclip_ST-E00129:529:HF5FTALXX:3:2223:31314:6724:8c954e28-d035-4a28-806e-b8837caab052,fullclip_ST-E00129:529:HF5FTALXX:4:2119:32167:23319:4ea3b900-5fd2-4e6e-bb7d-2f2fbec977bd,fullclip_ST-E00129:529:HF5FTALXX:2:1124:5507:35643:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,fullclip_ST-E00104:642:HF55MALXX:5:2216:17066:61503:00587a9e-66fc-4fd2-a972-eee4cbaf9613,fullclip_ST-E00104:642:HF55MALXX:8:1115:25560:25798:3ae5af45-d754-4534-80f3-e08252df172b,fullclip_ST-E00129:529:HF5FTALXX:5:1218:28696:13931:71b40638-002b-4c7b-8a66-3b6209527a93,fullclip_ST-E00104:642:HF55MALXX:5:2215:28381:35819:00587a9e-66fc-4fd2-a972-eee4cbaf9613
FULL:CTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGTTCT
CLIPS:CTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA
READ:GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGTTCT
, posStrandCount=15, negStrandCount=14, splitConsensusReads=0, clipConsensusReads=29, nonTempBases=0, splitReadsMap=null]
		 */
		Breakpoint b = new Breakpoint(165002, "GL000219.1", true, 20, 50);
		b.setGermline(true);
		b.addTumourClip(new Clip("ST-E00129:529:HF5FTALXX:2:2202:30614:42042:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,-,left,ACTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGAC,ACTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGAC"));
		b.addTumourClip(new Clip("ST-E00104:642:HF55MALXX:5:1202:1621:35133:00587a9e-66fc-4fd2-a972-eee4cbaf9613,GL000219.1,165002,+,left,TTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGTT,TTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGT"));
		b.addTumourClip(new Clip("ST-E00104:642:HF55MALXX:2:2205:28747:49988:a7408e63-f751-46d8-b0ec-849c8b653631,GL000219.1,165002,-,left,AGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGTTCT,AGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGTTCT"));
		b.addTumourClip(new Clip("ST-E00104:642:HF55MALXX:5:2215:28381:35819:00587a9e-66fc-4fd2-a972-eee4cbaf9613,GL000219.1,165002,+,left,CTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACC,CTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACC"));
		b.addTumourClip(new Clip("ST-E00129:529:HF5FTALXX:2:2103:20446:28330:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,+,left,CAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCA,CAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCA"));
		b.addTumourClip(new Clip("ST-E00104:642:HF55MALXX:8:2115:26047:18942:3ae5af45-d754-4534-80f3-e08252df172b,GL000219.1,165002,-,left,AAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCAC,AAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCAC"));
		b.addTumourClip(new Clip("ST-E00129:529:HF5FTALXX:2:1205:18284:22018:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,-,left,AGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTC,AGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTC"));
		b.addTumourClip(new Clip("ST-E00129:529:HF5FTALXX:2:1124:5507:35643:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,+,left,AGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTC,AGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTC"));
		b.addTumourClip(new Clip("ST-E00129:529:HF5FTALXX:2:2102:16163:65459:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,+,left,CATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTG,CATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTG"));
		b.addTumourClip(new Clip("ST-E00129:529:HF5FTALXX:3:2223:31314:6724:8c954e28-d035-4a28-806e-b8837caab052,GL000219.1,165002,-,left,AGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGTTCT,AGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGTTCT"));
		b.addTumourClip(new Clip("ST-E00129:529:HF5FTALXX:2:2121:16701:57565:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,+,left,CATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTG,CATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTG"));
		b.addTumourClip(new Clip("ST-E00129:529:HF5FTALXX:2:2118:14367:57600:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,+,left,AAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACA,AAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACA"));
		b.addTumourClip(new Clip("ST-E00129:529:HF5FTALXX:2:1124:20994:51746:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,-,left,ACTCAGAAAACATCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCGTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGAC,ACTCAGAAAACATCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCGTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGAC"));
		b.addTumourClip(new Clip("ST-E00129:529:HF5FTALXX:2:2117:26606:15373:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,+,left,CAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCA,CAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCA"));
		b.addTumourClip(new Clip("ST-E00104:642:HF55MALXX:8:1115:25560:25798:3ae5af45-d754-4534-80f3-e08252df172b,GL000219.1,165002,-,left,AAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCAC,AAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCAC"));
		b.addTumourClip(new Clip("ST-E00104:642:HF55MALXX:2:2223:6248:2680:a7408e63-f751-46d8-b0ec-849c8b653631,GL000219.1,165002,-,left,TCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCC,TCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCC"));
		b.addTumourClip(new Clip("ST-E00104:642:HF55MALXX:2:2208:3447:10697:a7408e63-f751-46d8-b0ec-849c8b653631,GL000219.1,165002,-,left,TAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGTTC,TAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGTTC"));
		b.addTumourClip(new Clip("ST-E00104:642:HF55MALXX:5:2216:17066:61503:00587a9e-66fc-4fd2-a972-eee4cbaf9613,GL000219.1,165002,+,left,AGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGGAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTC,AGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGGAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTC"));
		b.addTumourClip(new Clip("ST-E00104:642:HF55MALXX:8:1123:24353:62523:3ae5af45-d754-4534-80f3-e08252df172b,GL000219.1,165002,+,left,ATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACC,ATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACC"));
		b.addTumourClip(new Clip("ST-E00129:529:HF5FTALXX:2:1106:19928:34500:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,GL000219.1,165002,+,left,GAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCA,GAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCA"));
		b.addTumourClip(new Clip("ST-E00104:642:HF55MALXX:8:2108:23794:21895:3ae5af45-d754-4534-80f3-e08252df172b,GL000219.1,165002,-,left,CACTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGA,CACTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGA"));
		
		b.addNormalClip(new Clip("ST-E00129:529:HF5FTALXX:5:1115:15483:5458:71b40638-002b-4c7b-8a66-3b6209527a93,GL000219.1,165002,-,left,AACACTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCA,AACACTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCA"));
		b.addNormalClip(new Clip("ST-E00129:529:HF5FTALXX:5:1122:26646:26659:71b40638-002b-4c7b-8a66-3b6209527a93,GL000219.1,165002,-,left,AAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCAC,AAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCAC"));
		b.addNormalClip(new Clip("ST-E00129:529:HF5FTALXX:5:1223:11038:57706:71b40638-002b-4c7b-8a66-3b6209527a93,GL000219.1,165002,+,left,CAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCA,CAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCA"));
		b.addNormalClip(new Clip("ST-E00129:529:HF5FTALXX:4:2109:20689:25411:4ea3b900-5fd2-4e6e-bb7d-2f2fbec977bd,GL000219.1,165002,+,left,GCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGT,GCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGT"));
		b.addNormalClip(new Clip("ST-E00129:529:HF5FTALXX:5:1218:28696:13931:71b40638-002b-4c7b-8a66-3b6209527a93,GL000219.1,165002,+,left,AACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAG,AACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAG"));
		b.addNormalClip(new Clip("ST-E00129:529:HF5FTALXX:5:2116:17939:10767:71b40638-002b-4c7b-8a66-3b6209527a93,GL000219.1,165002,+,left,CTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACC,CTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACC"));
		b.addNormalClip(new Clip("ST-E00129:529:HF5FTALXX:4:2110:5061:26255:4ea3b900-5fd2-4e6e-bb7d-2f2fbec977bd,GL000219.1,165002,-,left,ATCAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGT,ATCAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGT"));
		b.addNormalClip(new Clip("ST-E00129:529:HF5FTALXX:4:2119:32167:23319:4ea3b900-5fd2-4e6e-bb7d-2f2fbec977bd,GL000219.1,165002,-,left,AAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACA,AAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA,GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACA"));
		b.setStrand('+');
		b.setMateBreakpoint(0);
		b.setConsensusRead(new ConsensusRead("clipContigFor,fullclip_ST-E00104:642:HF55MALXX:8:2115:26047:18942:3ae5af45-d754-4534-80f3-e08252df172b,fullclip_ST-E00129:529:HF5FTALXX:2:2102:16163:65459:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,fullclip_ST-E00104:642:HF55MALXX:5:1202:1621:35133:00587a9e-66fc-4fd2-a972-eee4cbaf9613,fullclip_ST-E00129:529:HF5FTALXX:5:1223:11038:57706:71b40638-002b-4c7b-8a66-3b6209527a93,fullclip_ST-E00104:642:HF55MALXX:2:2223:6248:2680:a7408e63-f751-46d8-b0ec-849c8b653631,fullclip_ST-E00104:642:HF55MALXX:8:1123:24353:62523:3ae5af45-d754-4534-80f3-e08252df172b,fullclip_ST-E00129:529:HF5FTALXX:2:1106:19928:34500:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,fullclip_ST-E00104:642:HF55MALXX:2:2208:3447:10697:a7408e63-f751-46d8-b0ec-849c8b653631,fullclip_ST-E00129:529:HF5FTALXX:2:2103:20446:28330:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,fullclip_ST-E00129:529:HF5FTALXX:2:2118:14367:57600:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,fullclip_ST-E00129:529:HF5FTALXX:2:2117:26606:15373:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,fullclip_ST-E00129:529:HF5FTALXX:5:2116:17939:10767:71b40638-002b-4c7b-8a66-3b6209527a93,fullclip_ST-E00104:642:HF55MALXX:2:2205:28747:49988:a7408e63-f751-46d8-b0ec-849c8b653631,fullclip_ST-E00129:529:HF5FTALXX:2:1205:18284:22018:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,fullclip_ST-E00129:529:HF5FTALXX:2:2121:16701:57565:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,fullclip_ST-E00129:529:HF5FTALXX:4:2109:20689:25411:4ea3b900-5fd2-4e6e-bb7d-2f2fbec977bd,fullclip_ST-E00129:529:HF5FTALXX:5:1122:26646:26659:71b40638-002b-4c7b-8a66-3b6209527a93,fullclip_ST-E00129:529:HF5FTALXX:3:2223:31314:6724:8c954e28-d035-4a28-806e-b8837caab052,fullclip_ST-E00129:529:HF5FTALXX:4:2119:32167:23319:4ea3b900-5fd2-4e6e-bb7d-2f2fbec977bd,fullclip_ST-E00129:529:HF5FTALXX:2:1124:5507:35643:ff341031-8dc5-4e50-9ff2-e9e1ee8f614f,fullclip_ST-E00104:642:HF55MALXX:5:2216:17066:61503:00587a9e-66fc-4fd2-a972-eee4cbaf9613,fullclip_ST-E00104:642:HF55MALXX:8:1115:25560:25798:3ae5af45-d754-4534-80f3-e08252df172b,fullclip_ST-E00129:529:HF5FTALXX:5:1218:28696:13931:71b40638-002b-4c7b-8a66-3b6209527a93,fullclip_ST-E00104:642:HF55MALXX:5:2215:28381:35819:00587a9e-66fc-4fd2-a972-eee4cbaf9613"
				,"CTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGAGTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGTTCT"
				,"CTCAGAAAACAGCATTAGTGTTTTGCAATCCTATGGGAGGGACAACATTCACACCCTTGTAGCAGA","GTTCTGGAATCCTGTGTGAGGGACAAACATTCAGACCACTGCAGGATTGTTCAGGAATCCTATCTGAGGGACAAACATGCAGACCCTCACAGCAGTGTTCT"));
		
		BLATRecord r = new BLATRecord("52	4	0	0	0	0	1	1	+	GL000219.1_165002_true_+	66	9	65	GL000219.1	179198	165421	165478	2	36,20,	9,45,	165421,165458,");
		
		assertEquals(0, b.getMateBreakpoint());
		assertEquals(true, b.findMateBreakpoint(r));
		assertEquals(165478, b.getMateBreakpoint());
		assertEquals("GL000219.1", b.getMateReference());
		
		/*
		 * try and match to another blat record - aligned by the tiled aligner of course...
		 */
		BLATRecord r2 = new BLATRecord("57	7	0	0	1	1	0	0	+	name	66	-1	64	GL000219.1	12345	165414	165479	2	43,19	1,46	165415,165460");
		assertEquals(true, b.findMateBreakpoint(r2));
		assertEquals(165479, b.getMateBreakpoint());			// out by 1
		assertEquals("GL000219.1", b.getMateReference());
		assertEquals("GL000219.1_165002_true_+", b.getName());
	}
	
	@Test
	public void matchBreakpoint2() throws Exception {
		/*
		 * Breakpoint [consensusLength=20, breakpoint=25061047, isLeft=false, minInsertSize=50, reference=chr9, isGermline=true, tumourClips=[ST-E00104:642:HF55MALXX:5:1121:3285:7814:00587a9e-66fc-4fd2-a972-eee4cbaf9613,chr9,25061047,+,right,CACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGCCAGTCAGAACTTCCAGGTGGCT,CAGTCAGAACTTCCAGGTGGCT,CACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGC
, ST-E00104:642:HF55MALXX:5:2224:12378:56721:00587a9e-66fc-4fd2-a972-eee4cbaf9613,chr9,25061047,+,right,ACCCACAGCCACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGCCAGTC,CAGTC,ACCCACAGCCACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGC
, ST-E00104:642:HF55MALXX:4:1107:29396:28435:cd63589e-70c3-4c57-b11c-4bb05ca22592,chr9,25061047,+,right,CACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGCCAGTCAGACCTTCC,CAGTCAGACCTTCC,CACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGC
, ST-E00104:642:HF55MALXX:3:1222:24779:64808:30a4cb83-388a-48a6-84e4-9e82f3ec8df5,chr9,25061047,+,right,ACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGCCAGTCAGAACTTCCA,CAGTCAGAACTTCCA,ACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGC
, ST-E00104:642:HF55MALXX:5:1123:13941:59429:00587a9e-66fc-4fd2-a972-eee4cbaf9613,chr9,25061047,+,right,AGCCACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGCATCTAGAGAGGCAGTCTGGCTACAGTGGCCAGTCAGAACT,CAGTCAGAACT,AGCCACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGCATCTAGAGAGGCAGTCTGGCTACAGTGGC
, ST-E00104:642:HF55MALXX:4:1219:29264:26835:cd63589e-70c3-4c57-b11c-4bb05ca22592,chr9,25061047,+,right,TTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGCCAGTCAGAACTTCCAGGTGG,CAGTCAGAACTTCCAGGTGG,TTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGC
], normalClips=[ST-E00129:529:HF5FTALXX:5:2122:12388:59727:71b40638-002b-4c7b-8a66-3b6209527a93,chr9,25061047,+,right,CCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGCCAGTCAGAACTTCCAGGTGGCTTTG,CAGTCAGAACTTCCAGGTGGCTTTG,CCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGC
], tumourSplitReads=[], normalSplitReads=[], positiveStrand=true, mateReference=null, mateBreakpoint=0, matePositiveStrand=false, referenceKey=null, blatRecord=null, consensusRead=>clipContigFor,fullclip_ST-E00104:642:HF55MALXX:5:1121:3285:7814:00587a9e-66fc-4fd2-a972-eee4cbaf9613,fullclip_ST-E00104:642:HF55MALXX:3:1222:24779:64808:30a4cb83-388a-48a6-84e4-9e82f3ec8df5,fullclip_ST-E00104:642:HF55MALXX:5:1123:13941:59429:00587a9e-66fc-4fd2-a972-eee4cbaf9613,fullclip_ST-E00104:642:HF55MALXX:4:1219:29264:26835:cd63589e-70c3-4c57-b11c-4bb05ca22592,fullclip_ST-E00129:529:HF5FTALXX:5:2122:12388:59727:71b40638-002b-4c7b-8a66-3b6209527a93
FULL:AGCCACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGCCAGTCAGAACTTCCAGGTGGCTTTG
CLIPS:CAGTCAGAACTTCCAGGTGGCTTTG
READ:AGCCACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGC
, posStrandCount=7, negStrandCount=0, splitConsensusReads=0, clipConsensusReads=7, nonTempBases=0, splitReadsMap=null]
		 */
		Breakpoint b = new Breakpoint(25061047, "chr9", false, 20, 50);
		b.setGermline(true);
		b.addTumourClip(new Clip("ST-E00104:642:HF55MALXX:5:1121:3285:7814:00587a9e-66fc-4fd2-a972-eee4cbaf9613,chr9,25061047,+,right,CACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGCCAGTCAGAACTTCCAGGTGGCT,CAGTCAGAACTTCCAGGTGGCT,CACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGC"));
		b.addTumourClip(new Clip("ST-E00104:642:HF55MALXX:5:2224:12378:56721:00587a9e-66fc-4fd2-a972-eee4cbaf9613,chr9,25061047,+,right,ACCCACAGCCACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGCCAGTC,CAGTC,ACCCACAGCCACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGC"));
		b.addTumourClip(new Clip("ST-E00104:642:HF55MALXX:4:1107:29396:28435:cd63589e-70c3-4c57-b11c-4bb05ca22592,chr9,25061047,+,right,CACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGCCAGTCAGACCTTCC,CAGTCAGACCTTCC,CACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGC"));
		b.addTumourClip(new Clip("ST-E00104:642:HF55MALXX:3:1222:24779:64808:30a4cb83-388a-48a6-84e4-9e82f3ec8df5,chr9,25061047,+,right,ACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGCCAGTCAGAACTTCCA,CAGTCAGAACTTCCA,ACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGC"));
		b.addTumourClip(new Clip("ST-E00104:642:HF55MALXX:5:1123:13941:59429:00587a9e-66fc-4fd2-a972-eee4cbaf9613,chr9,25061047,+,right,AGCCACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGCATCTAGAGAGGCAGTCTGGCTACAGTGGCCAGTCAGAACT,CAGTCAGAACT,AGCCACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGCATCTAGAGAGGCAGTCTGGCTACAGTGGC"));
		b.addTumourClip(new Clip("ST-E00104:642:HF55MALXX:4:1219:29264:26835:cd63589e-70c3-4c57-b11c-4bb05ca22592,chr9,25061047,+,right,TTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGCCAGTCAGAACTTCCAGGTGG,CAGTCAGAACTTCCAGGTGG,TTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGC"));
		b.addNormalClip(new Clip("ST-E00129:529:HF5FTALXX:5:2122:12388:59727:71b40638-002b-4c7b-8a66-3b6209527a93,chr9,25061047,+,right,CCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGCCAGTCAGAACTTCCAGGTGGCTTTG,CAGTCAGAACTTCCAGGTGGCTTTG,CCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGC"));
		b.setStrand('+');
		b.setConsensusRead(new ConsensusRead(">clipContigFor,fullclip_ST-E00104:642:HF55MALXX:5:1121:3285:7814:00587a9e-66fc-4fd2-a972-eee4cbaf9613,fullclip_ST-E00104:642:HF55MALXX:3:1222:24779:64808:30a4cb83-388a-48a6-84e4-9e82f3ec8df5,fullclip_ST-E00104:642:HF55MALXX:5:1123:13941:59429:00587a9e-66fc-4fd2-a972-eee4cbaf9613,fullclip_ST-E00104:642:HF55MALXX:4:1219:29264:26835:cd63589e-70c3-4c57-b11c-4bb05ca22592,fullclip_ST-E00129:529:HF5FTALXX:5:2122:12388:59727:71b40638-002b-4c7b-8a66-3b6209527a93"
				,"AGCCACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGCCAGTCAGAACTTCCAGGTGGCTTTG"
				,"CAGTCAGAACTTCCAGGTGGCTTTG","AGCCACCCTTTCACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCTGACTGGGGCTGCTGCCTTTCTTTCAGAGATGGCTTGCCCAGAGAGGAGGAATCTAGAGAGGCAGTCTGGCTACAGTGGC"));
		
		/*
		 * try and match to another blat record - aligned by the tiled aligner of course...
		 */
		BLATRecord r2 = new BLATRecord("25	0	0	0	0	0	0	0	+	name	25	0	25	chr11	12345	18918919	18918944	1	24	1	18918920");
		assertEquals(true, b.findMateBreakpoint(r2));
		assertEquals(18918920, b.getMateBreakpoint());			// out by 1
		assertEquals("chr11", b.getMateReference());
		assertEquals("chr9_25061047_false_+", b.getName());
	}
	
	@Test
	public void findMateBreakpointIsTrueTA() throws Exception {
		breakpoint = TestUtil.getBreakpoint(true, true, 20, false);
		
		String value = "42	1	0	0	0	0	0	0	+	name	59	0	43	chr10	135534747	89700259	89700301	1	42	1	89700259";
		String[] values =value.split("\t");
		BLATRecord tiledAlignerBlatRecord = new BLATRecord(values);
		
		assertEquals(true, breakpoint.findMateBreakpoint(tiledAlignerBlatRecord));
		assertEquals(QSVUtil.PLUS, breakpoint.getMateStrand());
		assertEquals("chr10", breakpoint.getMateReference());
		assertEquals(89700301, breakpoint.getMateBreakpoint());
		assertEquals("chr10:chr10", breakpoint.getReferenceKey());
	}
	
	@Test
	public void addClip() throws Exception {
		Breakpoint b = new Breakpoint(25061047, "chr9", false, 20, 50);
		b.setGermline(true);
		b.addTumourClip(new Clip("ST-E00104:642:HF55MALXX:5:1121:3285:7814:00587a9e-66fc-4fd2-a972-eee4cbaf9613,chr9,25061047,+,right,CACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCAGAACTTCCAGGTGGCT,CAGTCAGAGGTGGCT,CACCCAGGTGCTCTTACAGTGGC"));
		assertEquals(1, b.getClipsSize());
		/*
		 * add same clip again - size should remain the same
		 */
		b.addTumourClip(new Clip("ST-E00104:642:HF55MALXX:5:1121:3285:7814:00587a9e-66fc-4fd2-a972-eee4cbaf9613,chr9,25061047,+,right,CACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCAGAACTTCCAGGTGGCT,CAGTCAGAGGTGGCT,CACCCAGGTGCTCTTACAGTGGC"));
		assertEquals(1, b.getClipsSize());
		
		/*
		 * add in a normal
		 */
		b.addNormalClip(new Clip("ST-E00104:642:HF55MALXX:5:1121:3285:7814:00587a9e-66fc-4fd2-a972-eee4cbaf9613,chr9,25061047,+,right,CACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCAGAACTTCCAGGTGGCT,CAGTCAGAGGTGGCT,CACCCAGGTGCTCTTACAGTGGC"));
		assertEquals(2, b.getClipsSize());
		b.addNormalClip(new Clip("ST-E00104:642:HF55MALXX:5:1121:3285:7814:00587a9e-66fc-4fd2-a972-eee4cbaf9613,chr9,25061047,+,right,CACCCAGGTGCTCTGTCACAGGGAGATGAGAGTTTTATCTATAAGCCTCAGAACTTCCAGGTGGCT,CAGTCAGAGGTGGCT,CACCCAGGTGCTCTTACAGTGGC"));
		assertEquals(2, b.getClipsSize());
	}
	
	@Test
	public void testDefineBreakpointNoPassesFilterClipSizeFilter() throws Exception {
		breakpoint = TestUtil.getBreakpoint(true, true, 20, false);
		assertFalse(breakpoint.defineBreakpoint(10, false, null));
	}
	
	@Test
	public void testDefineBreakpointNoPassesFilterConsensusFilter() throws Exception {
		breakpoint = TestUtil.getBreakpoint(true, true, 100, false);
		assertFalse(breakpoint.defineBreakpoint(3, false, null));
	}
	
	@Test
	public void testDefineBreakpointNoPassesHighNCountFilter() throws Exception {
		breakpoint = TestUtil.getBreakpoint(true, true, 20, true);
		assertFalse(breakpoint.defineBreakpoint(3, false, null));
	}
	
	@Test
	public void testFindMateBreakpointIsTrue() throws Exception {
		String value = "48\t1\t0\t0\t2\t0\t3\t0\t+\tchr10-89712341-true-pos\t66\t0\t48\tchr10\t135534747\t89700251\t89700299\t1\t48,\t0,\t89700251,";
		String[] values =value.split("\t");
		BLATRecord record = new BLATRecord(values);
		
		breakpoint = TestUtil.getBreakpoint(true, false, 20, false);
		assertTrue(breakpoint.findMateBreakpoint(record));
		assertEquals(QSVUtil.PLUS, breakpoint.getMateStrand());
		assertEquals("chr10", breakpoint.getMateReference());
		assertEquals(89700299, breakpoint.getMateBreakpoint());
		assertEquals("chr10:chr10", breakpoint.getReferenceKey());
	}
	
	@Test
	public void testFindMateBreakpointIsTrueWithNoChr() throws Exception {
		String value = "48\t1\t0\t0\t2\t0\t3\t0\t+\t10-89712341-true-pos\t66\t0\t48\tchr10\t135534747\t89700251\t89700299\t1\t48,\t0,\t89700251,";
		String[] values =value.split("\t");
		BLATRecord record = new BLATRecord(values);
		
		breakpoint = TestUtil.getBreakpointNoChr(true, false, 20);
		assertEquals(true, breakpoint.findMateBreakpoint(record));
		
		assertEquals(QSVUtil.PLUS, breakpoint.getMateStrand());
		assertEquals("chr10", breakpoint.getMateReference());
		assertEquals(89700299, breakpoint.getMateBreakpoint());
		assertEquals("10:chr10", breakpoint.getReferenceKey());
	}
	
	@Test
	public void testFindMateBreakpointWithReordering() throws Exception {
		String value = "48\t1\t0\t0\t2\t0\t3\t0\t+\tchr10-89712341-true-pos\t66\t0\t48\tchr7\t135534747\t89700251\t89700299\t1\t48,\t0,\t89700251,";
		String[] values =value.split("\t");
		BLATRecord record = new BLATRecord(values);
		
		breakpoint = TestUtil.getBreakpoint(false, false, 20, false);
		assertTrue(breakpoint.findMateBreakpoint(record));
		assertEquals("chr7:chr10", breakpoint.getReferenceKey());
	}
	
	@Test
	public void calculateConsensusActual() throws Exception {
		breakpoint = TestUtil.getBreakpoint(true, true, 20, false);
		assertEquals("AGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGGCAGGGATCAATTCCTTAATATCTTAGGAAGACTAGGTATTGACAGTAAT", Breakpoint.calculateConsensus(breakpoint.getStrand(), breakpoint.getBreakpointConsenus().length(), false, breakpoint.getTumourClips(), breakpoint.getNormalClips(), breakpoint.isGermline()));
		assertEquals("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNAAAGATCAACCTGTCCTAAGTCATATAATCTCTTTGTGTAAGAGATTATACTTTGTGTA", Breakpoint.calculateConsensus(breakpoint.getStrand(), breakpoint.getBreakpointConsenus().length(), true, breakpoint.getTumourClips(), breakpoint.getNormalClips(), breakpoint.isGermline()));
		breakpoint = TestUtil.getBreakpoint(true, false, 20, false);
		assertEquals("AGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGGCAGGGATCAATTCCTTAATATCTTAGGAAGACTAGGTATTGACAGTAAT", Breakpoint.calculateConsensus(breakpoint.getStrand(), breakpoint.getBreakpointConsenus().length(), false, breakpoint.getTumourClips(), breakpoint.getNormalClips(), breakpoint.isGermline()));
		assertEquals("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNAAAGATCAACCTGTCCTAAGTCATATAATCTCTTTGTGTAAGAGATTATACTTTGTGTA", Breakpoint.calculateConsensus(breakpoint.getStrand(), breakpoint.getBreakpointConsenus().length(), true, breakpoint.getTumourClips(), breakpoint.getNormalClips(), breakpoint.isGermline()));
		breakpoint = TestUtil.getBreakpoint(false, false, 20, false);
		assertEquals("TTACACAAAGAGATTATATGACTTAGGACAGGTTGATCTTTGCAGATCTGTTCGTTTTGTGAAACAAGGTCTCGATCTGTTGCCTAT", Breakpoint.calculateConsensus(breakpoint.getStrand(), breakpoint.getBreakpointConsenus().length(), false, breakpoint.getTumourClips(), breakpoint.getNormalClips(), breakpoint.isGermline()));
		assertEquals("NNNNNNNNNNNNNNNNNNNNNCCCTGCCCTAAGAGCAGCAAATTGCTGAACTCCTCTGGTGGACCTCTTACACAAAGTATAATCTC", Breakpoint.calculateConsensus(breakpoint.getStrand(), breakpoint.getBreakpointConsenus().length(), true, breakpoint.getTumourClips(), breakpoint.getNormalClips(), breakpoint.isGermline()));
		breakpoint = TestUtil.getBreakpoint(false, true, 20, false);
		assertEquals("TTACACAAAGAGATTATATGACTTAGGACAGGTTGATCTTTGCAGATCTGTTCGTTTTGTGAAACAAGGTCTCGATCTGTTGCCTAT", Breakpoint.calculateConsensus(breakpoint.getStrand(), breakpoint.getBreakpointConsenus().length(), false, breakpoint.getTumourClips(), breakpoint.getNormalClips(), breakpoint.isGermline()));
		assertEquals("NNNNNNNNNNNNNNNNNNNNNCCCTGCCCTAAGAGCAGCAAATTGCTGAACTCCTCTGGTGGACCTCTTACACAAAGTATAATCTC", Breakpoint.calculateConsensus(breakpoint.getStrand(), breakpoint.getBreakpointConsenus().length(), true, breakpoint.getTumourClips(), breakpoint.getNormalClips(), breakpoint.isGermline()));
	}
	
	@Test
	public void calculate() throws Exception {
		breakpoint = TestUtil.getBreakpoint(true, true, 20, false);
		int negLength = 0;
		int posLength = 0;
		int negReadLength = 0;
		int posReadLength = 0;
		
		for (Clip c: breakpoint.getTumourClips()) {
			if (QSVUtil.PLUS == c.getStrand()) {
				posLength = Math.max(posLength, c.getLength());
				posReadLength = Math.max(posReadLength, c.getReferenceSequence().length());
			} else {
				negLength = Math.max(negLength, c.getLength());
				negReadLength = Math.max(negReadLength, c.getReferenceSequence().length());
			}
		}
		if (breakpoint.isGermline()) {
			for (Clip c: breakpoint.getNormalClips()) {
				
				if (QSVUtil.PLUS == c.getStrand()) {
					posLength = Math.max(posLength, c.getLength());
					posReadLength = Math.max(posReadLength, c.getReferenceSequence().length());
				} else {
					negLength = Math.max(negLength, c.getLength());
					negReadLength = Math.max(negReadLength, c.getReferenceSequence().length());
				}
			}
		}
//		//char strand, int clipSize, int length, int readLength,
		ConsensusRead cr = Breakpoint.calculate(breakpoint.getStrand(), breakpoint.getClipsSize(), posLength, posReadLength, breakpoint.getTumourClips(), breakpoint.getNormalClips(), breakpoint.isGermline(), breakpoint.isLeft(), 20);
		assertEquals("AAAGATCAACCTGTCCTAAGTCATATAATCTCTTTGTGTAAGAGATTATACTTTGTGTAAGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGGCAGGGATCAATTCCTTAATATCTTAGGAAGACTAGGTATTGACAGTAAT",cr.getSequence());
	}
	
	@Test
	public void calculateClipConsensus() throws Exception {
		Set<Clip> testClips = new HashSet<>();
		testClips.add(new Clip("HWI-ST1240:47:D12NAACXX:5:2311:7722:24906:20110221052813657,chr10,89712341,+,left,TCTCTTTGTGTAAGAGATTATACTTTGTGTAAGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGGCAGGGATCAATTCCTTAATATCTTAGGA,TCTCTTTGTGTAAGAGATTATACTTTGTGTA,AGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGGCAGGGATCAATTCCTTAATATCTTAGGA"));
		testClips.add(new Clip("HWI-ST1240:47:D12NAACXX:7:2210:12278:86346:20110221052813657,chr10,89712341,+,left,ACTTTGTGTAAGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGGCAGGGATCAATTCCTTAATATCTTAGGAAGACTAGGTATTGACAGTAAT,ACTTTGTGTA,AGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGGCAGGGATCAATTCCTTAATATCTTAGGAAGACTAGGTATTGACAGTAAT"));
		testClips.add(new Clip("HWI-ST1240:47:D12NAACXX:4:2105:19785:71299:20110221052813657,chr10,89712341,+,left,AAAGATCAACCTGTCCTAAGTCATATAATCTCTTTGTGTAAGAGATTATACTTTGTGTAAGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGG,AAAGATCAACCTGTCCTAAGTCATATAATCTCTTTGTGTAAGAGATTATACTTTGTGTA,AGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGG"));
		Set<Clip> controlClips = new HashSet<>();
		controlClips.add(new Clip("HWI-ST1240:47:D12NAACXX:5:2311:7722:24906:20110221052813657,chr10,89712341,+,left,TCTCTTTGTGTAAGAGATTATACTTTGTGTAAGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGGCAGGGATCAATTCCTTAATATCTTAGGA,TCTCTTTGTGTAAGAGATTATACTTTGTGTA,AGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGGCAGGGATCAATTCCTTAATATCTTAGGA"));
		controlClips.add(new Clip("HWI-ST1240:47:D12NAACXX:7:2210:12278:86346:20110221052813657,chr10,89712341,+,left,ACTTTGTGTAAGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGGCAGGGATCAATTCCTTAATATCTTAGGAAGACTAGGTATTGACAGTAAT,ACTTTGTGTA,AGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGGCAGGGATCAATTCCTTAATATCTTAGGAAGACTAGGTATTGACAGTAAT"));
		controlClips.add(new Clip("HWI-ST1240:47:D12NAACXX:4:2105:19785:71299:20110221052813657,chr10,89712341,+,left,AAAGATCAACCTGTCCTAAGTCATATAATCTCTTTGTGTAAGAGATTATACTTTGTGTAAGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGG,AAAGATCAACCTGTCCTAAGTCATATAATCTCTTTGTGTAAGAGATTATACTTTGTGTA,AGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGG"));
		
		ConsensusRead cr = Breakpoint.calculateClipConsensus(0, testClips, controlClips, true, true, 20, true, 6, 0);
		
		/*
		 * >consensusread
FULL:AAAGATCAACCTGTCCTAAGTCATATAATCTCTTTGTGTAAGAGATTATACTTTGTGTAAGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGGCAGGGATCAATTCCTTAATATCTTAGGAAGACTAGGTATTGACAGTAAT
CLIPS:AAAGATCAACCTGTCCTAAGTCATATAATCTCTTTGTGTAAGAGATTATACTTTGTGTA
READ:AGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGGCAGGGATCAATTCCTTAATATCTTAGGAAGACTAGGTATTGACAGTAAT
		 */
		assertEquals("AAAGATCAACCTGTCCTAAGTCATATAATCTCTTTGTGTAAGAGATTATACTTTGTGTA", cr.getClipMateSequence());
		assertEquals("AGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGGCAGGGATCAATTCCTTAATATCTTAGGAAGACTAGGTATTGACAGTAAT", cr.getReferenceSequence());
		assertEquals("AAAGATCAACCTGTCCTAAGTCATATAATCTCTTTGTGTAAGAGATTATACTTTGTGTAAGAGGTCCACCAGAGGAGTTCAGCAATTTGCTGCTCTTAGGGCAGGGATCAATTCCTTAATATCTTAGGAAGACTAGGTATTGACAGTAAT", cr.getSequence());
	}
	
	@Test
	public void calculateConsensus() {
		assertEquals("A", Breakpoint.getBaseCountString(setUpBases(1,0,0,0,0)));
		assertEquals("C", Breakpoint.getBaseCountString(setUpBases(0,1,0,0,0)));
		assertEquals("T", Breakpoint.getBaseCountString(setUpBases(0,0,1,0,0)));
		assertEquals("G", Breakpoint.getBaseCountString(setUpBases(0,0,0,1,0)));
		assertEquals("", Breakpoint.getBaseCountString(setUpBases(0,0,0,0,1)));
		assertEquals("N", Breakpoint.getBaseCountString(setUpBases(1,1,0,0,0)));
		assertEquals("A", Breakpoint.getBaseCountString(setUpBases(2,1,0,0,0)));
	}
	
	@Test
	public void calculateStrand() throws QSVException {
		assertStrand(QSVUtil.PLUS, QSVUtil.PLUS, false, 2,0);
		assertStrand(QSVUtil.MINUS, QSVUtil.MINUS, false, 0, 2);
		assertStrand(QSVUtil.PLUS, QSVUtil.PLUS, true, 4,0);
		assertStrand(QSVUtil.MINUS, QSVUtil.MINUS, true, 0, 4);
	}
	
	@Test
	public void testCompare() {
		breakpoint = new Breakpoint(1, "reference", true, 1, 1);
		breakpoint.setMateBreakpoint(12345);
		breakpoint.setMateReference("chr1");
		assertNull(breakpoint.compare("chr2", 12345));
		assertNull(breakpoint.compare("chr1", 12356));
		assertEquals(new Integer(12350), breakpoint.compare("chr1", 12350));
	}
	
	@Test
	public void compare() {
		assertEquals(OptionalInt.of(0), Breakpoint.compare("", 0, "", 0));
		assertEquals(OptionalInt.empty(), Breakpoint.compare("", 0, "1", 0));
		assertEquals(OptionalInt.empty(), Breakpoint.compare("1", 0, "", 0));
		assertEquals(OptionalInt.of(0), Breakpoint.compare("chr1", 0, "chr1", 0));
		assertEquals(OptionalInt.of(0), Breakpoint.compare("chr1", 0, "chr1", 10));
		assertEquals(OptionalInt.of(10), Breakpoint.compare("chr1", 10, "chr1", 0));
		assertEquals(OptionalInt.of(10), Breakpoint.compare("chr1", 10, "chr1", 15));
		assertEquals(OptionalInt.of(10), Breakpoint.compare("chr1", 10, "chr1", 20));
		assertEquals(OptionalInt.empty(), Breakpoint.compare("chr1", 10, "chr1", 21));
		assertEquals(OptionalInt.empty(), Breakpoint.compare("chr1", 32, "chr1", 21));
		assertEquals(OptionalInt.empty(), Breakpoint.compare("chr2", 10, "chr1", 20));
	}
	
//	@Test
//	public void testFindRescuedMateBreakpoint() throws Exception {
//		breakpoint = new Breakpoint(89712341, "chr10", true, -1, -1);	
//		HashSet<Clip> set = new HashSet<Clip>();
//		set.add(new Clip("test,chr10,89712341,+,left,ACTTTGAAAAAACAGTAATTAA,ACTTTGAAAAAACAGTAATT,AA"));	
//		set.add(new Clip("test2,chr10,89712341,+,left,ACTTTGAAAAAACAGTAATTAA,ACTTTGAAAAAACAGTAATT,AA"));
//		for (Clip c : set) {
//			breakpoint.addTumourClip(c);
//		}
//		breakpoint.setStrand(QSVUtil.PLUS);
//		String name = breakpoint.getName();
//		BLAT blat = createMock(BLAT.class);
//		String softClipDir = testFolder.newFolder().getAbsolutePath();
//		Map<String, BLATRecord> expected = new HashMap<String, BLATRecord>();
//        String value = "48\t1\t0\t0\t2\t0\t3\t0\t-\tchr10_89712341_true_+\t66\t0\t48\tchr10\t135534747\t89700251\t89700299\t1\t48,\t0,\t89700251,";
//	    expected.put(name, new BLATRecord(value));
//		expect(blat.align(softClipDir + QSVUtil.getFileSeparator() +  (name + ".fa"), softClipDir + QSVUtil.getFileSeparator() + name + ".psl")).andReturn(expected);
//		replay(blat);
//        QSVParameters p = createMock(QSVParameters.class);             
//        
//        assertTrue(breakpoint.findRescuedMateBreakpoint(blat, p, softClipDir));
//        assertEquals(QSVUtil.MINUS, breakpoint.getMateStrand());
//        // not so because we have now set isLeft to be true, rather than the default value which is false
//        assertEquals(89700252, breakpoint.getMateBreakpoint());
//        assertEquals("chr10", breakpoint.getMateReference());
//	}

	private void assertStrand(char strand1, char strand2, boolean isGermline,
			int posStrandCount, int negStrandCount) throws QSVException {
		breakpoint = new Breakpoint(1, "reference", true, 1, 1);	
		HashSet<Clip> set = new HashSet<Clip>();
		set.add(new Clip("test,chr10,89712341,"+strand1+",left,ACTTTGAAAAAACAGTAATTAA,ACTTTGAAAAAACAGTAATT,AA"));		
		set.add(new Clip("test2,chr10,89712341,"+strand2+",left,ACTTTGAAAAAACAGTAATTAA,ACTTTGAAAAAACAGTAATT,AA"));
		for (Clip c : set) {
			breakpoint.addTumourClip(c);
		}
		if (isGermline) {
			breakpoint.setGermline(true);
			set.clear();
			set.add(new Clip("test3,chr10,89712341,"+strand1+",left,ACTTTGAAAAAACAGTAATTAA,ACTTTGAAAAAACAGTAATT,AA"));		
			set.add(new Clip("test4,chr10,89712341,"+strand2+",left,ACTTTGAAAAAACAGTAATTAA,ACTTTGAAAAAACAGTAATT,AA"));
			for (Clip c : set) {
				breakpoint.addNormalClip(c);
			}
		}
		breakpoint.calculateStrand();
		assertEquals(strand1, breakpoint.getStrand());
		assertEquals(posStrandCount, breakpoint.getPosStrandCount());
		assertEquals(negStrandCount, breakpoint.getNegStrandCount());
	}
	
	@Test
	public void testConsensusRead() throws Exception {
		breakpoint = new Breakpoint(1, "reference", true, 1, 1);
		breakpoint.setStrand(QSVUtil.PLUS);
		breakpoint.setConsensusRead(new ConsensusRead("test", "ACTTTGAAAAAACAGTAATTAA","ACTTTGAAAAAACAGTAATT","AA"));
		
		assertEquals("ACTTTGAAAAAACAGTAATTAA", breakpoint.getCompleteConsensus());
		assertEquals("ACTTTGAAAAAACAGTAATT", breakpoint.getMateConsensus());
		assertEquals("AA", breakpoint.getBreakpointConsenus());
		breakpoint.setStrand(QSVUtil.MINUS);
		assertEquals("TTAATTACTGTTTTTTCAAAGT", breakpoint.getCompleteConsensus());
		assertEquals("ACTTTGAAAAAACAGTAATT", breakpoint.getMateConsensus());
		assertEquals("TT", breakpoint.getBreakpointConsenus());
	}
	
	@Test
	public void belowMinInsertSizeSameBP() {
		// same bp and mate bp
		assertEquals(true, Breakpoint.belowMinInsertSize(0, 0, 0));
		assertEquals(true, Breakpoint.belowMinInsertSize(1, 1, 0));
		assertEquals(true, Breakpoint.belowMinInsertSize(12345, 12345, 0));
		assertEquals(true, Breakpoint.belowMinInsertSize(-12345, -12345, 0));
	}
	@Test
	public void belowMinInsertSizeDiffBP() {
		// same bp and mate bp
		assertEquals(false, Breakpoint.belowMinInsertSize(0, 1, 0));
		assertEquals(true, Breakpoint.belowMinInsertSize(0, 1, 1));
		assertEquals(true, Breakpoint.belowMinInsertSize(1, 0, 1));
		assertEquals(false, Breakpoint.belowMinInsertSize(2, 0, 1));
		assertEquals(false, Breakpoint.belowMinInsertSize(0, 2, 1));
		assertEquals(true, Breakpoint.belowMinInsertSize(0, 2, 2));
		assertEquals(true, Breakpoint.belowMinInsertSize(2, 1, 2));
	}
	
	private int[][] setUpBases(int a, int b, int c, int d, int e) {
		int[][] bases = new int[1][5];
		bases[0][0] = a;
		bases[0][1] = b;
		bases[0][2] = c;
		bases[0][3] = d;
		bases[0][4] = e;
		return bases;
	}
}
