plugins {
  id 'checkstyle'
  id 'findbugs'
  id 'eclipse'
}
defaultTasks "build"
allprojects {
   apply plugin: 'java'
   repositories { flatDir(dirs:"$projectDir/../lib"); mavenCentral() }
}

ext {
  def proc = "git rev-parse --short HEAD".execute()
  if (proc.waitFor() != 0) {
	throw new RuntimeException('git version info gathering failed')
  }
  revision = proc.text.trim()

  timestamp = new java.text.SimpleDateFormat('yyyyMMddHHmmss').format(new
  java.util.Date()) 
}
version = 1.0

def adamalib=file('adama/build/lib').absolutePath  
subprojects {
   apply plugin: 'eclipse'
   apply plugin: 'checkstyle'
   apply plugin: 'findbugs'
   sourceCompatibility = 1.8
   defaultTasks "build"
   libsDirName = "lib"
   test.workingDir = getProperty('buildDir').getAbsolutePath() + '/classes/test'

  checkstyle {
    configFile = file('../config/google_check.xml')
    toolVersion = '8.15'
    checkstyleTest.enabled=false
  }
  findbugs {
    ignoreFailures = true
    findbugsTest.enabled=false
  }
  tasks.withType(FindBugs) {
    reports {
        xml.enabled = true
        html.enabled = false
    }
  }
  checkstyleMain.onlyIf {project.hasProperty('checkstyle')}

   dependencies { testCompile 'junit:junit:4.10' }
   
   sourceSets {
      main { java.srcDirs=['src']; resources.srcDirs=['src'] }
      test { java.srcDirs=['test']; test.resources.srcDirs=['test'] }
   }      	

   jar.doFirst {
      if(project.hasProperty('mainClassName') && project.getProperty('mainClassName') != null ) 
	manifest.attributes 'Main-Class' : project.mainClassName 

      def classpath = project.configurations.runtime.collect { it.name }.join(' ')
      manifest {    
        attributes 'Implementation-Title': project.name,
        	   'Implementation-Version': "$version ($revision)",
        	   'SVN-Version': revision,
                   'Built-By': System.properties['user.name'],
                   'Date': new java.util.Date().toString(),
                   'Class-Path' : project.configurations.runtime.collect { it.name }.join(' ')
	}
    }

    build.doLast {
    	def jarname = project.name
    	ant {
      	    echo(file: "build/flat/${jarname}", message: "#!/bin/bash\njava -jar ${jarname}-${version}.jar \$@")
            chmod(file: "build/flat/${jarname}", perm: "u+rwx")
        }
        println  "copying ${project} libs to " + file('adama/build/lib').absolutePath
        copy { from configurations.compile, 'build/lib'; into file('build/flat') }
        copy { from project.configurations.compile, 'build/lib'; into file('adama/build/lib') }
        copy { from project.configurations.compile, 'build/lib'; into adamalib }
    }
}

//create adama/build/lib under root before subprojects build
build.doLast {
    delete(adamalib)
    mkdir (adamalib)
    copy{ from 'lib'; into 'adama/build/lib'; include '**/*.so' }
    println "should have copied from ${libsDirName} to " + adamalib
}

task dist(type: Zip) {
  def zippedDir = "${project.name}-${version}"
  into(zippedDir){
    into ('lib') {  from 'adama/build/lib'}
    into ('licenses') { from 'adama/licenses' }
    into ('bin') { from 'adama/bin'; fileMode = 0755 }
  }
  destinationDir = 'adama/build/distributions' as File
}

task timestamped_dist(type: Zip) {
     def zippedDir = "${project.name}-${timestamp}"
     destinationDir = new java.io.File("adama/build/timestamped_distributions")
     version = "${timestamp}"
     into(zippedDir) {
       into('lib') { from 'adama/build/lib' }
       into('bin') {  from 'adama/bin';  fileMode = 0755 }
       into('licenses') {  from 'adama/licenses' }
     }
 }
 
  task latest_dist(type: Zip, dependsOn: timestamped_dist) {
     def zippedDir = "${project.name}-${timestamp}"
     destinationDir = new java.io.File("adama/build/timestamped_distributions")
     version = "LATEST"
     into(zippedDir) {
       into('lib') { from 'adama/build/lib' }
       into('bin') { from 'adama/bin'; fileMode = 0755 }
       into('licenses') { from 'adama/licenses' }
     }
  }

clean.doLast { ant { delete(dir: "adama/build") } ; subprojects {delete('adama/build/lib')} }
